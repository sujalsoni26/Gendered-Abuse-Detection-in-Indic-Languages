{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":114440,"status":"ok","timestamp":1744713699656,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"ofi3U7-OkPp3","outputId":"201d6f1e-1108-4800-bfd3-68b61966eb00"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2568,"status":"ok","timestamp":1744713706229,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"H-tWaOpK9yzb","outputId":"f0ffb1f0-4bf3-411b-ec3e-79cfbfe332a2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting emoji\n","  Downloading emoji-2.14.1-py3-none-any.whl.metadata (5.7 kB)\n","Downloading emoji-2.14.1-py3-none-any.whl (590 kB)\n","\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/590.6 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m590.6/590.6 kB\u001b[0m \u001b[31m34.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: emoji\n","Successfully installed emoji-2.14.1\n"]}],"source":["!pip install emoji\n","# !pip install datasets"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"mndrNC668uQP","executionInfo":{"status":"ok","timestamp":1744713715039,"user_tz":-330,"elapsed":8749,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["# Data Handling\n","import os\n","import re\n","import string\n","import numpy as np\n","import pandas as pd\n","from numpy import array\n","from numpy import asarray\n","from numpy import zeros\n","\n","# NLP Preprocessing\n","# import nltk\n","from tensorflow.keras.preprocessing.text import Tokenizer, one_hot\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","# Machine Learning & Model Evaluation\n","from sklearn.model_selection import train_test_split\n","# from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics import (\n","    classification_report, f1_score, precision_score, recall_score,\n","    confusion_matrix, accuracy_score\n",")\n","# from skmultilearn.adapt import MLkNN\n","\n","# Deep Learning (Keras & TensorFlow)\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import (\n","    Embedding, LSTM, GRU, SimpleRNN, Dense, Dropout, Activation, Concatenate\n",")\n","from tensorflow.keras.optimizers import Adam\n","# from tensorflow.keras.losses import MeanSquaredError\n","from tensorflow.keras.utils import to_categorical\n","\n","# Visualization\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import emoji\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"DiVADZM88vsW","executionInfo":{"status":"ok","timestamp":1744713721515,"user_tz":-330,"elapsed":6463,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["d1= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_hi_l1.csv')\n","d3= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_hi_l3.csv')\n","\n","d1_test= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/testing/test_hi_l1.csv', engine = 'python')\n","d3_test= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/testing/test_hi_l3.csv', engine = 'python')\n"]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Load CSV files\n","d111 = pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_hi_l1.csv')\n","d333 = pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_hi_l3.csv')\n","\n","# Ensure both DataFrames have a 'text' column\n","if 'text' not in d111.columns or 'text' not in d333.columns:\n","    raise ValueError(\"One or both DataFrames are missing the 'text' column.\")\n","\n","# Convert to string to avoid NaN/type issues\n","d111['text'] = d111['text'].astype(str)\n","d333['text'] = d333['text'].astype(str)\n","\n","# Find rows in d111 not in d333\n","not_in_d333 = d111[~d111['text'].isin(d333['text'])]\n","print(f\"✅ Rows in d111 but not in d333: {len(not_in_d333)}\")\n","print(not_in_d333.head())\n","\n","# Find rows in d333 not in d111\n","not_in_d111 = d333[~d333['text'].isin(d111['text'])]\n","print(f\"\\n✅ Rows in d333 but not in d111: {len(not_in_d111)}\")\n","print(not_in_d111.head())\n","\n","# Optional: Save to CSV for review\n","# not_in_d333.to_csv(\"/content/drive/MyDrive/d111_unique.csv\", index=False)\n","# not_in_d111.to_csv(\"/content/drive/MyDrive/d333_unique.csv\", index=False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VmuLhkJMexa0","executionInfo":{"status":"ok","timestamp":1744713722004,"user_tz":-330,"elapsed":486,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"15c9a135-9014-4c70-9278-7f064c8c53a4"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Rows in d111 but not in d333: 1\n","                                                   text         key hi_a1  \\\n","2476  <handle replaced>Intha padathula yaachu sagama...  question_1    NL   \n","\n","     hi_a2 hi_a3 hi_a4 hi_a5  \n","2476   NaN   NaN   NaN   0.0  \n","\n","✅ Rows in d333 but not in d111: 1\n","                                                   text         key hi_a1  \\\n","4417  <handle replaced>भगवान इनकी आत्मा को शांति दे ...  question_3   NaN   \n","\n","     hi_a2 hi_a3 hi_a4 hi_a5  \n","4417   NaN   1.0   NaN   NaN  \n"]}]},{"cell_type":"code","execution_count":6,"metadata":{"id":"sOqst0Nq8yG6","executionInfo":{"status":"ok","timestamp":1744713730788,"user_tz":-330,"elapsed":8783,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["def normalize_text(text):\n","  # emoji_pattern = re.compile(\"[\"\n","  #                             u\"\\U0001F600-\\U0001F64F\"  # emoticons\n","  #                             u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n","  #                             u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n","  #                             u\"\\U0001F700-\\U0001F77F\"  # alchemical symbols\n","  #                             u\"\\U0001F780-\\U0001F7FF\"  # Geometric Shapes Extended\n","  #                             u\"\\U0001F800-\\U0001F8FF\"  # Supplemental Arrows-C\n","  #                             u\"\\U0001F900-\\U0001F9FF\"  # Supplemental Symbols and Pictographs\n","  #                             u\"\\U0001FA00-\\U0001FA6F\"  # Chess Symbols\n","  #                             u\"\\U0001FA70-\\U0001FAFF\"  # Symbols and Pictographs Extended-A\n","  #                             u\"\\U00002702-\\U000027B0\"  # Dingbats\n","  #                             u\"\\U000024C2-\\U0001F251\"\n","  #                             \"]+\", flags=re.UNICODE)\n","  text = text.lower()\n","  text = re.sub('\\[.*?\\]', ' ', text)\n","  text = re.sub('https?://\\S+|www\\.\\S+', ' ', text)\n","  text = re.sub('<.*?>+', ' ', text)\n","  text = re.sub('[%s]' % re.escape(string.punctuation), ' ', text)\n","  text = re.sub('\\n', ' ', text)\n","  text = re.sub('\\w*\\d\\w*', ' ', text)\n","  text = re.sub('<handle replaced>', '', text)\n","  text = emoji.demojize(text)\n","  text = text.replace(\"ðŸ¤§\", \" \")\n","  text = text.replace(\"&amp;\", \" \")\n","  text = text.replace(\"\\n\", \" \")\n","  text = text.replace(\"ðŸ˜¡\", \" \")\n","  # text = emoji_pattern.sub(r'', text)\n","  return text\n","\n","d1['text'] = d1['text'].apply(lambda x: normalize_text(x))\n","d1_test['text'] = d1_test['text'].apply(lambda x: normalize_text(x))\n","\n","d3['text'] = d3['text'].apply(lambda x: normalize_text(x))\n","d3_test['text'] = d3_test['text'].apply(lambda x: normalize_text(x))"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":219,"status":"ok","timestamp":1744713731005,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"mWgpPVgh823Q","outputId":"0f6ee935-47ac-4733-aa3d-7c81071a43dc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      label_3                                               text\n","0           1   bandrastation  sharadpawar  muradabad  अगर अभ...\n","1           1   conspiracyagainstindia  सुन लो रे देश के गद्द...\n","2           0   marathareservation   महाराष्ट्र में जश्न का म...\n","3           1   rheachakraborty aap mahesh bhatt se madad kiy...\n","4           1   secularmaskofd हमे पता नहि क्या कहते है  इतना...\n","...       ...                                                ...\n","1512        1  है हैवान लोग होते हैं इनको ओसामा लादेन खतरनाक ...\n","1513        1  :India:जय हिन्द :India:जय भारत :India:वन्दे मा...\n","1514        1  :folded_hands:जय भीम :folded_hands: जो लोग  हम...\n","1515        1  :triangular_flag::om::triangular_flag:  इंसान ...\n","1516        1  :thinking_face:  वो जब मारने की बात करते हैं त...\n","\n","[1517 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-09b75419-fc51-4dfd-a5f9-bb7a74b9d7bd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label_3</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>bandrastation  sharadpawar  muradabad  अगर अभ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>conspiracyagainstindia  सुन लो रे देश के गद्द...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>marathareservation   महाराष्ट्र में जश्न का म...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>rheachakraborty aap mahesh bhatt se madad kiy...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>secularmaskofd हमे पता नहि क्या कहते है  इतना...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1512</th>\n","      <td>1</td>\n","      <td>है हैवान लोग होते हैं इनको ओसामा लादेन खतरनाक ...</td>\n","    </tr>\n","    <tr>\n","      <th>1513</th>\n","      <td>1</td>\n","      <td>:India:जय हिन्द :India:जय भारत :India:वन्दे मा...</td>\n","    </tr>\n","    <tr>\n","      <th>1514</th>\n","      <td>1</td>\n","      <td>:folded_hands:जय भीम :folded_hands: जो लोग  हम...</td>\n","    </tr>\n","    <tr>\n","      <th>1515</th>\n","      <td>1</td>\n","      <td>:triangular_flag::om::triangular_flag:  इंसान ...</td>\n","    </tr>\n","    <tr>\n","      <th>1516</th>\n","      <td>1</td>\n","      <td>:thinking_face:  वो जब मारने की बात करते हैं त...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1517 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09b75419-fc51-4dfd-a5f9-bb7a74b9d7bd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-09b75419-fc51-4dfd-a5f9-bb7a74b9d7bd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-09b75419-fc51-4dfd-a5f9-bb7a74b9d7bd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-68378b75-5cc9-49a2-9be2-1cb3643ae872\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-68378b75-5cc9-49a2-9be2-1cb3643ae872')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-68378b75-5cc9-49a2-9be2-1cb3643ae872 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_afcd228f-556c-4c6b-9a1e-7b4a70e56e6a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('d3_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_afcd228f-556c-4c6b-9a1e-7b4a70e56e6a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('d3_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"d3_test","summary":"{\n  \"name\": \"d3_test\",\n  \"rows\": 1517,\n  \"fields\": [\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1515,\n        \"samples\": [\n          \"   \\u0938\\u0940\\u0916\\u094b \\u0915\\u0940 \\u0939\\u0924\\u094d\\u092f\\u093e \\u0915\\u0930\\u0935\\u093e\\u0928\\u0947 \\u0935\\u093e\\u0932\\u093e \\u092d\\u093e\\u0930\\u0924 \\u0930\\u0924\\u094d\\u0928 \\u0939\\u0948 \\u0915\\u094d\\u092f\\u093e    \\u092d\\u094b\\u092a\\u093e\\u0932 \\u0917\\u0948\\u0938 \\u0924\\u094d\\u0930\\u093e\\u0938\\u0926\\u0940 \\u0915\\u0947 \\u0932\\u093f\\u090f \\u091c\\u093f\\u092e\\u094d\\u092e\\u0947\\u0926\\u093e\\u0930 \\u0915\\u094b \\u092d\\u0917\\u093e\\u0928\\u0947 \\u0935\\u093e\\u0932\\u093e \\u0926\\u0947\\u0936\\u092d\\u0915\\u094d\\u0924 :thinking_face: \\u0915\\u0948\\u0938\\u0947   \",\n          \"    \\u091c\\u093c\\u0939\\u0930 \\u0909\\u0917\\u0932\\u0928\\u0947 \\u0915\\u0947   \\u0915\\u093e\\u0930\\u0916\\u093e\\u0928\\u0947 \\u0914\\u0930 \\u0924\\u0948\\u092f\\u093e\\u0930\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}],"source":["X1 = list(d1['text'])\n","X1_test = list(d1_test['text'])\n","X3 = list(d3['text'])\n","X3_test = list(d3_test['text'])\n","\n","col_lst = ['hi_a1', 'hi_a2', 'hi_a3', 'hi_a4', 'hi_a5']\n","for col in col_lst:\n","    d1[col] = pd.to_numeric(d1[col], errors='coerce')\n","    d1_test[col] = pd.to_numeric(d1_test[col], errors='coerce')\n","\n","    d3[col] = pd.to_numeric(d3[col], errors='coerce')\n","    d3_test[col] = pd.to_numeric(d3_test[col], errors='coerce')\n","\n","\n","d1['label_1'] = d1[col_lst].max(axis=1, skipna=True).astype(int)  # skipna=True to ignore empty values\n","d1_test['label_1'] = d1_test[col_lst].max(axis=1, skipna=True).fillna(0).astype(int)  # skipna=True to ignore empty values\n","\n","d3['label_3'] = d3[col_lst].max(axis=1, skipna=True).astype(int)\n","d3_test['label_3'] = d3_test[col_lst].max(axis=1, skipna=True).fillna(0).astype(int)\n","\n","\n","d1 = d1.drop(col_lst, axis=1)\n","d1_test = d1_test.drop(col_lst, axis=1)\n","d3 = d3.drop(col_lst, axis=1)\n","d3_test = d3_test.drop(col_lst, axis=1)\n","\n","d1['label_1'] = d1['label_1'].astype(int)\n","d1_test['label_1'] = d1_test['label_1'].astype(int)\n","d3['label_3'] = d3['label_3'].astype(int)\n","d3_test['label_3'] = d3_test['label_3'].astype(int)\n","\n","\n","d1 = d1[['label_1', 'text']]\n","d1_test = d1_test[['label_1', 'text']]\n","d1_test\n","\n","d3 = d3[['label_3', 'text']]\n","d3_test = d3_test[['label_3', 'text']]\n","d3_test"]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Merge training sets on 'text'\n","dn = pd.merge(d1[['text', 'label_1']], d3[['text', 'label_3']], on='text', how='inner')\n","\n","# Merge test sets on 'text'\n","dn_test = pd.merge(d1_test[['text', 'label_1']], d3_test[['text', 'label_3']], on='text', how='inner')\n","\n","# View result\n","dn.head()\n","# print(dn_test.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"VWhwlV3xhZ2w","executionInfo":{"status":"ok","timestamp":1744713731140,"user_tz":-330,"elapsed":136,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"b96fc8fd-4043-47a3-c841-6dff20070fcd"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                text  label_1  label_3\n","0    भारत में तीन किसान कानून बिल वापस लेने पर भक...        0        0\n","1    राजस्थान  अजीबोगरीब  गांव की खुशहाली के लिए ...        0        0\n","2    सलमान ने की राखी के विरोधी की वकालत तो  आइटम...        0        0\n","3    हर शब्द अमॄतम    पुरानी एक कहावत है    टूटी ...        0        0\n","4   pm मोदी जी   की माँ के लिए अपशब्द कहने वाला द...        1        1"],"text/html":["\n","  <div id=\"df-d685377b-8fde-4760-8498-c96ccc50f631\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label_1</th>\n","      <th>label_3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>भारत में तीन किसान कानून बिल वापस लेने पर भक...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>राजस्थान  अजीबोगरीब  गांव की खुशहाली के लिए ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>सलमान ने की राखी के विरोधी की वकालत तो  आइटम...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>हर शब्द अमॄतम    पुरानी एक कहावत है    टूटी ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>pm मोदी जी   की माँ के लिए अपशब्द कहने वाला द...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d685377b-8fde-4760-8498-c96ccc50f631')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d685377b-8fde-4760-8498-c96ccc50f631 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d685377b-8fde-4760-8498-c96ccc50f631');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ca1cbfe7-296c-473f-b85e-794b865f1bc3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ca1cbfe7-296c-473f-b85e-794b865f1bc3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ca1cbfe7-296c-473f-b85e-794b865f1bc3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"# print(dn_test\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"  \\u0930\\u093e\\u091c\\u0938\\u094d\\u0925\\u093e\\u0928  \\u0905\\u091c\\u0940\\u092c\\u094b\\u0917\\u0930\\u0940\\u092c  \\u0917\\u093e\\u0902\\u0935 \\u0915\\u0940 \\u0916\\u0941\\u0936\\u0939\\u093e\\u0932\\u0940 \\u0915\\u0947 \\u0932\\u093f\\u090f \\u0930\\u093e\\u0924 \\u092d\\u0930 \\u0915\\u093f\\u0928\\u094d\\u0928\\u0930 \\u0915\\u0930\\u0924\\u0947 \\u0939\\u0948 \\u092f\\u0939 \\u0915\\u093e\\u092e   \",\n          \" pm \\u092e\\u094b\\u0926\\u0940 \\u091c\\u0940   \\u0915\\u0940 \\u092e\\u093e\\u0901 \\u0915\\u0947 \\u0932\\u093f\\u090f \\u0905\\u092a\\u0936\\u092c\\u094d\\u0926 \\u0915\\u0939\\u0928\\u0947 \\u0935\\u093e\\u0932\\u093e \\u0926\\u094b\\u0917\\u0932\\u093e \\u092d\\u0921\\u093c\\u0935\\u093e \\u0930\\u093e\\u091c\\u092c\\u092c\\u094d\\u092c\\u0930 \\u0935\\u093e\\u0938\\u094d\\u0924\\u0935 \\u092e\\u0947\\u0902 \\u0915\\u093f\\u0938\\u0940 \\u0930\\u0902\\u0921\\u0940 \\u0915\\u0940 \\u0939\\u0940 \\u0914\\u0932\\u093e\\u0926 \\u0939\\u094b\\u0917\\u093e  \\u0939\\u0930\\u093e\\u092e\\u0940 \\u0938\\u093e\\u0932\\u093e \\u0930\\u0902\\u0921\\u0940 \\u0915\\u093e \\u0926\\u0932\\u094d\\u0932\\u093e:smiling_face_with_horns:\",\n          \"  \\u0938\\u0932\\u092e\\u093e\\u0928 \\u0928\\u0947 \\u0915\\u0940 \\u0930\\u093e\\u0916\\u0940 \\u0915\\u0947 \\u0935\\u093f\\u0930\\u094b\\u0927\\u0940 \\u0915\\u0940 \\u0935\\u0915\\u093e\\u0932\\u0924 \\u0924\\u094b  \\u0906\\u0907\\u091f\\u092e \\u0917\\u0930\\u094d\\u0932  \\u0928\\u0947 \\u0926\\u0940 \\u0927\\u092e\\u0915\\u0940   rakhisawant  salmankhan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["dn.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q2mZeBBUhqj1","executionInfo":{"status":"ok","timestamp":1744713731167,"user_tz":-330,"elapsed":26,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"756631a1-1792-4e2d-cc1e-428555e62f73"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 6198 entries, 0 to 6197\n","Data columns (total 3 columns):\n"," #   Column   Non-Null Count  Dtype \n","---  ------   --------------  ----- \n"," 0   text     6198 non-null   object\n"," 1   label_1  6198 non-null   int64 \n"," 2   label_3  6198 non-null   int64 \n","dtypes: int64(2), object(1)\n","memory usage: 145.4+ KB\n"]}]},{"cell_type":"code","execution_count":10,"metadata":{"id":"oMiDSNhQ9Fjj","executionInfo":{"status":"ok","timestamp":1744713731208,"user_tz":-330,"elapsed":39,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["# dn = pd.concat([d1, d3.drop(columns=['text'])], axis=1)\n","# dn_test = pd.concat([d1_test, d3_test.drop(columns=['text'])], axis=1)\n","\n","# dn = dn[['text', 'label_1', 'label_3']]\n","# dn_test = dn_test[['text', 'label_1', 'label_3']]\n","# dn_test"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":406,"status":"ok","timestamp":1744713731613,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"ZOVpp4_j9HsY","outputId":"d0b95da4-e4ec-4a1e-c6ea-00f0f4a664e4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   text  label_1  label_3  \\\n","0       भारत में तीन किसान कानून बिल वापस लेने पर भक...        0        0   \n","1       राजस्थान  अजीबोगरीब  गांव की खुशहाली के लिए ...        0        0   \n","2       सलमान ने की राखी के विरोधी की वकालत तो  आइटम...        0        0   \n","3       हर शब्द अमॄतम    पुरानी एक कहावत है    टूटी ...        0        0   \n","4      pm मोदी जी   की माँ के लिए अपशब्द कहने वाला द...        1        1   \n","...                                                 ...      ...      ...   \n","6193  :smiling_face_with_sunglasses: काम वाली बाई का...        0        0   \n","6194  :smiling_face_with_sunglasses::smiling_face_wi...        0        1   \n","6195  :triangular_flag:  :trident_emblem:▁▂▄▅▆▇█:lio...        0        1   \n","6196  :triangular_flag:  लंका का जिहादी डॉक्टर हजारो...        0        0   \n","6197  :litter_in_bin_sign: कचरा कचरा पेटीमें डालिये ...        0        0   \n","\n","      label  \n","0         0  \n","1         0  \n","2         0  \n","3         0  \n","4         3  \n","...     ...  \n","6193      0  \n","6194      1  \n","6195      1  \n","6196      0  \n","6197      0  \n","\n","[6198 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-48105174-5e7e-41e0-bc26-5b7916307169\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label_1</th>\n","      <th>label_3</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>भारत में तीन किसान कानून बिल वापस लेने पर भक...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>राजस्थान  अजीबोगरीब  गांव की खुशहाली के लिए ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>सलमान ने की राखी के विरोधी की वकालत तो  आइटम...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>हर शब्द अमॄतम    पुरानी एक कहावत है    टूटी ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>pm मोदी जी   की माँ के लिए अपशब्द कहने वाला द...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6193</th>\n","      <td>:smiling_face_with_sunglasses: काम वाली बाई का...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6194</th>\n","      <td>:smiling_face_with_sunglasses::smiling_face_wi...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6195</th>\n","      <td>:triangular_flag:  :trident_emblem:▁▂▄▅▆▇█:lio...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6196</th>\n","      <td>:triangular_flag:  लंका का जिहादी डॉक्टर हजारो...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6197</th>\n","      <td>:litter_in_bin_sign: कचरा कचरा पेटीमें डालिये ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6198 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48105174-5e7e-41e0-bc26-5b7916307169')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-48105174-5e7e-41e0-bc26-5b7916307169 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-48105174-5e7e-41e0-bc26-5b7916307169');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-269ebec7-dc0b-447e-a4ed-17d4e82664a3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-269ebec7-dc0b-447e-a4ed-17d4e82664a3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-269ebec7-dc0b-447e-a4ed-17d4e82664a3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_cb32eead-6ca7-480b-a117-d7c02c69b148\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dn')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_cb32eead-6ca7-480b-a117-d7c02c69b148 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dn');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dn","summary":"{\n  \"name\": \"dn\",\n  \"rows\": 6198,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6195,\n        \"samples\": [\n          \" wawo ise nikal do aur mazza aa jata\",\n          \" dekh ke aa gye:face_with_tears_of_joy::face_with_tears_of_joy:\",\n          \"  \\u0916\\u0941\\u0936\\u0940 \\u0926\\u0941\\u092c\\u0947 \\u092a\\u0930 \\u0915\\u093f\\u0924\\u0928\\u0947   \\u0932\\u0917\\u0947 \\u0925\\u0947  \\u0935\\u0948\\u0938\\u0947\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}],"source":["# Create new label column based on logic\n","def assign_label(row):\n","    label_1 = row['label_1']\n","    label_3 = row['label_3']\n","\n","    # Handle NaN cases (rows with only label_1 or label_3)\n","    if pd.isna(label_1) and pd.isna(label_3):\n","        return np.nan  # Both missing\n","    elif pd.isna(label_1):\n","        # Only label_3 exists (from d3, d3_test)\n","        return 1 if label_3 == 1 else 0  # Treat as binary\n","    elif pd.isna(label_3):\n","        # Only label_1 exists (from d1, d1_test)\n","        return 2 if label_1 == 1 else 0  # Treat as binary\n","    else:\n","        # Both labels exist (unlikely unless datasets overlap)\n","        if label_1 == 0 and label_3 == 0:\n","            return 0\n","        elif label_1 == 0 and label_3 == 1:\n","            return 1\n","        elif label_1 == 1 and label_3 == 0:\n","            return 2\n","        else:  # label_1 == 1 and label_3 == 1\n","            return 3\n","\n","# dn_new=dn.copy()\n","dn['label'] = dn.apply(assign_label, axis=1)\n","\n","# dn_test_new=dn_test.copy()\n","dn_test['label'] = dn_test.apply(assign_label, axis=1)\n","\n","dn"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1744713731614,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"YSaME4sQ9juc","outputId":"cc8264df-64aa-4e40-dc9c-a69c1ac68fcb"},"outputs":[{"output_type":"stream","name":"stdout","text":["label\n","0    3059\n","3    1534\n","1    1359\n","2     246\n","Name: count, dtype: int64\n","label\n","3    650\n","0    462\n","1    371\n","2     38\n","Name: count, dtype: int64\n"]}],"source":["dn = dn[['label', 'text']].copy()\n","dn_test = dn_test[['label', 'text']].copy()\n","dn\n","\n","print(dn['label'].value_counts())\n","print(dn_test['label'].value_counts())"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1744713731615,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"l6fD8Ujc8-F8","outputId":"6db0bb76-0741-4ab5-9648-d6befc432e7e"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0 0 0 ... 1 0 0]\n","6198\n"]}],"source":["y_data1 = dn[\"label\"]\n","# y_data2 = d2[\"label\"]\n","# y_data3 = d3[\"label\"]\n","# # print(y_data)\n","y1 = y_data1.values\n","# y2 = y_data2.values\n","# y3 = y_data3.values\n","print(y1)\n","print(len(y1))\n","# print(y2)\n","# print(len(y2))\n","# print(y3)\n","# print(len(y3))"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1744713731632,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"eqcS8s2W-ppD","outputId":"8ea31549-4a66-4671-b4a5-a9e73f50143f"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0 1 2 3]\n","[3059 1359  246 1534]\n","2.2509197939661516\n"]}],"source":["# y1.#\n","unique_values, counts = np.unique(y1, return_counts=True)\n","print(unique_values)\n","print(counts)\n","print(counts[0]/counts[1])\n"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"gXAL76qW-fgB","executionInfo":{"status":"ok","timestamp":1744713731633,"user_tz":-330,"elapsed":2,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["d1 = dn.copy()"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"elapsed":1227,"status":"ok","timestamp":1744713732861,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"hJNxaadV_ik2","outputId":"38167527-36ee-45e3-d9fc-c7e7810d7090"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Average Text Length: 117.15037108744757\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Calculate the lengths of each text element\n","text_lengths = d1['text'].str.len()\n","\n","# Create a histogram with bins of size 10\n","plt.hist(text_lengths, bins=range(0, text_lengths.max() + 10, 10))\n","\n","plt.xlabel('Text Length')\n","plt.ylabel('Frequency')\n","plt.title('Distribution of Text Lengths')\n","plt.show()\n","\n","# Calculate and print the average text length\n","average_length = text_lengths.mean()\n","print(f\"Average Text Length: {average_length}\")\n","\n","# Get counts for each bucket of 10\n","bins = range(0, text_lengths.max() + 10, 10)\n","counts, _ = np.histogram(text_lengths, bins=bins)\n","\n","# sum=0\n","# Print the counts for each bucket\n","# for i in range(len(bins) - 1):\n","#     sum+=counts[i]\n","#     print(f\"Length {bins[i]}-{bins[i+1]}: {counts[i]} {sum}\")"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1744713732909,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"tsxFCYDbMugS","outputId":"96e22bec-a2c2-4518-d89c-75dc221ff545"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.54093925, 0.99758532, 3.52904328, 1.15529456])"]},"metadata":{},"execution_count":17}],"source":["import numpy as np\n","\n","# Total number of samples\n","total_samples = np.array([2864, 1553, 439, 1341]).sum()\n","\n","# Class frequencies\n","class_freq = np.array([2864, 1553, 439, 1341])\n","\n","# Calculate the class weights\n","class_weights = total_samples / (len(class_freq) * class_freq)\n","class_weights"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"49Soz7wQECpW","executionInfo":{"status":"ok","timestamp":1744713732911,"user_tz":-330,"elapsed":1,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["from sklearn.metrics import f1_score\n","from tensorflow.keras.callbacks import Callback\n","import numpy as np\n","\n","class MacroF1Callback(Callback):\n","    def __init__(self, val_data):\n","        super().__init__()\n","        self.validation_data = val_data\n","\n","    def on_epoch_end(self, epoch, logs=None):\n","        val_inputs, val_labels = self.validation_data\n","        predictions = self.model.predict(val_inputs)\n","        y_true = np.argmax(val_labels, axis=1)\n","        y_pred = np.argmax(predictions, axis=1)\n","        macro_f1 = f1_score(y_true, y_pred, average='macro')\n","        print(f'\\nEpoch {epoch+1} — Macro F1-score: {macro_f1:.4f}')\n"]},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","import tensorflow as tf\n","from tensorflow.keras.layers import Input, Dense, Bidirectional, GRU, MultiHeadAttention, GlobalAveragePooling1D, Dropout, Lambda\n","from tensorflow.keras.models import Model\n","from transformers import XLMRobertaTokenizer, TFXLMRobertaModel\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, f1_score\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","from tensorflow.keras import backend as K\n","\n","# ======================\n","# CONFIGURATION\n","# ======================\n","MAX_LEN = 100  # Reduced for English text\n","BATCH_SIZE = 32\n","EPOCHS = 5\n","LEARNING_RATE = 5e-4\n","VAL_SPLIT = 0.2\n","CLASS_WEIGHT = {0: 0.65, 1: 0.85, 2: 2, 3: 1}  # Adjusted for English class distribution\n","XLM_MODEL_NAME = 'xlm-roberta-base'\n","\n","# ======================\n","# MODEL ARCHITECTURE\n","# ======================\n","\n","class XLMRobertaEmbedding(tf.keras.layers.Layer):\n","    def __init__(self, model_name, **kwargs):\n","        super().__init__(**kwargs)\n","        self.xlm_model = TFXLMRobertaModel.from_pretrained(model_name)\n","\n","        # Freeze all layers of the XLM-Roberta model\n","        for layer in self.xlm_model.layers:\n","            layer.trainable = False\n","\n","    def call(self, inputs):\n","        input_ids, attention_mask = inputs\n","        return self.xlm_model(input_ids=input_ids, attention_mask=attention_mask).last_hidden_state\n","\n","\n","def create_model():\n","    input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids')\n","    attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask')\n","\n","    # XLM-R Embeddings\n","    embeddings = XLMRobertaEmbedding(XLM_MODEL_NAME)([input_ids, attention_mask])\n","\n","    # BiGRU\n","    gru_out = Bidirectional(GRU(512, return_sequences=True))(embeddings)\n","\n","    # Multi-Head Attention\n","    attention = MultiHeadAttention(num_heads=4, key_dim=64)(gru_out, gru_out)\n","\n","    # Pooling + Classification\n","    pooled = GlobalAveragePooling1D()(attention)\n","    dropout = Dropout(0.3)(pooled)\n","    output = Dense(4, activation='softmax')(dropout)\n","\n","    return Model(inputs=[input_ids, attention_mask], outputs=output)\n","\n","\n"],"metadata":{"id":"r8XGcuzw4iGw","executionInfo":{"status":"ok","timestamp":1744714356764,"user_tz":-330,"elapsed":3,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","execution_count":31,"metadata":{"id":"Qt9pw3Yt_c2u","executionInfo":{"status":"ok","timestamp":1744714358312,"user_tz":-330,"elapsed":3,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["# # -*- coding: utf-8 -*-\n","# import tensorflow as tf\n","# from tensorflow.keras.layers import Input, Dense, Bidirectional, GRU, MultiHeadAttention\n","# from tensorflow.keras.models import Model\n","# from transformers import XLMRobertaTokenizer, TFXLMRobertaModel\n","# from sklearn.model_selection import train_test_split\n","# from sklearn.metrics import classification_report, f1_score\n","# import matplotlib.pyplot as plt\n","# import numpy as np\n","# import pandas as pd\n","# from tensorflow.keras.layers import Input, Lambda, Dense, Dropout, Bidirectional, GRU, GlobalAveragePooling1D\n","# from tensorflow.keras.models import Model\n","# from tensorflow.keras import backend as K\n","\n","# # ======================\n","# # CONFIGURATION\n","# # ======================\n","# MAX_LEN = 100 # Reduced for English text\n","# BATCH_SIZE = 32\n","# EPOCHS = 5\n","# LEARNING_RATE = 5e-4\n","# VAL_SPLIT = 0.2\n","# # CLASS_WEIGHT = {0: 1, 1: 3.5, 2: 1, 3: 1}  # Adjusted for English class distribution\n","# CLASS_WEIGHT = {0: 0.65, 1: 0.85, 2: 2, 3: 1}  # Adjusted for English class distribution\n","# XLM_MODEL_NAME = 'xlm-roberta-base'\n","\n","# # ======================\n","# # MODEL ARCHITECTURE\n","# # ======================\n","\n","# class XLMRobertaEmbedding(tf.keras.layers.Layer):\n","#     def __init__(self, model_name, **kwargs):\n","#         super().__init__(**kwargs)\n","#         self.xlm_model = TFXLMRobertaModel.from_pretrained(model_name)\n","\n","#         for i in range(6):  # You can change how many layers you want frozen\n","#             self.xlm_model.roberta.encoder.layer[i].trainable = False\n","\n","#     def call(self, inputs):\n","#         input_ids, attention_mask = inputs\n","#         return self.xlm_model(\n","#             input_ids,\n","#             attention_mask=attention_mask,\n","#             return_dict=True\n","#         ).last_hidden_state\n","\n","\n","# def create_model():\n","#     input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids')\n","#     attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask')\n","\n","#     xlm_model = TFXLMRobertaModel.from_pretrained(XLM_MODEL_NAME)\n","\n","#     for i in range(8):\n","#         xlm_model.roberta.encoder.layer[i].trainable = False\n","\n","#     def xlm_embed(inputs):\n","#         input_ids, attention_mask = inputs\n","#         outputs = xlm_model(input_ids=input_ids, attention_mask=attention_mask)\n","#         return outputs.last_hidden_state\n","\n","#     embeddings = Lambda(xlm_embed, output_shape=(MAX_LEN, 768))([input_ids, attention_mask])  # (None, 100, 768)\n","\n","#     gru_out = Bidirectional(GRU(512, return_sequences=True))(embeddings)\n","#     attention = tf.keras.layers.MultiHeadAttention(num_heads=4, key_dim=64)(gru_out, gru_out)\n","#     pooled = GlobalAveragePooling1D()(attention)\n","#     dropout = Dropout(0.3)(pooled)\n","#     output = Dense(4, activation='softmax')(dropout)\n","\n","#     return Model(inputs=[input_ids, attention_mask], outputs=output)\n","\n","\n","# # Load dataset (replace with your English data path)\n","# english_df = d1\n","\n","# # Split data\n","# X_train, X_val, y_train, y_val = train_test_split(\n","#     english_df['text'].values,\n","#     english_df['label'].values,\n","#     test_size=VAL_SPLIT,\n","#     stratify=english_df['label'],\n","#     random_state=42\n","# )\n","\n","# from tensorflow.keras.utils import to_categorical\n","\n","# y_train = to_categorical(y_train, num_classes=4)\n","# y_val = to_categorical(y_val, num_classes=4)\n","\n","# # Tokenization\n","# tokenizer = XLMRobertaTokenizer.from_pretrained(XLM_MODEL_NAME)\n","\n","# def preprocess(texts):\n","#     return tokenizer(\n","#         texts.tolist(),\n","#         max_length=MAX_LEN,\n","#         truncation=True,\n","#         padding='max_length',\n","#         return_tensors='tf'\n","#     )\n","\n","# train_enc = preprocess(X_train)\n","# val_enc = preprocess(X_val)\n","\n","# # ======================\n","# # MODEL TRAINING\n","# # ======================\n","# model = create_model()\n","# model.compile(\n","#     optimizer=tf.keras.optimizers.Adam(LEARNING_RATE),\n","#     loss='categorical_crossentropy',\n","#     metrics=['accuracy']\n","# )\n","\n","# for layer in model.layers:\n","#     print(layer.name, layer.trainable)\n","\n","\n","# print(\"\\n\\nMODEL SUMMARY\\n\\n\\n\")\n","# model.summary()\n","\n","# val_data = (\n","#     {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","#     y_val\n","# )\n","\n","# f1_callback = MacroF1Callback(val_data)\n","# history = model.fit(\n","#     {'input_ids': train_enc['input_ids'], 'attention_mask': train_enc['attention_mask']},\n","#     y_train,\n","#     validation_data=val_data,\n","#     epochs=EPOCHS,\n","#     batch_size=BATCH_SIZE,\n","#     class_weight=CLASS_WEIGHT,\n","#     callbacks=[f1_callback]\n","# )\n"]},{"cell_type":"code","source":["# Load dataset (replace with your English data path)\n","english_df = d1\n","\n","# Split data\n","X_train, X_val, y_train, y_val = train_test_split(\n","    english_df['text'].values,\n","    english_df['label'].values,\n","    test_size=VAL_SPLIT,\n","    stratify=english_df['label'],\n","    random_state=42\n",")\n","\n","from tensorflow.keras.utils import to_categorical\n","\n","y_train = to_categorical(y_train, num_classes=4)\n","y_val = to_categorical(y_val, num_classes=4)\n","\n","# Tokenization\n","tokenizer = XLMRobertaTokenizer.from_pretrained(XLM_MODEL_NAME)\n","\n","def preprocess(texts):\n","    return tokenizer(\n","        texts.tolist(),\n","        max_length=MAX_LEN,\n","        truncation=True,\n","        padding='max_length',\n","        return_tensors='tf'\n","    )\n","\n","train_enc = preprocess(X_train)\n","val_enc = preprocess(X_val)\n","\n","# ======================\n","# MODEL TRAINING\n","# ======================\n","model = create_model()\n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=LEARNING_RATE),\n","    loss='categorical_crossentropy',\n","    metrics=['accuracy']\n",")\n","\n","print(\"\\n\\nMODEL SUMMARY\\n\\n\\n\")\n","model.summary()\n","\n","val_data = (\n","    {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","    y_val\n",")\n","\n","# Assuming you have defined or imported the MacroF1Callback class\n","f1_callback = MacroF1Callback(val_data)\n","\n","history = model.fit(\n","    {'input_ids': train_enc['input_ids'], 'attention_mask': train_enc['attention_mask']},\n","    y_train,\n","    validation_data=val_data,\n","    epochs=EPOCHS,\n","    batch_size=BATCH_SIZE,\n","    class_weight=CLASS_WEIGHT,\n","    callbacks=[f1_callback]  # You can uncomment this once defined\n",")\n","\n","\n"],"metadata":{"id":"bI5m_4gV4lXK","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1744714748415,"user_tz":-330,"elapsed":389694,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"4408a709-7dfb-4ffd-9f0d-1ae6cb017140"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFXLMRobertaModel: ['lm_head.layer_norm.weight', 'lm_head.bias', 'lm_head.dense.bias', 'lm_head.dense.weight', 'lm_head.layer_norm.bias']\n","- This IS expected if you are initializing TFXLMRobertaModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFXLMRobertaModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n","All the weights of TFXLMRobertaModel were initialized from the PyTorch model.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFXLMRobertaModel for predictions without further training.\n"]},{"output_type":"stream","name":"stdout","text":["\n","\n","MODEL SUMMARY\n","\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"functional_1\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_ids           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_mask      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ xlm_roberta_embedd… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m768\u001b[0m)  │          \u001b[38;5;34m0\u001b[0m │ input_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n","│ (\u001b[38;5;33mXLMRobertaEmbeddi…\u001b[0m │                   │            │ attention_mask[\u001b[38;5;34m0\u001b[0m… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ bidirectional_1     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1024\u001b[0m) │  \u001b[38;5;34m3,938,304\u001b[0m │ xlm_roberta_embe… │\n","│ (\u001b[38;5;33mBidirectional\u001b[0m)     │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ multi_head_attenti… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1024\u001b[0m) │  \u001b[38;5;34m1,050,368\u001b[0m │ bidirectional_1[\u001b[38;5;34m…\u001b[0m │\n","│ (\u001b[38;5;33mMultiHeadAttentio…\u001b[0m │                   │            │ bidirectional_1[\u001b[38;5;34m…\u001b[0m │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ multi_head_atten… │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout_4 (\u001b[38;5;33mDropout\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ global_average_p… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_1 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)         │      \u001b[38;5;34m4,100\u001b[0m │ dropout_4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_ids           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_mask      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ xlm_roberta_embedd… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">XLMRobertaEmbeddi…</span> │                   │            │ attention_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ bidirectional_1     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>) │  <span style=\"color: #00af00; text-decoration-color: #00af00\">3,938,304</span> │ xlm_roberta_embe… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)     │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ multi_head_attenti… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>) │  <span style=\"color: #00af00; text-decoration-color: #00af00\">1,050,368</span> │ bidirectional_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MultiHeadAttentio…</span> │                   │            │ bidirectional_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ multi_head_atten… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ global_average_p… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">4,100</span> │ dropout_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m4,992,772\u001b[0m (19.05 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,992,772</span> (19.05 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m4,992,772\u001b[0m (19.05 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,992,772</span> (19.05 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","\u001b[1m39/39\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 289ms/step\n","\n","Epoch 1 — Macro F1-score: 0.3029\n","\u001b[1m155/155\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m90s\u001b[0m 484ms/step - accuracy: 0.4461 - loss: 1.0789 - val_accuracy: 0.5508 - val_loss: 1.0810\n","Epoch 2/5\n","\u001b[1m39/39\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 213ms/step\n","\n","Epoch 2 — Macro F1-score: 0.3035\n","\u001b[1m155/155\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m67s\u001b[0m 388ms/step - accuracy: 0.5486 - loss: 0.9741 - val_accuracy: 0.5468 - val_loss: 1.1410\n","Epoch 3/5\n","\u001b[1m39/39\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 211ms/step\n","\n","Epoch 3 — Macro F1-score: 0.3412\n","\u001b[1m155/155\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 385ms/step - accuracy: 0.5711 - loss: 0.9421 - val_accuracy: 0.5161 - val_loss: 1.1001\n","Epoch 4/5\n","\u001b[1m39/39\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 212ms/step\n","\n","Epoch 4 — Macro F1-score: 0.3642\n","\u001b[1m155/155\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m60s\u001b[0m 387ms/step - accuracy: 0.5977 - loss: 0.8925 - val_accuracy: 0.5363 - val_loss: 1.0891\n","Epoch 5/5\n","\u001b[1m39/39\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 213ms/step\n","\n","Epoch 5 — Macro F1-score: 0.3937\n","\u001b[1m155/155\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m58s\u001b[0m 376ms/step - accuracy: 0.6167 - loss: 0.8435 - val_accuracy: 0.4806 - val_loss: 1.2257\n"]}]},{"cell_type":"code","source":["# Save the trained model\n","model.save('/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/task_3_hi_xlm_roberta.keras')\n","\n","# Save tokenizer\n","tokenizer.save_pretrained(\"/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task3_tokenizer_hi\")\n"],"metadata":{"id":"YGM7MaVO4sPj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744714892866,"user_tz":-330,"elapsed":461,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"5a7ee5d8-48c4-46a2-b1ca-a13522c1cdd3"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task3_tokenizer_hi/tokenizer_config.json',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task3_tokenizer_hi/special_tokens_map.json',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task3_tokenizer_hi/sentencepiece.bpe.model',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task3_tokenizer_hi/added_tokens.json')"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["\n","# Load the saved model\n","print(\"Loading the saved model...\")\n","loaded_model = tf.keras.models.load_model(\n","    \"/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/task_3_hi_xlm_roberta.keras\",\n","    custom_objects={'XLMRobertaEmbedding': XLMRobertaEmbedding}\n",")\n","\n","# You can proceed to use the `loaded_model` for inference or further training."],"metadata":{"id":"3h-T0t_Y4s3i","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744714901453,"user_tz":-330,"elapsed":6851,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"ef68027e-1f36-4934-f2fe-0a6794441b7a"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Loading the saved model...\n"]},{"output_type":"stream","name":"stderr","text":["Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFXLMRobertaModel: ['lm_head.layer_norm.weight', 'lm_head.bias', 'lm_head.dense.bias', 'lm_head.dense.weight', 'lm_head.layer_norm.bias']\n","- This IS expected if you are initializing TFXLMRobertaModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFXLMRobertaModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n","All the weights of TFXLMRobertaModel were initialized from the PyTorch model.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFXLMRobertaModel for predictions without further training.\n"]}]},{"cell_type":"code","source":["model = loaded_model"],"metadata":{"id":"0gtRxYwy4uqr","executionInfo":{"status":"ok","timestamp":1744714901458,"user_tz":-330,"elapsed":3,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","execution_count":44,"metadata":{"id":"aYfaa1ASBrMd","executionInfo":{"status":"ok","timestamp":1744714901487,"user_tz":-330,"elapsed":3,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["\n","# # ======================\n","# # EVALUATION & VISUALIZATION\n","# # ======================\n","# def evaluate_model(model, data, true_labels):\n","#     y_pred = model.predict(data)\n","#     y_pred_labels = (y_pred > 0.5).astype(int)\n","\n","#     print(\"\\nClassification Report:\")\n","#     print(classification_report(true_labels, y_pred_labels))\n","#     print(f\"F1 Score: {f1_score(true_labels, y_pred_labels, average='macro'):.4f}\")\n","\n","# print(\"English Validation Results:\")\n","# evaluate_model(model,\n","#     {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","#     y_val\n","# )\n","\n","from sklearn.metrics import classification_report, f1_score, confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","def evaluate_model(model, data, true_labels, class_names=None):\n","    # Predict probabilities\n","    y_pred = model.predict(data)\n","\n","    # Convert to class labels\n","    y_pred_labels = y_pred.argmax(axis=1)  # Assuming softmax output\n","    true_labels = true_labels.argmax(axis=1) if true_labels.ndim > 1 else true_labels\n","\n","    # Classification report\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(true_labels, y_pred_labels, target_names=class_names))\n","    print(f\"Macro F1 Score: {f1_score(true_labels, y_pred_labels, average='macro'):.4f}\")\n","\n","    # Confusion matrix\n","    cm = confusion_matrix(true_labels, y_pred_labels)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=class_names, yticklabels=class_names)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n"]},{"cell_type":"code","source":["class_names = ['Neutral', 'Gender Abuse', 'Explicit Lang', 'Both']\n","\n","print(\"English Validation Results:\")\n","evaluate_model(\n","    model,\n","    {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","    y_val,\n","    class_names=class_names\n",")\n"],"metadata":{"id":"GY6ZmDzJWjA4","colab":{"base_uri":"https://localhost:8080/","height":842},"executionInfo":{"status":"ok","timestamp":1744714922256,"user_tz":-330,"elapsed":20767,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"dd82c408-59c3-457c-a00c-25a3e9bba022"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["English Validation Results:\n","\u001b[1m39/39\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 306ms/step\n","\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","      Neutral       0.73      0.54      0.62       612\n"," Gender Abuse       0.36      0.43      0.39       272\n","Explicit Lang       0.08      0.24      0.12        49\n","         Both       0.44      0.45      0.44       307\n","\n","     accuracy                           0.48      1240\n","    macro avg       0.40      0.42      0.39      1240\n"," weighted avg       0.55      0.48      0.51      1240\n","\n","Macro F1 Score: 0.3937\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":46,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"elapsed":292,"status":"ok","timestamp":1744714922550,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"LXRmHcnKBtSs","outputId":"16fee19c-3092-4396-a808-dda538c4213b"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["\n","plt.figure(figsize=(12, 4))\n","plt.subplot(1, 2, 1)\n","plt.plot(history.history['accuracy'], label='Train Accuracy')\n","plt.plot(history.history['val_accuracy'], label='Val Accuracy')\n","plt.title('Accuracy Progress')\n","plt.legend()\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(history.history['loss'], label='Train Loss')\n","plt.plot(history.history['val_loss'], label='Val Loss')\n","plt.title('Loss Progress')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":47,"metadata":{"id":"07L2-FcEkgtv","executionInfo":{"status":"ok","timestamp":1744714922553,"user_tz":-330,"elapsed":2,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["def evaluate_on_test(model, dn_test, tokenizer, max_length=250, class_names=None):\n","    import numpy as np\n","    from sklearn.metrics import classification_report, f1_score, confusion_matrix\n","    import seaborn as sns\n","    import matplotlib.pyplot as plt\n","    from tensorflow.keras.utils import to_categorical\n","\n","    # Tokenize test data\n","    test_enc = tokenizer(\n","        list(dn_test['text']),\n","        truncation=True,\n","        padding='max_length',\n","        max_length=max_length,\n","        return_tensors='tf'\n","    )\n","\n","    # Convert labels to integers if needed\n","    test_labels = dn_test['label'].values\n","    y_true = test_labels\n","\n","    # Predict\n","    y_pred_probs = model.predict({'input_ids': test_enc['input_ids'], 'attention_mask': test_enc['attention_mask']})\n","    y_pred = y_pred_probs.argmax(axis=1)\n","\n","    # Metrics\n","    print(\"\\nTest Set Classification Report:\")\n","    print(classification_report(y_true, y_pred, target_names=class_names))\n","    print(f\"Macro F1 Score: {f1_score(y_true, y_pred, average='macro'):.4f}\")\n","\n","    # Confusion Matrix\n","    cm = confusion_matrix(y_true, y_pred)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=class_names, yticklabels=class_names)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix - Test Set')\n","    plt.show()\n"]},{"cell_type":"code","source":["class_names = ['Neutral', 'Gender Abuse', 'Explicit Lang', 'Both']\n","\n","evaluate_on_test(model, dn_test, tokenizer, class_names=class_names)\n"],"metadata":{"id":"wVbG9uI5WTMm","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1744714964093,"user_tz":-330,"elapsed":41538,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"272de5be-47fe-4f6d-909f-16b3c7b96aaf"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m48/48\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 535ms/step\n","\n","Test Set Classification Report:\n","               precision    recall  f1-score   support\n","\n","      Neutral       0.59      0.64      0.62       462\n"," Gender Abuse       0.35      0.42      0.38       371\n","Explicit Lang       0.05      0.21      0.08        38\n","         Both       0.68      0.44      0.53       650\n","\n","     accuracy                           0.49      1521\n","    macro avg       0.42      0.43      0.40      1521\n"," weighted avg       0.56      0.49      0.51      1521\n","\n","Macro F1 Score: 0.4017\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"nOVMyLuk-3NX","executionInfo":{"status":"ok","timestamp":1744714964101,"user_tz":-330,"elapsed":4,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"execution_count":48,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}