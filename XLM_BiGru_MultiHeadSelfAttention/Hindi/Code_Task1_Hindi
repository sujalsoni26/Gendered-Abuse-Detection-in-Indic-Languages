{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"u54cqKcTw2AW"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oDOomN8DxFkA"},"outputs":[],"source":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UoqvLIQdS_ph","executionInfo":{"status":"ok","timestamp":1744718031109,"user_tz":-330,"elapsed":22603,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}},"outputId":"40832c92-892b-4208-b43f-6edc54889578"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import os\n","import re\n","import string\n","import numpy as np\n","import pandas as pd\n","from numpy import array\n","from numpy import asarray\n","from numpy import zeros\n","\n","\n","from tensorflow.keras.preprocessing.text import Tokenizer, one_hot\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.metrics import (\n","    classification_report, f1_score, precision_score, recall_score,\n","    confusion_matrix, accuracy_score\n",")\n","\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import (\n","    Embedding, LSTM, GRU, SimpleRNN, Dense, Dropout, Activation, Concatenate\n",")\n","from tensorflow.keras.optimizers import Adam\n","# from tensorflow.keras.losses import MeanSquaredError\n","from tensorflow.keras.utils import to_categorical\n","\n","# Visualization\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n"],"metadata":{"id":"n1aljcySTJrr","executionInfo":{"status":"ok","timestamp":1744718055703,"user_tz":-330,"elapsed":4411,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":3776,"status":"ok","timestamp":1744718059478,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"},"user_tz":-330},"id":"FVn64VSdxGSm","outputId":"3bbf8229-cc5c-4434-dc9a-4138b138e09a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   text         key hi_a1  \\\n","0       рднрд╛рд░рдд рдореЗрдВ рддреАрди рдХрд┐рд╕рд╛рди рдХрд╛рдиреВрди рдмрд┐рд▓ рд╡рд╛рдкрд╕ рд▓реЗрдиреЗ рдкрд░ рднрдХ...  question_1   NaN   \n","1       рд░рд╛рдЬрд╕реНрдерд╛рди  рдЕрдЬреАрдмреЛрдЧрд░реАрдм: рдЧрд╛рдВрд╡ рдХреА рдЦреБрд╢рд╣рд╛рд▓реА рдХреЗ рд▓рд┐рдП ...  question_1   NaN   \n","2       рд╕рд▓рдорд╛рди рдиреЗ рдХреА рд░рд╛рдЦреА рдХреЗ рд╡рд┐рд░реЛрдзреА рдХреА рд╡рдХрд╛рд▓рдд рддреЛ 'рдЖрдЗрдЯрдо...  question_1   NaN   \n","3     !!рд╣рд░ рд╢рдмреНрдж рдЕрдореДрддрдо!!  рдкреБрд░рд╛рдиреА рдПрдХ рдХрд╣рд╛рд╡рдд рд╣реИ... рдЯреВрдЯреА ...  question_1   NaN   \n","4     \"PM рдореЛрджреА рдЬреА \" рдХреА рдорд╛рдБ рдХреЗ рд▓рд┐рдП рдЕрдкрд╢рдмреНрдж рдХрд╣рдиреЗ рд╡рд╛рд▓рд╛ рдж...  question_1   NaN   \n","...                                                 ...         ...   ...   \n","6192  ЁЯШО рдХрд╛рдо рд╡рд╛рд▓реА рдмрд╛рдИ рдХрд╛ рдлреЛрди рдЖрдпрд╛, рдкрддреНрдирд┐ рдХреЛред  рдХрд╛рдорд╡рд╛рд▓реА ...  question_1   NaN   \n","6193  ЁЯШОЁЯШОрдЧреНрд░реБрдк рдореЗрдВ рдЪрд░реНрдЪрд╛ рдЪрд▓ рд░рд╣реА рдереА рдХрд┐ 21 рджрд┐рди рдХреЗ рд▓реЙрдХ рдб...  question_1   NaN   \n","6194  ЁЯЪй  ЁЯФ▒тЦБтЦВтЦДтЦЕтЦЖтЦЗтЦИЁЯжБтЦИтЦЗтЦЖтЦЕтЦДтЦВтЦБЁЯФ▒   ЁЯФ▒тЪЬя╕ПЁЯСЙ  School рдореЗрдВ рд╣рдореЗрдВ рд╕...  question_1   NaN   \n","6195  ЁЯЪй #рд▓рдВрдХрд╛ рдХрд╛ рдЬрд┐рд╣рд╛рджреА рдбреЙрдХреНрдЯрд░,рд╣рдЬрд╛рд░реЛрдВ рд╣рд┐рдВрджреВ рдорд╣рд┐рд▓рд╛рдУрдВ ...  question_1   NaN   \n","6196  ЁЯЪо рдХрдЪрд░рд╛ рдХрдЪрд░рд╛ рдкреЗрдЯреАрдореЗрдВ рдбрд╛рд▓рд┐рдпреЗ ЁЯЪ░ рдЬрд▓ рдмрдЪрд╛рдЗрдпреЗ ред ЁЯЪС рдШрд╛рдп...  question_1   NaN   \n","\n","     hi_a2 hi_a3 hi_a4 hi_a5  \n","0      NaN   NaN   0.0   NaN  \n","1      0.0   NaN   NaN   NaN  \n","2      NaN   NaN   NaN   0.0  \n","3      NaN   NaN   0.0   NaN  \n","4      1.0   NaN   NaN   NaN  \n","...    ...   ...   ...   ...  \n","6192   NaN   NaN   0.0   NaN  \n","6193   0.0   NaN   NaN   NaN  \n","6194   NaN   NaN   0.0   NaN  \n","6195   NaN   NaN   NaN   0.0  \n","6196   NaN   NaN   0.0   NaN  \n","\n","[6197 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-9c5b0444-2df4-4db6-8626-df32518feb5f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>key</th>\n","      <th>hi_a1</th>\n","      <th>hi_a2</th>\n","      <th>hi_a3</th>\n","      <th>hi_a4</th>\n","      <th>hi_a5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>рднрд╛рд░рдд рдореЗрдВ рддреАрди рдХрд┐рд╕рд╛рди рдХрд╛рдиреВрди рдмрд┐рд▓ рд╡рд╛рдкрд╕ рд▓реЗрдиреЗ рдкрд░ рднрдХ...</td>\n","      <td>question_1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>рд░рд╛рдЬрд╕реНрдерд╛рди  рдЕрдЬреАрдмреЛрдЧрд░реАрдм: рдЧрд╛рдВрд╡ рдХреА рдЦреБрд╢рд╣рд╛рд▓реА рдХреЗ рд▓рд┐рдП ...</td>\n","      <td>question_1</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>рд╕рд▓рдорд╛рди рдиреЗ рдХреА рд░рд╛рдЦреА рдХреЗ рд╡рд┐рд░реЛрдзреА рдХреА рд╡рдХрд╛рд▓рдд рддреЛ 'рдЖрдЗрдЯрдо...</td>\n","      <td>question_1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>!!рд╣рд░ рд╢рдмреНрдж рдЕрдореДрддрдо!!  рдкреБрд░рд╛рдиреА рдПрдХ рдХрд╣рд╛рд╡рдд рд╣реИ... рдЯреВрдЯреА ...</td>\n","      <td>question_1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>\"PM рдореЛрджреА рдЬреА \" рдХреА рдорд╛рдБ рдХреЗ рд▓рд┐рдП рдЕрдкрд╢рдмреНрдж рдХрд╣рдиреЗ рд╡рд╛рд▓рд╛ рдж...</td>\n","      <td>question_1</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6192</th>\n","      <td>ЁЯШО рдХрд╛рдо рд╡рд╛рд▓реА рдмрд╛рдИ рдХрд╛ рдлреЛрди рдЖрдпрд╛, рдкрддреНрдирд┐ рдХреЛред  рдХрд╛рдорд╡рд╛рд▓реА ...</td>\n","      <td>question_1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6193</th>\n","      <td>ЁЯШОЁЯШОрдЧреНрд░реБрдк рдореЗрдВ рдЪрд░реНрдЪрд╛ рдЪрд▓ рд░рд╣реА рдереА рдХрд┐ 21 рджрд┐рди рдХреЗ рд▓реЙрдХ рдб...</td>\n","      <td>question_1</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6194</th>\n","      <td>ЁЯЪй  ЁЯФ▒тЦБтЦВтЦДтЦЕтЦЖтЦЗтЦИЁЯжБтЦИтЦЗтЦЖтЦЕтЦДтЦВтЦБЁЯФ▒   ЁЯФ▒тЪЬя╕ПЁЯСЙ  School рдореЗрдВ рд╣рдореЗрдВ рд╕...</td>\n","      <td>question_1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6195</th>\n","      <td>ЁЯЪй #рд▓рдВрдХрд╛ рдХрд╛ рдЬрд┐рд╣рд╛рджреА рдбреЙрдХреНрдЯрд░,рд╣рдЬрд╛рд░реЛрдВ рд╣рд┐рдВрджреВ рдорд╣рд┐рд▓рд╛рдУрдВ ...</td>\n","      <td>question_1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>6196</th>\n","      <td>ЁЯЪо рдХрдЪрд░рд╛ рдХрдЪрд░рд╛ рдкреЗрдЯреАрдореЗрдВ рдбрд╛рд▓рд┐рдпреЗ ЁЯЪ░ рдЬрд▓ рдмрдЪрд╛рдЗрдпреЗ ред ЁЯЪС рдШрд╛рдп...</td>\n","      <td>question_1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6197 rows ├Ч 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9c5b0444-2df4-4db6-8626-df32518feb5f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9c5b0444-2df4-4db6-8626-df32518feb5f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9c5b0444-2df4-4db6-8626-df32518feb5f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9610bb6c-4f79-4f94-b9db-b1fcb544df83\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9610bb6c-4f79-4f94-b9db-b1fcb544df83')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9610bb6c-4f79-4f94-b9db-b1fcb544df83 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_76f36c75-5446-44dc-bf9b-c039ce9e5c15\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('d1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_76f36c75-5446-44dc-bf9b-c039ce9e5c15 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('d1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"d1","summary":"{\n  \"name\": \"d1\",\n  \"rows\": 6197,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6197,\n        \"samples\": [\n          \"<handle replaced>\\u0939\\u093f\\u092e\\u093e\\u091a\\u0932 \\u0915\\u0940 \\u0938\\u0921\\u093c\\u0915\\u094b\\u0902 \\u092a\\u0930 \\u0905\\u0917\\u0930 \\u0924\\u0948\\u092e\\u0942\\u0930 \\u0928\\u0947 \\u092a\\u0949\\u091f\\u0940 \\u0915\\u0930 \\u0926\\u0940 \\u0924\\u094b \\u0906\\u091c \\u0924\\u0915 \\u0935\\u093e\\u0932\\u0947 \\u0939\\u093e\\u0925 \\u0938\\u0947 \\u0938\\u093e\\u092b \\u0915\\u0930\\u0947\\u0902\\u0917\\u0947 \\u092f\\u093e \\u091a\\u093e\\u091f \\u0915\\u0930 \\ud83e\\udd14 \\u0939\\u0926\\u094d\\u0926 \\u0939\\u0948 bc \\ud83d\\ude20\",\n          \"<handle replaced>\\u0935\\u0939\\u0940 \\u092d\\u091f\\u0915\\u0947\\u0917\\u093e \\u091c\\u0939\\u093e \\u0915\\u093e\\u0928\\u0942\\u0928 \\u092c\\u0928\\u0928\\u0947 \\u0915\\u0947 \\u092c\\u093e\\u0926 \\u092d\\u091f\\u0915\\u0947\\u0917\\u093e\",\n          \"<handle replaced><handle replaced>Chiyann \\u2764\\ufe0f\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"key\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"question_1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hi_a1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"1.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hi_a2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"0.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hi_a3\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"0.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hi_a4\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"0.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hi_a5\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"0.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}],"source":["d1= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_hi_l1.csv')\n","d2= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_hi_l2.csv')\n","d3= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_hi_l3.csv')\n","d1"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1744718059496,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"},"user_tz":-330},"id":"XFd2COnRxIzl"},"outputs":[],"source":["# Word Pre-Processing\n","\n","def normalize_text(text):\n","  emoji_pattern = re.compile(\"[\"\n","                              u\"\\U0001F600-\\U0001F64F\"  # emoticons\n","                              u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n","                              u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n","                              u\"\\U0001F700-\\U0001F77F\"  # alchemical symbols\n","                              u\"\\U0001F780-\\U0001F7FF\"  # Geometric Shapes Extended\n","                              u\"\\U0001F800-\\U0001F8FF\"  # Supplemental Arrows-C\n","                              u\"\\U0001F900-\\U0001F9FF\"  # Supplemental Symbols and Pictographs\n","                              u\"\\U0001FA00-\\U0001FA6F\"  # Chess Symbols\n","                              u\"\\U0001FA70-\\U0001FAFF\"  # Symbols and Pictographs Extended-A\n","                              u\"\\U00002702-\\U000027B0\"  # Dingbats\n","                              u\"\\U000024C2-\\U0001F251\"\n","                              \"]+\", flags=re.UNICODE)\n","  text = text.lower()\n","  text = re.sub('\\[.*?\\]', ' ', text)\n","  text = re.sub('https?://\\S+|www\\.\\S+', ' ', text)\n","  text = re.sub('<.*?>+', ' ', text)\n","  text = re.sub('[%s]' % re.escape(string.punctuation), ' ', text)\n","  text = re.sub('\\n', ' ', text)\n","  text = re.sub('\\w*\\d\\w*', ' ', text)\n","  text = re.sub('<handle replaced>', '', text)\n","  text = emoji_pattern.sub(r'', text)\n","  return text\n","\n"]},{"cell_type":"code","source":["\n","d1['text'] = d1['text'].apply(lambda x: normalize_text(x))\n","d2['text'] = d2['text'].apply(lambda x: normalize_text(x))\n","d3['text'] = d3['text'].apply(lambda x: normalize_text(x))"],"metadata":{"id":"bOekp_Xs0eMU","executionInfo":{"status":"ok","timestamp":1744718059906,"user_tz":-330,"elapsed":403,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":104,"status":"ok","timestamp":1744718060020,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"},"user_tz":-330},"id":"jW1gY2ObxMcc","outputId":"5b85fc29-de3d-4c5f-c98a-1c113f0cb240"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      label                                               text\n","0         0    рднрд╛рд░рдд рдореЗрдВ рддреАрди рдХрд┐рд╕рд╛рди рдХрд╛рдиреВрди рдмрд┐рд▓ рд╡рд╛рдкрд╕ рд▓реЗрдиреЗ рдкрд░ рднрдХ...\n","1         1    рд░рд╛рдЬрд╕реНрдерд╛рди  рдЕрдЬреАрдмреЛрдЧрд░реАрдм  рдЧрд╛рдВрд╡ рдХреА рдЦреБрд╢рд╣рд╛рд▓реА рдХреЗ рд▓рд┐рдП ...\n","2         0    рд╕рд▓рдорд╛рди рдиреЗ рдХреА рд░рд╛рдЦреА рдХреЗ рд╡рд┐рд░реЛрдзреА рдХреА рд╡рдХрд╛рд▓рдд рддреЛ  рдЖрдЗрдЯрдо...\n","3         0    рд╣рд░ рд╢рдмреНрдж рдЕрдореДрддрдо    рдкреБрд░рд╛рдиреА рдПрдХ рдХрд╣рд╛рд╡рдд рд╣реИ    рдЯреВрдЯреА ...\n","4         0   pm рдореЛрджреА рдЬреА   рдХреА рдорд╛рдБ рдХреЗ рд▓рд┐рдП рдЕрдкрд╢рдмреНрдж рдХрд╣рдиреЗ рд╡рд╛рд▓рд╛ рдж...\n","...     ...                                                ...\n","6186      0   рдХрд╛рдо рд╡рд╛рд▓реА рдмрд╛рдИ рдХрд╛ рдлреЛрди рдЖрдпрд╛  рдкрддреНрдирд┐ рдХреЛред  рдХрд╛рдорд╡рд╛рд▓реА  ...\n","6187      1  рдЧреНрд░реБрдк рдореЗрдВ рдЪрд░реНрдЪрд╛ рдЪрд▓ рд░рд╣реА рдереА рдХрд┐   рджрд┐рди рдХреЗ рд▓реЙрдХ рдбрд╛рдЙрди...\n","6188      0         school рдореЗрдВ рд╣рдореЗрдВ рд╕рддреА рдкреНрд░рдерд╛  рдШреВрдВрдШрдЯ рдкреНрд░рдерд╛ ...\n","6189      1    рд▓рдВрдХрд╛ рдХрд╛ рдЬрд┐рд╣рд╛рджреА рдбреЙрдХреНрдЯрд░ рд╣рдЬрд╛рд░реЛрдВ рд╣рд┐рдВрджреВ рдорд╣рд┐рд▓рд╛рдУрдВ рдХ...\n","6190      0   рдХрдЪрд░рд╛ рдХрдЪрд░рд╛ рдкреЗрдЯреАрдореЗрдВ рдбрд╛рд▓рд┐рдпреЗ  рдЬрд▓ рдмрдЪрд╛рдЗрдпреЗ ред  рдШрд╛рдпрд▓ рдХ...\n","\n","[6191 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-091b707f-c78d-4ef8-9bbd-7839d90c5e0a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>рднрд╛рд░рдд рдореЗрдВ рддреАрди рдХрд┐рд╕рд╛рди рдХрд╛рдиреВрди рдмрд┐рд▓ рд╡рд╛рдкрд╕ рд▓реЗрдиреЗ рдкрд░ рднрдХ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>рд░рд╛рдЬрд╕реНрдерд╛рди  рдЕрдЬреАрдмреЛрдЧрд░реАрдм  рдЧрд╛рдВрд╡ рдХреА рдЦреБрд╢рд╣рд╛рд▓реА рдХреЗ рд▓рд┐рдП ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>рд╕рд▓рдорд╛рди рдиреЗ рдХреА рд░рд╛рдЦреА рдХреЗ рд╡рд┐рд░реЛрдзреА рдХреА рд╡рдХрд╛рд▓рдд рддреЛ  рдЖрдЗрдЯрдо...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>рд╣рд░ рд╢рдмреНрдж рдЕрдореДрддрдо    рдкреБрд░рд╛рдиреА рдПрдХ рдХрд╣рд╛рд╡рдд рд╣реИ    рдЯреВрдЯреА ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>pm рдореЛрджреА рдЬреА   рдХреА рдорд╛рдБ рдХреЗ рд▓рд┐рдП рдЕрдкрд╢рдмреНрдж рдХрд╣рдиреЗ рд╡рд╛рд▓рд╛ рдж...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6186</th>\n","      <td>0</td>\n","      <td>рдХрд╛рдо рд╡рд╛рд▓реА рдмрд╛рдИ рдХрд╛ рдлреЛрди рдЖрдпрд╛  рдкрддреНрдирд┐ рдХреЛред  рдХрд╛рдорд╡рд╛рд▓реА  ...</td>\n","    </tr>\n","    <tr>\n","      <th>6187</th>\n","      <td>1</td>\n","      <td>рдЧреНрд░реБрдк рдореЗрдВ рдЪрд░реНрдЪрд╛ рдЪрд▓ рд░рд╣реА рдереА рдХрд┐   рджрд┐рди рдХреЗ рд▓реЙрдХ рдбрд╛рдЙрди...</td>\n","    </tr>\n","    <tr>\n","      <th>6188</th>\n","      <td>0</td>\n","      <td>school рдореЗрдВ рд╣рдореЗрдВ рд╕рддреА рдкреНрд░рдерд╛  рдШреВрдВрдШрдЯ рдкреНрд░рдерд╛ ...</td>\n","    </tr>\n","    <tr>\n","      <th>6189</th>\n","      <td>1</td>\n","      <td>рд▓рдВрдХрд╛ рдХрд╛ рдЬрд┐рд╣рд╛рджреА рдбреЙрдХреНрдЯрд░ рд╣рдЬрд╛рд░реЛрдВ рд╣рд┐рдВрджреВ рдорд╣рд┐рд▓рд╛рдУрдВ рдХ...</td>\n","    </tr>\n","    <tr>\n","      <th>6190</th>\n","      <td>0</td>\n","      <td>рдХрдЪрд░рд╛ рдХрдЪрд░рд╛ рдкреЗрдЯреАрдореЗрдВ рдбрд╛рд▓рд┐рдпреЗ  рдЬрд▓ рдмрдЪрд╛рдЗрдпреЗ ред  рдШрд╛рдпрд▓ рдХ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6191 rows ├Ч 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-091b707f-c78d-4ef8-9bbd-7839d90c5e0a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-091b707f-c78d-4ef8-9bbd-7839d90c5e0a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-091b707f-c78d-4ef8-9bbd-7839d90c5e0a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f6f4e970-ac61-4ff6-b2bf-4151bb3ef570\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f6f4e970-ac61-4ff6-b2bf-4151bb3ef570')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f6f4e970-ac61-4ff6-b2bf-4151bb3ef570 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_913dcea0-1f73-418e-a2bf-d29c31643243\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('d2')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_913dcea0-1f73-418e-a2bf-d29c31643243 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('d2');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"d2","summary":"{\n  \"name\": \"d2\",\n  \"rows\": 6191,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6183,\n        \"samples\": [\n          \"  to yahi ap kar leti apne season may \",\n          \" bull ki nathni thodi nikal gayi hai plz vaha jayen dobara to sahi kardena plz  bholenath ashirwad denge unki party k hai isliye    \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}],"source":["X1 = list(d1['text'])\n","X2 = list(d2['text'])\n","X3 = list(d3['text'])\n","\n","col_lst = ['hi_a1', 'hi_a2', 'hi_a3', 'hi_a4', 'hi_a5']\n","for col in col_lst:\n","    d1[col] = pd.to_numeric(d1[col], errors='coerce')\n","    d2[col] = pd.to_numeric(d2[col], errors='coerce')\n","    d3[col] = pd.to_numeric(d3[col], errors='coerce')\n","\n","d1['label'] = d1[col_lst].max(axis=1, skipna=True).astype(int)  # skipna=True to ignore empty values\n","d2['label'] = d2[col_lst].max(axis=1, skipna=True).astype(int)  # skipna=True to ignore empty values\n","d3['label'] = d3[col_lst].max(axis=1, skipna=True).astype(int)  # skipna=True to ignore empty values\n","\n","d1 = d1.drop(col_lst, axis=1)\n","d2 = d2.drop(col_lst, axis=1)\n","d3 = d3.drop(col_lst, axis=1)\n","\n","d1['label'] = d1['label'].astype(int)\n","d2['label'] = d2['label'].astype(int)\n","d3['label'] = d3['label'].astype(int)\n","\n","d1 = d1[['label', 'text']]\n","d2 = d2[['label', 'text']]\n","d3 = d3[['label', 'text']]\n","d2"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1744718060034,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"},"user_tz":-330},"id":"dFfayLwyRrg1","outputId":"c4314bed-47c4-46ec-c71b-d3c4f75039b8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["6197"]},"metadata":{},"execution_count":7}],"source":["d1['label'].size"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1744718060055,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"},"user_tz":-330},"id":"StQ2jVX3RzCd","outputId":"9a4e5dc9-6158-42da-d574-91db16761f4e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["label\n","0    4417\n","1    1780\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4417</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1780</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":8}],"source":["d1['label'].value_counts()"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":993},"executionInfo":{"elapsed":225,"status":"ok","timestamp":1744718060279,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"},"user_tz":-330},"id":"sHa4HUbfTRxZ","outputId":"1fa9cf94-8984-4408-96c0-fac97e33f053"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Average Text Length: 103.11279651444248\n","Length 0-10: 105\n","Length 10-20: 437\n","Length 20-30: 506\n","Length 30-40: 516\n","Length 40-50: 463\n","Length 50-60: 383\n","Length 60-70: 373\n","Length 70-80: 341\n","Length 80-90: 293\n","Length 90-100: 252\n","Length 100-110: 236\n","Length 110-120: 228\n","Length 120-130: 221\n","Length 130-140: 163\n","Length 140-150: 161\n","Length 150-160: 132\n","Length 160-170: 121\n","Length 170-180: 99\n","Length 180-190: 97\n","Length 190-200: 81\n","Length 200-210: 78\n","Length 210-220: 88\n","Length 220-230: 91\n","Length 230-240: 82\n","Length 240-250: 91\n","Length 250-260: 98\n","Length 260-270: 146\n","Length 270-280: 213\n","Length 280-290: 102\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","\n","text_lengths = d1['text'].str.len()\n","\n","# Create a histogram with bins of size 10\n","plt.hist(text_lengths, bins=range(0, text_lengths.max() + 10, 10))\n","\n","plt.xlabel('Text Length')\n","plt.ylabel('Frequency')\n","plt.title('Distribution of Text Lengths')\n","plt.show()\n","\n","\n","average_length = text_lengths.mean()\n","print(f\"Average Text Length: {average_length}\")\n","\n","\n","bins = range(0, text_lengths.max() + 10, 10)\n","counts, _ = np.histogram(text_lengths, bins=bins)\n","\n","\n","for i in range(len(bins) - 1):\n","    print(f\"Length {bins[i]}-{bins[i+1]}: {counts[i]}\")"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1744718060293,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"},"user_tz":-330},"id":"1eZfLhQMxYfg","outputId":"c75272a9-55e4-4a2b-ff3a-c713fde19574"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0 0 0 ... 0 0 0]\n","6197\n","[0 1 0 ... 0 1 0]\n","6191\n","[0 0 0 ... 1 0 0]\n","6197\n"]}],"source":["y_data1 = d1[\"label\"]\n","y_data2 = d2[\"label\"]\n","y_data3 = d3[\"label\"]\n","# print(y_data)\n","y1 = y_data1.values\n","y2 = y_data2.values\n","y3 = y_data3.values\n","print(y1)\n","print(len(y1))\n","print(y2)\n","print(len(y2))\n","print(y3)\n","print(len(y3))"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"RoLBYSLInU2V","executionInfo":{"status":"ok","timestamp":1744718060335,"user_tz":-330,"elapsed":41,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}}},"outputs":[],"source":["# kjevwk"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"4d3GpWzp7sea","executionInfo":{"status":"ok","timestamp":1744718060336,"user_tz":-330,"elapsed":2,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}}},"outputs":[],"source":["def evaluate_model(test_texts, test_labels,model,Threshold=0.5):\n","    # Threshold=0.5\n","    # Preprocess\n","    encoded_test = preprocess(test_texts)\n","\n","    # Predict\n","    y_pred_probs = model.predict({\n","        'input_ids': encoded_test['input_ids'],\n","        'attention_mask': encoded_test['attention_mask']\n","    })\n","\n","    # Threshold predictions\n","    y_pred = (y_pred_probs > Threshold).astype(int)\n","\n","    # Calculate metrics\n","    f1 = f1_score(test_labels, y_pred, average='weighted')\n","    precision = precision_score(test_labels, y_pred, average='weighted')\n","    recall = recall_score(test_labels, y_pred, average='weighted')\n","\n","    print(f\"\\nF1 Score: {f1:.4f}\")\n","    print(f\"Precision: {precision:.4f}\")\n","    print(f\"Recall: {recall:.4f}\")\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(test_labels, y_pred, target_names=['Neutral', 'Gendered Abuse']))"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"J_ti2K5hDtKt","executionInfo":{"status":"ok","timestamp":1744718060336,"user_tz":-330,"elapsed":2,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}}},"outputs":[],"source":["# # encoded_test = preprocess(train_texts)\n","\n","# #     # Predict\n","# # y_pred_probs = model.predict({\n","# #     'input_ids': encoded_test['input_ids'],\n","# #     'attention_mask': encoded_test['attention_mask']\n","# # })\n","\n","# # Threshold predictions\n","# # print(train_labels)\n","# unique_values, counts = np.unique(train_labels, return_counts=True)\n","# print(unique_values, counts)\n","\n","# # print(np.sum(train_labels))\n","# # y_pred = (y_pred_probs > 0.5).astype(int)\n","# # print(np.sum(y_pred))\n","# # print(y_pred.size)\n","\n","# for i in range(0,10):\n","#   print(i/10)\n","#   y_pred1 = (y_pred_probs > i/10).astype(int)\n","#   # print(np.sum(y_pred1))\n","#   unique_values, counts = np.unique(y_pred1, return_counts=True)\n","#   print(unique_values, counts)\n","\n","# y_pred1 = (y_pred_probs > 0.45).astype(int)\n","# # print(np.sum(y_pred1))\n","# unique_values, counts = np.unique(y_pred1, return_counts=True)\n","# print(unique_values, counts)\n","\n","#   # print(y_pred1.value_counts())"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["6d9dc5f7c6db46a4ab2d2d24d5bbe0fd","e5c95d9cc04c488393954b9b196f5499","00a41b37113d48ad97208b25b66cffe2","e7dc4c1b98c74383917fda322d3ab177","6e791e63e7234a779538a8b11cabc731","3e8c3fde1d964437af2e1b92901f7b6b","8fd94ce96aaf4910befba1e24f252a1a","b2cb0ed8878c4f758fd97f6b657e0b99","0e9b67c0d1cd453da59e3032b002c128","699f4fc01caa4835bcdc926467538cf2","df304cdcfe344ed0b9182972d3b34ad9","47598256a9ce4428a10b12e8646a561f","0509d1e152564450bb1b3751ebd1bc9f","a72c9be6effc412498cc02f3faf74253","7cca62d10fe244aea10e44c616e4a315","9b8325722ef942bf8a4f1ca7402f3a17","12e95f25b2d74663a62a40595b20c5bd","ba04d9e8621941ba96a27f00834fa060","ae21a2605d5f4558965052136b7a9ef7","a01dd04ef5c342e190e2ca206904cac8","a5e29efc09f94ed38c0c78ecc8fc88c5","f5a984ad16ad4718977d859807f0337c","ecec580caac1432f880a9e2ca4f53505","dc4c8b1dfa9046cb841c392a770cf755","3d8c0ff25b2049c3a6d4a7cb7f4258e0","5866b16ddd8647668f14b8d388502ff9","e35480d632394b5b92a3559021f3bc30","f18ea7e5dd564101979d75ba3474639b","b7b3702f129b493d88f4d77cfec115ab","ac34474bee48491fb4a0e88694e1b0ab","42fb1d2e0f2c43e8825781475828e5dc","c93439a6e3cc4e32a2ff7f3060c1e795","2977b78242a047dfa553683a6efc4507"]},"id":"dI40_jZkrzAZ","outputId":"4d6dc517-fc71-4c54-d67a-b4065136de61","executionInfo":{"status":"ok","timestamp":1744719152040,"user_tz":-330,"elapsed":1091705,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["sentencepiece.bpe.model:   0%|          | 0.00/5.07M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6d9dc5f7c6db46a4ab2d2d24d5bbe0fd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/512 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"47598256a9ce4428a10b12e8646a561f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tf_model.h5:   0%|          | 0.00/1.89G [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ecec580caac1432f880a9e2ca4f53505"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Some layers from the model checkpoint at jplu/tf-xlm-roberta-base were not used when initializing TFXLMRobertaModel: ['lm_head']\n","- This IS expected if you are initializing TFXLMRobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFXLMRobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","All the layers of TFXLMRobertaModel were initialized from the model checkpoint at jplu/tf-xlm-roberta-base.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFXLMRobertaModel for predictions without further training.\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","\u001b[1m310/310\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m151s\u001b[0m 431ms/step - accuracy: 0.3589 - loss: 1.0385 - val_accuracy: 0.2879 - val_loss: 0.7671\n","Epoch 2/5\n","\u001b[1m310/310\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m157s\u001b[0m 489ms/step - accuracy: 0.3566 - loss: 1.0399 - val_accuracy: 0.2927 - val_loss: 0.7757\n","Epoch 3/5\n","\u001b[1m310/310\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m202s\u001b[0m 489ms/step - accuracy: 0.4596 - loss: 1.0266 - val_accuracy: 0.4952 - val_loss: 0.6946\n","Epoch 4/5\n","\u001b[1m310/310\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m202s\u001b[0m 490ms/step - accuracy: 0.5089 - loss: 0.9997 - val_accuracy: 0.5323 - val_loss: 0.6719\n","Epoch 5/5\n","\u001b[1m310/310\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m202s\u001b[0m 489ms/step - accuracy: 0.5447 - loss: 0.9837 - val_accuracy: 0.5137 - val_loss: 0.7227\n","\n","Validation Set Evaluation:\n","\u001b[1m39/39\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 510ms/step\n","\n","Classification Report:\n","                precision    recall  f1-score   support\n","\n","       Neutral       0.83      0.40      0.54       884\n","Gendered Abuse       0.35      0.80      0.49       356\n","\n","      accuracy                           0.51      1240\n","     macro avg       0.59      0.60      0.51      1240\n","  weighted avg       0.69      0.51      0.52      1240\n","\n","F1 Score: 0.5233\n","\n","Training Set Evaluation:\n","\u001b[1m155/155\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m69s\u001b[0m 443ms/step\n","\n","Classification Report:\n","                precision    recall  f1-score   support\n","\n","       Neutral       0.87      0.41      0.55      3533\n","Gendered Abuse       0.36      0.85      0.51      1424\n","\n","      accuracy                           0.53      4957\n","     macro avg       0.62      0.63      0.53      4957\n","  weighted avg       0.72      0.53      0.54      4957\n","\n","F1 Score: 0.5407\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 2 Axes>"],"image/png":"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wdnZmfvuu8/Wz8HBgUceeeS8MZ07Xvzyyy/x9fWlS5cuBcY9LVq0wMvLyzbuKc6Yxs/Pj4yMjAK3QIpI6VNSSuQaYzabmTdvHjfddBP79+9nz5497NmzhzZt2pCYmMiyZctsfffu3UujRo0ueLy9e/dSt25dnJxK725gJyenAvWQTouNjWXo0KFUqlQJLy8vAgMDufHGGwFISUkBYN++fQAXjbtevXq0atWqQC2tuXPnct111xV7FcKxY8eydOlSfvvtNzZv3szhw4e55557CvWrXr16gdcHDx7EwcGh0HlCQkLw8/Pj4MGDtn5AoX6VKlXC39+/yJjOPdfpwenNN99MYGBggccvv/zC0aNHAesg8n//+x8//fQTwcHBdOjQgddee42EhATbsW688Ub69u3L+PHjCQgIoFevXsycObNQHSwRERG5fElJSWRmZlK3bt1C2+rXr4/FYiEuLg6ACRMmkJycTJ06dWjcuDH/+c9/2Lx5s61/cX7PX8zXX3/N0qVLWb58OXv27GHr1q20aNGiQJ8qVarg4uJSoO3gwYPUrl0bB4eCl57169e3bT/9MzQ0tECSCwqPg04rary4e/duUlJSCAoKKjTuSU9Pt417ijOmefjhh6lTpw7du3cnPDyc4cOHs2TJkuJ+XCJSTKopJXKN+e233zhy5Ajz5s1j3rx5hbbPnTuXrl27luo5zzdj6uxZWWdzdXUtNHAxm8106dKFEydO8N///pd69erh6elJfHw8Q4cOxWKxlDiuwYMH8/jjj3Po0CFycnL4559/eO+994q9f+PGjencufNF+509w+tsZbF88rnnOv25zJkzh5CQkEL9z04mPvHEE/Ts2ZNFixbx888/88ILLzBp0iR+++03mjVrhslk4quvvuKff/7h+++/5+eff2b48OG8+eab/PPPP3h5eZX6+xEREZGL69ChA3v37uXbb7/ll19+4ZNPPuHtt99m2rRp3HvvvcDFf88X5xwBAQEX7HO+MU9ZKGq8aLFYCAoKOu8CPoGBgQDFGtMEBQURExPDzz//zE8//cRPP/3EzJkzGTx48AVXWhaRklFSSuQaM3fuXIKCgnj//fcLbVu4cCHffPMN06ZNw93dnZo1a7J169YLHq9mzZqsXr2avLw8nJ2di+xzelZPcnJygfbT34wVx5YtW/j333+ZPXs2gwcPtrWfO6X69PT2i8UNMHDgQEaNGsUXX3xBVlYWzs7ODBgwoNgxXapq1aphsVjYvXu37VtCgMTERJKTk6lWrZqtH8CePXsKzIA6fvx4safeny40HxQUVKwEWs2aNXnqqad46qmn2L17N1FRUbz55pt89tlntj7XXXcd1113HS+//DKff/45d911F/PmzbMNekVEROTyBQYG4uHhwa5duwpt27lzJw4ODkRERNjaKlWqxLBhwxg2bBjp6el06NCBcePGFfj9XJzf86WtWrVqbN68GYvFUiCJtHPnTtv20z9///13MjMzC8yW2rNnT7HPVbNmTX799VduuOGGYiXILjamcXFxoWfPnvTs2ROLxcLDDz/Mhx9+yAsvvFDsmfUicmG6fU/kGpKVlcXChQu59dZb6devX6HHyJEjSUtL47vvvgOsq7Rs2rSpwGpwpxmnVpHr27cvx44dK3KG0ek+1apVw9HRkT///LPA9g8++KDYsZ+uk3T6mKefn7ssb2BgIB06dGDGjBnExsYWGc9pAQEBdO/enc8++4y5c+fSrVu3i34DWBp69OgBwOTJkwu0v/XWWwDccsstAHTq1AknJyemTp1aoF9JZnNFR0fj4+PDK6+8UmTNhKSkJAAyMzMLrehXs2ZNvL29bVPZT548WegzjIqKAtAtfCIiIqXM0dGRrl278u2333LgwAFbe2JiIp9//jnt2rXDx8cHsH5hdTYvLy9q1apl+/1cnN/zZaVHjx4kJCQwf/58W1t+fj5TpkzBy8vLVoohOjqavLw8Pv74Y1s/i8VS5Bep59O/f3/MZjMTJ04stC0/P9/2BWlxxjTnfqYODg40adKkQB8RuXyaKSVyDfnuu+9IS0vjtttuK3L7ddddR2BgIHPnzmXAgAH85z//4auvvuKOO+5g+PDhtGjRghMnTvDdd98xbdo0mjZtyuDBg/n0008ZNWoUa9asoX379mRkZPDrr7/y8MMP06tXL3x9fbnjjjuYMmUKJpOJmjVr8sMPP9ju6y+OevXqUbNmTZ5++mni4+Px8fHh66+/LnLG0Lvvvku7du1o3rw5999/P9WrV+fAgQMsXryYmJiYAn0HDx5Mv379AIocwJSFpk2bMmTIED766COSk5O58cYbWbNmDbNnz6Z37962AvTBwcE8/vjjvPnmm9x2221069aNTZs28dNPPxEQEFCs2/98fHyYOnUq99xzD82bN2fgwIEEBgYSGxvL4sWLueGGG3jvvff4999/6dSpE/3796dBgwY4OTnxzTffkJiYyMCBAwGYPXs2H3zwAX369KFmzZqkpaXx8ccf4+PjY0u0iYiISMnMmDGjyFpFjz/+OC+99BJLly6lXbt2PPzwwzg5OfHhhx+Sk5PDa6+9ZuvboEEDOnbsSIsWLahUqRLr1q3jq6++YuTIkQDF+j1fVu6//34+/PBDhg4dyvr164mMjOSrr75ixYoVTJ48GW9vbwB69+5N69ateeqpp9izZw/16tXju+++48SJE0Dxyh7ceOONPPDAA0yaNImYmBi6du2Ks7Mzu3fv5ssvv+Sdd96hX79+xRrT3HvvvZw4cYKbb76Z8PBwDh48yJQpU4iKiiow011ELpP9Fv4TkfLWs2dPw83NzbZ0b1GGDh1qODs7G8eOHTMMwzCOHz9ujBw50qhSpYrh4uJihIeHG0OGDLFtNwzDyMzMNJ5//nmjevXqhrOzsxESEmL069evwPLFSUlJRt++fQ0PDw/D39/feOCBB4ytW7cWucSvp6dnkbFt377d6Ny5s+Hl5WUEBAQY9913n7Fp06ZCxzAMw9i6davRp08fw8/Pz3BzczPq1q1rvPDCC4WOmZOTY/j7+xu+vr5GVlZWcT5G4/fffzcA48svv7xgv9NLKCclJRXalpeXZ4wfP972mUVERBijR482srOzC/TLz883XnjhBSMkJMRwd3c3br75ZmPHjh1G5cqVjQcffNDW72LLSv/+++9GdHS04evra7i5uRk1a9Y0hg4daqxbt84wDMM4duyY8cgjjxj16tUzPD09DV9fX6NNmzbGggULbMfYsGGDMWjQIKNq1aqGq6urERQUZNx66622Y4iIiEjxnf7dfb5HXFycYRjW37/R0dGGl5eX4eHhYdx0003GypUrCxzrpZdeMlq3bm34+fkZ7u7uRr169YyXX37ZyM3NNQyjeL/nz+dC45mz3XjjjUbDhg2L3JaYmGgMGzbMCAgIMFxcXIzGjRsXGrsZhnW8eOeddxre3t6Gr6+vMXToUGPFihUGYMybN8/W70LjRcMwjI8++sho0aKF4e7ubnh7exuNGzc2nnnmGePw4cOGYRRvTPPVV18ZXbt2NYKCggwXFxejatWqxgMPPGAcOXLkgp+DiJSMyTDOmbcoInINyc/PJywsjJ49ezJ9+nR7h1MsycnJ+Pv789JLL/H888/bOxwRERGRMrNo0SL69OnD33//zQ033GDvcESklKmmlIhc0xYtWkRSUlKB4ukVSVZWVqG207WoOnbsWL7BiIiIiJShc8c9ZrOZKVOm4OPjQ/Pmze0UlYiUJdWUEpFr0urVq9m8eTMTJ06kWbNmtiKbFc38+fOZNWsWPXr0wMvLi7///psvvviCrl276ttCERERuao8+uijZGVl0bZtW3Jycli4cCErV67klVdeKdZqeiJy5VFSSkSuSVOnTuWzzz4jKiqKWbNm2Tuc82rSpAlOTk689tprpKam2oqfv/TSS/YOTURERKRU3Xzzzbz55pv88MMPZGdnU6tWLaZMmWIr2C4iVx/VlBIRERERERERkXKnmlIiIiIiIiIiIlLulJQSEREREREREZFyp5pSRbBYLBw+fBhvb29MJpO9wxERERE7MQyDtLQ0wsLCcHDQd3kXovGTiIiInFbcMZSSUkU4fPgwERER9g5DREREKoi4uDjCw8PtHUaFpvGTiIiInOtiYyglpYrg7e0NWD88Hx8fO0cjIiIi9pKamkpERIRtbCDnp/GTiIiInFbcMZSSUkU4PeXcx8dHgyoRERHR7WjFoPGTiIiInOtiYygVRxARERERERERkXKnpJSIiIiIiIiIiJQ7JaVERERErjB//vknPXv2JCwsDJPJxKJFiy66z/Lly2nevDmurq7UqlWLWbNmFdg+btw4TCZTgUe9evXK5g2IiIiIoJpSl8VsNpOXl2fvMOQq4OzsjKOjo73DEBGRK0RGRgZNmzZl+PDh3H777Rftv3//fm655RYefPBB5s6dy7Jly7j33nsJDQ0lOjra1q9hw4b8+uuvttdOThoqiohI6dJ19NWhtK5hNdK4BIZhkJCQQHJysr1DkauIn58fISEhKqYrIiIX1b17d7p3717s/tOmTaN69eq8+eabANSvX5+///6bt99+u0BSysnJiZCQkFKPV0RERNfRV5/SuIZVUuoSnP6HFBQUhIeHh5IIclkMwyAzM5OjR48CEBoaaueIRETkarNq1So6d+5coC06OponnniiQNvu3bsJCwvDzc2Ntm3bMmnSJKpWrVrkMXNycsjJybG9Tk1NLfW4RUTk6qHr6KtHaV7DKilVQmaz2fYPqXLlyvYOR64S7u7uABw9epSgoCDdyici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QeQiUlIJKdn0/3AVv+44iouTA+/d2YxHbqpV8oSUYcCq96zPW98HTq6lH6yIiIiIiIiUKbvOlJo/fz6jRo1i2rRptGnThsmTJxMdHc2uXbsICgo6734HDhzg6aefpn379kVu79atGzNnzrS9dnXVBauIvW07nMKIWetISM2msqcLHw9pSfOq/pd2sAN/w5FN4OQOLUeUbqAiIiIiIiJSLko8UyoyMpIJEyYQGxt72Sd/6623uO+++xg2bBgNGjRg2rRpeHh4MGPGjPPuYzabueuuuxg/fjw1atQoso+rqyshISG2h7//JV74ikipWLYjkTumrSIhNZtaQV4seuSGS09IwZlZUlF3gkel0glSREREREREylWJk1JPPPEECxcupEaNGnTp0oV58+aRk5NT4hPn5uayfv16OnfufCYYBwc6d+7MqlWrzrvfhAkTCAoKYsSI88+OWL58OUFBQdStW5eHHnqI48ePlzg+ESkdM1fs575P15GZa+aGWpX5+qHriajkcekHPLYb/l0CmOC6h0stThERERERESlfl5SUiomJYc2aNdSvX59HH32U0NBQRo4cyYYNG4p9nGPHjmE2mwkODi7QHhwcTEJCQpH7/P3330yfPp2PP/74vMft1q0bn376KcuWLeN///sff/zxB927d8dsNp93n5ycHFJTUws8ROTy5JstvPjtVsZ/vx2LAQNbRTBrWGt83Z0v78Cr3rf+rNsdAmpdfqAiIiIiIiJiF5dc6Lx58+a8++67HD58mBdffJFPPvmEVq1aERUVxYwZMzAMozTjJC0tjXvuuYePP/6YgICA8/YbOHAgt912G40bN6Z379788MMPrF27luXLl593n0mTJuHr62t7RERElGrsItea9Jx87vt0HbNXHQTg2e71mHR7Y5wdL3NthYzjsOkL6/O2Iy8zShEREREREbGnSy50npeXxzfffMPMmTNZunQp1113HSNGjODQoUM899xz/Prrr3z++efn3T8gIABHR0cSExMLtCcmJhISElKo/969ezlw4AA9e/a0tVksFuubcHJi165d1KxZs9B+NWrUICAggD179tCpU6ciYxk9ejSjRo2yvU5NTVViSuQSHUnJYvisdew4koqrkwOTB0TRvXFo6Rx83XTIz4bQKKh2fekcU0REREREROyixEmpDRs2MHPmTL744gscHBwYPHgw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\n"},"metadata":{}}],"source":["# -*- coding: utf-8 -*-\n","import tensorflow as tf\n","from tensorflow.keras.layers import Input, Dense, Bidirectional, GRU, MultiHeadAttention\n","from tensorflow.keras.models import Model\n","from transformers import XLMRobertaTokenizer, TFXLMRobertaModel\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, f1_score\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","\n","# CONFIGURATION\n","\n","MAX_LEN = 192\n","BATCH_SIZE = 16\n","EPOCHS = 5\n","LEARNING_RATE = 1e-5\n","VAL_SPLIT = 0.2\n","CLASS_WEIGHT = {0: 1, 1: 2.75}\n","XLM_MODEL_NAME = 'jplu/tf-xlm-roberta-base'\n","\n","\n","# MODEL ARCHITECTURE\n","class XLMRobertaEmbedding(tf.keras.layers.Layer):\n","    def __init__(self, model_name, **kwargs):\n","        super().__init__(**kwargs)\n","        self.xlm_model = TFXLMRobertaModel.from_pretrained(model_name)\n","\n","    def call(self, inputs):\n","        input_ids, attention_mask = inputs\n","        return self.xlm_model(\n","            input_ids,\n","            attention_mask=attention_mask,\n","            return_dict=True\n","        ).last_hidden_state\n","\n","def create_model():\n","    input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids')\n","    attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask')\n","\n","    # XLM-R Embeddings\n","    embeddings = XLMRobertaEmbedding(XLM_MODEL_NAME)([input_ids, attention_mask])\n","\n","    # BiGRU\n","    gru_out = Bidirectional(GRU(1024, return_sequences=True))(embeddings)\n","\n","    # Multi-Head Attention\n","    attention = MultiHeadAttention(num_heads=8, key_dim=64)(gru_out, gru_out)\n","\n","    # Pooling + Classification\n","    pooled = tf.keras.layers.GlobalAveragePooling1D()(attention)\n","    dropout = tf.keras.layers.Dropout(0.2)(pooled)\n","    output = Dense(1, activation='sigmoid')(dropout)\n","\n","    return Model(inputs=[input_ids, attention_mask], outputs=output)\n","\n","\n","# DATA PREPARATION\n","\n","# Load and preprocess data\n","tokenizer = XLMRobertaTokenizer.from_pretrained(XLM_MODEL_NAME)\n","\n","def preprocess(texts):\n","    return tokenizer(\n","        texts,\n","        max_length=MAX_LEN,\n","        truncation=True,\n","        padding='max_length',\n","        return_tensors='tf'\n","    )\n","\n","\n","texts = d1['text'].tolist()\n","labels = d1['label'].values\n","\n","# Split data using train_test_split\n","X_train, X_val, y_train, y_val = train_test_split(\n","    texts,\n","    labels,\n","    test_size=VAL_SPLIT,\n","    random_state=42,\n","    stratify=labels\n",")\n","\n","# Tokenizing both splits\n","train_encoded = preprocess(X_train)\n","val_encoded = preprocess(X_val)\n","\n","\n","# MODEL TRAINING\n","model = create_model()\n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(LEARNING_RATE),\n","    loss='binary_crossentropy',\n","    metrics=['accuracy']\n",")\n","\n","history = model.fit(\n","    x={\n","        'input_ids': train_encoded['input_ids'],\n","        'attention_mask': train_encoded['attention_mask']\n","    },\n","    y=y_train,\n","    validation_data=(\n","        {\n","            'input_ids': val_encoded['input_ids'],\n","            'attention_mask': val_encoded['attention_mask']\n","        },\n","        y_val\n","    ),\n","    epochs=EPOCHS,\n","    batch_size=BATCH_SIZE,\n","    class_weight=CLASS_WEIGHT\n",")\n","\n","\n","# EVALUATION\n","\n","def evaluate_model(model, encoded_data, true_labels):\n","    y_pred = model.predict(encoded_data)\n","    y_pred_labels = (y_pred > 0.5).astype(int)\n","\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(true_labels, y_pred_labels, target_names=['Neutral', 'Gendered Abuse']))\n","    print(f\"F1 Score: {f1_score(true_labels, y_pred_labels, average='weighted'):.4f}\")\n","\n","# Evaluate on validation set\n","print(\"\\nValidation Set Evaluation:\")\n","evaluate_model(model,\n","    {'input_ids': val_encoded['input_ids'], 'attention_mask': val_encoded['attention_mask']},\n","    y_val\n",")\n","\n","# Evaluate on training set\n","print(\"\\nTraining Set Evaluation:\")\n","evaluate_model(model,\n","    {'input_ids': train_encoded['input_ids'], 'attention_mask': train_encoded['attention_mask']},\n","    y_train\n",")\n","\n","\n","# VISUALIZATION\n","\n","plt.figure(figsize=(12, 5))\n","\n","plt.subplot(1, 2, 1)\n","plt.plot(history.history['accuracy'], label='Train Accuracy')\n","plt.plot(history.history['val_accuracy'], label='Val Accuracy')\n","plt.title('Accuracy Progress')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epoch')\n","plt.legend()\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(history.history['loss'], label='Train Loss')\n","plt.plot(history.history['val_loss'], label='Val Loss')\n","plt.title('Loss Progress')\n","plt.ylabel('Loss')\n","plt.xlabel('Epoch')\n","plt.legend()\n","\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"code","source":["# Saving the  model in (TensorFlow SavedModel format)\n","model.save(\"/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task1_Model.keras\")\n","\n","# Saving the  tokenizer\n","\n","from transformers import XLMRobertaTokenizer\n","\n","# Save tokenizer in a dedicated directory\n","tokenizer.save_pretrained(\"/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task1_tokenizer\")"],"metadata":{"id":"8VhUK6es-NAa","executionInfo":{"status":"ok","timestamp":1744719153867,"user_tz":-330,"elapsed":1826,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"aeaf0afc-b15b-4037-eeaf-0ffe2fa51eb5"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task1_tokenizer/tokenizer_config.json',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task1_tokenizer/special_tokens_map.json',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task1_tokenizer/sentencepiece.bpe.model',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task1_tokenizer/added_tokens.json')"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["col_lst = ['hi_a1', 'hi_a2', 'hi_a3', 'hi_a4', 'hi_a5']\n"],"metadata":{"id":"g6obdhaR-WGX","executionInfo":{"status":"ok","timestamp":1744719153915,"user_tz":-330,"elapsed":49,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","from transformers import XLMRobertaTokenizer\n","\n","# Load model with custom layer handling\n","loaded_model = tf.keras.models.load_model(\n","    \"/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task1_Model.keras\",\n","    custom_objects={'XLMRobertaEmbedding': XLMRobertaEmbedding}\n",")\n","\n","# Load tokenizer\n","tokenizer1 = XLMRobertaTokenizer.from_pretrained(\"/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Hindi/Task1_tokenizer\")"],"metadata":{"id":"yHQuSr23-bIP","executionInfo":{"status":"ok","timestamp":1744719164709,"user_tz":-330,"elapsed":10823,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"620b38d8-58c5-4f65-a51f-f0a7ce393413"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["Some layers from the model checkpoint at jplu/tf-xlm-roberta-base were not used when initializing TFXLMRobertaModel: ['lm_head']\n","- This IS expected if you are initializing TFXLMRobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFXLMRobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","All the layers of TFXLMRobertaModel were initialized from the model checkpoint at jplu/tf-xlm-roberta-base.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFXLMRobertaModel for predictions without further training.\n"]}]},{"cell_type":"code","source":["vv_1= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/testing/hindi/test_hi_l1.csv')\n","vv1=vv_1\n"],"metadata":{"id":"8iUs9Jn-_ikJ","executionInfo":{"status":"ok","timestamp":1744719869938,"user_tz":-330,"elapsed":646,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["vv_1['text'] = vv_1['text'].apply(lambda x: normalize_text(x))\n","\n","# vv['text'] = vv['text'].apply(lambda x: normalize_text_2(x))\n","vv_1 = vv_1[['text']]\n","\n","vv_1.columns = ['text']\n","vv_1"],"metadata":{"id":"L-G6W9sS_p92","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1744719875370,"user_tz":-330,"elapsed":126,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}},"outputId":"875cb4dd-502a-4be7-9948-03911a03e8df"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   text\n","0      bandrastation  sharadpawar  muradabad  рдЕрдЧрд░ рдЕрдн...\n","1      conspiracyagainstindia  рд╕реБрди рд▓реЛ рд░реЗ рджреЗрд╢ рдХреЗ рдЧрджреНрдж...\n","2      marathareservation   рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░ рдореЗрдВ рдЬрд╢реНрди рдХрд╛ рдо...\n","3      rheachakraborty aap mahesh bhatt se madad kiy...\n","4      secularmaskofd рд╣рдореЗ рдкрддрд╛ рдирд╣рд┐ рдХреНрдпрд╛ рдХрд╣рддреЗ рд╣реИ  рдЗрддрдирд╛...\n","...                                                 ...\n","1512  рд╣реИ рд╣реИрд╡рд╛рди рд▓реЛрдЧ рд╣реЛрддреЗ рд╣реИрдВ рдЗрдирдХреЛ рдУрд╕рд╛рдорд╛ рд▓рд╛рджреЗрди рдЦрддрд░рдирд╛рдХ ...\n","1513  рдЬрдп рд╣рд┐рдиреНрдж рдЬрдп рднрд╛рд░рдд рд╡рдиреНрджреЗ рдорд╛рддрд░рдо рдмрдШреЗрд▓ рддреБрдЭрд╕реЗ рджреЗрд╢ рд╢рд░...\n","1514  рдЬрдп рднреАрдо  рдЬреЛ рд▓реЛрдЧ  рд╣рдореЗрдВ рдзрдордХрд┐рдпрд╛рдВ рджреЗрддреЗ рд╣реИ  рдФрд░ рд╕рдВрд╡рд┐рдз...\n","1515    рдЗрдВрд╕рд╛рди рдХреЗ рдкрд╛рд╕ рджрд┐рдорд╛рдЧ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдпреЗ    рдЦреЛрдкрдбрд╝реА рддреЛ ...\n","1516    рд╡реЛ рдЬрдм рдорд╛рд░рдиреЗ рдХреА рдмрд╛рдд рдХрд░рддреЗ рд╣реИрдВ рддреЛ рдкреВрд░реЗ   рдХрд░реЛрдб рд╣...\n","\n","[1517 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-b1a3610e-0af3-46d2-ad36-125f951dd526\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>bandrastation  sharadpawar  muradabad  рдЕрдЧрд░ рдЕрдн...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>conspiracyagainstindia  рд╕реБрди рд▓реЛ рд░реЗ рджреЗрд╢ рдХреЗ рдЧрджреНрдж...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>marathareservation   рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░ рдореЗрдВ рдЬрд╢реНрди рдХрд╛ рдо...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>rheachakraborty aap mahesh bhatt se madad kiy...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>secularmaskofd рд╣рдореЗ рдкрддрд╛ рдирд╣рд┐ рдХреНрдпрд╛ рдХрд╣рддреЗ рд╣реИ  рдЗрддрдирд╛...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1512</th>\n","      <td>рд╣реИ рд╣реИрд╡рд╛рди рд▓реЛрдЧ рд╣реЛрддреЗ рд╣реИрдВ рдЗрдирдХреЛ рдУрд╕рд╛рдорд╛ рд▓рд╛рджреЗрди рдЦрддрд░рдирд╛рдХ ...</td>\n","    </tr>\n","    <tr>\n","      <th>1513</th>\n","      <td>рдЬрдп рд╣рд┐рдиреНрдж рдЬрдп рднрд╛рд░рдд рд╡рдиреНрджреЗ рдорд╛рддрд░рдо рдмрдШреЗрд▓ рддреБрдЭрд╕реЗ рджреЗрд╢ рд╢рд░...</td>\n","    </tr>\n","    <tr>\n","      <th>1514</th>\n","      <td>рдЬрдп рднреАрдо  рдЬреЛ рд▓реЛрдЧ  рд╣рдореЗрдВ рдзрдордХрд┐рдпрд╛рдВ рджреЗрддреЗ рд╣реИ  рдФрд░ рд╕рдВрд╡рд┐рдз...</td>\n","    </tr>\n","    <tr>\n","      <th>1515</th>\n","      <td>рдЗрдВрд╕рд╛рди рдХреЗ рдкрд╛рд╕ рджрд┐рдорд╛рдЧ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдпреЗ    рдЦреЛрдкрдбрд╝реА рддреЛ ...</td>\n","    </tr>\n","    <tr>\n","      <th>1516</th>\n","      <td>рд╡реЛ рдЬрдм рдорд╛рд░рдиреЗ рдХреА рдмрд╛рдд рдХрд░рддреЗ рд╣реИрдВ рддреЛ рдкреВрд░реЗ   рдХрд░реЛрдб рд╣...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1517 rows ├Ч 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1a3610e-0af3-46d2-ad36-125f951dd526')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b1a3610e-0af3-46d2-ad36-125f951dd526 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b1a3610e-0af3-46d2-ad36-125f951dd526');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-89fa8ff9-8f89-4dbe-a42b-d37810ccd3ed\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-89fa8ff9-8f89-4dbe-a42b-d37810ccd3ed')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-89fa8ff9-8f89-4dbe-a42b-d37810ccd3ed button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_ce1dfffa-beda-46b4-a1d3-0ebe659796bb\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('vv_1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_ce1dfffa-beda-46b4-a1d3-0ebe659796bb button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('vv_1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"vv_1","summary":"{\n  \"name\": \"vv_1\",\n  \"rows\": 1517,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1515,\n        \"samples\": [\n          \"   \\u0938\\u0940\\u0916\\u094b \\u0915\\u0940 \\u0939\\u0924\\u094d\\u092f\\u093e \\u0915\\u0930\\u0935\\u093e\\u0928\\u0947 \\u0935\\u093e\\u0932\\u093e \\u092d\\u093e\\u0930\\u0924 \\u0930\\u0924\\u094d\\u0928 \\u0939\\u0948 \\u0915\\u094d\\u092f\\u093e    \\u092d\\u094b\\u092a\\u093e\\u0932 \\u0917\\u0948\\u0938 \\u0924\\u094d\\u0930\\u093e\\u0938\\u0926\\u0940 \\u0915\\u0947 \\u0932\\u093f\\u090f \\u091c\\u093f\\u092e\\u094d\\u092e\\u0947\\u0926\\u093e\\u0930 \\u0915\\u094b \\u092d\\u0917\\u093e\\u0928\\u0947 \\u0935\\u093e\\u0932\\u093e \\u0926\\u0947\\u0936\\u092d\\u0915\\u094d\\u0924  \\u0915\\u0948\\u0938\\u0947   \",\n          \"    \\u091c\\u093c\\u0939\\u0930 \\u0909\\u0917\\u0932\\u0928\\u0947 \\u0915\\u0947   \\u0915\\u093e\\u0930\\u0916\\u093e\\u0928\\u0947 \\u0914\\u0930 \\u0924\\u0948\\u092f\\u093e\\u0930\",\n          \"\\u0932\\u094b \\u0906\\u091c \\u092e\\u093e\\u0930\\u0935\\u093e\\u0921\\u093c\\u0940 \\u0915\\u0940 \\u0935\\u094b \\u0915\\u0939\\u093e\\u0935\\u0924 \\u0938\\u093e\\u0930\\u094d\\u0925\\u0915 \\u0939\\u094b\\u0917\\u092f\\u0940 \\u092e\\u0939\\u093e\\u0930\\u093e\\u0937\\u094d\\u091f\\u094d\\u0930 \\u092e\\u0947\\u0902  \\u0938\\u0930\\u0915\\u093e\\u0930 \\u092c\\u0928\\u0924\\u0947 \\u0939\\u0940\\u0964 \\u0915\\u0940  \\u0930\\u093e\\u0902\\u0921\\u093e \\u0907\\u092f\\u093e\\u0901 \\u0939\\u0940 \\u0930\\u094b\\u0938\\u0940 \\u0913\\u0930 \\u092a\\u093e\\u0935\\u0928\\u093e \\u0907\\u092f\\u093e\\u0901 \\u0939\\u0940 \\u091c\\u093f\\u092e\\u0938\\u0940  \\u0930\\u093e\\u0902\\u0921\\u093e \\u0930\\u093e\\u0902\\u0921 \\u0907\\u092f\\u093e\\u0901 \\u0910\\u0938\\u0947 \\u0939\\u0940 \\u0930\\u094b\\u0938\\u0940 \\u0930\\u094b\\u092f\\u0947\\u0902\\u0917\\u0947 \\u092a\\u093e\\u0935\\u0928\\u093e \\u092e\\u0947\\u0939\\u092e\\u093e\\u0928 \\u091c\\u093f\\u092e\\u0938\\u0940  \\u0916\\u093e\\u090f\\u0902\\u0917\\u0947 \\u0938\\u093e\\u0930\\u094d\\u0925\\u0915 \\u0905\\u0930\\u094d\\u0925   \\u091b\\u093e\\u0924\\u0940 \\u092a\\u0940\\u091f\\u0928\\u0947 \\u0935\\u093e\\u0932\\u0947 \\u092a\\u0940\\u091f\\u0924\\u0947 \\u0930\\u0939\\u0947\\u0902\\u0917\\u0947 \\u0914\\u0930 \\u0939\\u092e\\u0947 \\u091c\\u094b \\u0915\\u0930\\u0928\\u093e \\u0939\\u0948 \\u0915\\u0930 \\u0926\\u0947\\u0902\\u0917\\u0947 \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["col_lst = ['hi_a1', 'hi_a2', 'hi_a3', 'hi_a4', 'hi_a5']\n","\n","for col in col_lst:\n","    vv1[col] = pd.to_numeric(vv1[col], errors='coerce')\n","\n","\n","\n","# vv1['label'] = vv1[col_lst].max(axis=1, skipna=True).astype(int)  # skipna=True to ignore empty values\n","# Take max across non-NaN, non-inf annotator labels\n","vv1['label'] = vv1[col_lst].max(axis=1, skipna=True)\n","\n","# Replace remaining NaN (e.g., if all annotators were missing or invalid) with 0\n","vv1['label'] = vv1['label'].fillna(0).astype(int)\n","\n","# vv1['label'] = vv1['label'].astype(int)\n","\n","\n","\n","vv1['label'] = vv1['label'].astype(int)\n","\n","\n","vv1 = vv1[['label', 'text']]\n","\n","\n","true_1 = vv1[\"label\"]\n","\n","# print(true_)\n","y_test_1 = true_1.values\n","\n","print(y_test_1)\n","print(len(y_test_1))"],"metadata":{"id":"vlpVI1RZ_qaS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744719922422,"user_tz":-330,"elapsed":49,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}},"outputId":"3c4dd040-8838-44b4-be5c-8319e3769fe9"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 0 0 ... 0 0 1]\n","1517\n"]}]},{"cell_type":"code","source":["X_test=vv1['text'].values\n","y_test=vv1['label'].values"],"metadata":{"id":"CvXgChcH_u5I","executionInfo":{"status":"ok","timestamp":1744719926286,"user_tz":-330,"elapsed":1,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["\n","\n","def preprocess(texts):\n","    return tokenizer1(\n","        texts.tolist(),\n","        max_length=MAX_LEN,\n","        truncation=True,\n","        padding='max_length',\n","        return_tensors='tf'\n","    )"],"metadata":{"id":"bjDI3k5P_xKo","executionInfo":{"status":"ok","timestamp":1744719948047,"user_tz":-330,"elapsed":6,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["test_enc = preprocess(X_test)\n"],"metadata":{"id":"RgrwEmtm_yvh","executionInfo":{"status":"ok","timestamp":1744719948297,"user_tz":-330,"elapsed":209,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import classification_report, f1_score, confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import precision_recall_curve\n","\n","\n","# PREDICTION & EVALUATION\n","\n","def evaluate_model(model, data, true_labels):\n","    # Get predictions\n","    y_pred_probs = model.predict({\n","        'input_ids': data['input_ids'],\n","        'attention_mask': data['attention_mask']\n","    })\n","\n","    # getting optimal threshold\n","    precision, recall, thresholds = precision_recall_curve(true_labels, y_pred_probs)\n","    f1_scores = 2 * (precision * recall) / (precision + recall + 1e-9)\n","    best_threshold = thresholds[np.argmax(f1_scores)]\n","\n","    # Applying threshold\n","    y_pred = (y_pred_probs > best_threshold).astype(int)\n","\n","    # Metrics\n","    print(f\"\\nBest Threshold: {best_threshold:.4f}\")\n","    print(classification_report(true_labels, y_pred, target_names=['Neutral', 'Abuse']))\n","    print(f\"Weighted F1: {f1_score(true_labels, y_pred, average='weighted'):.4f}\")\n","\n","    # Confusion Matrix\n","    cm = confusion_matrix(true_labels, y_pred)\n","    plt.figure(figsize=(6,4))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=['Neutral', 'Abuse'],\n","                yticklabels=['Neutral', 'Abuse'])\n","    plt.xlabel('Predicted')\n","    plt.ylabel('True')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n","\n","print(\"Test Set Evaluation:\")\n","evaluate_model(loaded_model, test_enc, y_test)\n","\n"],"metadata":{"id":"_MDEEZ2n_0vM","colab":{"base_uri":"https://localhost:8080/","height":653},"executionInfo":{"status":"ok","timestamp":1744719989473,"user_tz":-330,"elapsed":41174,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}},"outputId":"8be1e251-154d-44ee-946d-7e805167ddd6"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Set Evaluation:\n","\u001b[1m48/48\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 505ms/step\n","\n","Best Threshold: 0.4669\n","              precision    recall  f1-score   support\n","\n","     Neutral       0.80      0.40      0.53       829\n","       Abuse       0.55      0.88      0.67       688\n","\n","    accuracy                           0.62      1517\n","   macro avg       0.67      0.64      0.60      1517\n","weighted avg       0.68      0.62      0.60      1517\n","\n","Weighted F1: 0.5958\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report, f1_score, confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import precision_recall_curve\n","\n","\n","\n","\n","# SAMPLE PREDICTIONS\n","\n","def show_predictions(texts, labels, num_samples=5):\n","    indices = np.random.choice(len(texts), num_samples, replace=False)\n","    for idx in indices:\n","        text = texts[idx]\n","        true_label = labels[idx]\n","\n","        inputs = tokenizer1(\n","            text,\n","            max_length=MAX_LEN,\n","            truncation=True,\n","            padding='max_length',\n","            return_tensors='tf'\n","        )\n","        pred_prob = loaded_model.predict([inputs['input_ids'], inputs['attention_mask']])[0][0]\n","        pred_label = \"Abuse\" if pred_prob > 0.5 else \"Neutral\"\n","\n","        print(f\"\\nText: {text[:100]}...\")\n","        print(f\"True: {true_label} | Predicted: {pred_label} ({pred_prob:.4f})\")\n","\n","print(\"\\nSample Predictions:\")\n","show_predictions(X_test, y_test)"],"metadata":{"id":"A4_XjgMT_3Ev","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744719992716,"user_tz":-330,"elapsed":3244,"user":{"displayName":"Mridul Goel","userId":"03349548094606192356"}},"outputId":"1b16f63c-3fb7-49d4-969d-3088a8cf21a1"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Sample Predictions:\n","\u001b[1m1/1\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step\n","\n","Text:  рдЕрдХреЗрд▓реА рдирд╛ рдмрд╛рдЬрд╛рд░ рдЬрд╛рдпрд╛ рдХрд░реЛ рдирдЬрд╝рд░ рд▓рдЧ рдЬрд╛рдПрдЧреА...\n","True: 0 | Predicted: Abuse (0.7168)\n","\u001b[1m1/1\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 108ms/step\n","\n","Text:  рд╕рд╛рд░реА рдЙрдореНрд░ рдПрдХ рджреМрд░ рдореЗрдВ рдЧреБрдЬрд░ рдЧрдИ   рд╣рдо рддреБрдореНрд╣рд╛рд░реЗ рдкрд╛рд╕ рди рдЖрддреЗ рддреЛ рднрд▓рд╛ рдХрд╣рд╛рдБ рдЬрд╛рддреЗ   ...\n","True: 0 | Predicted: Abuse (0.5499)\n","\u001b[1m1/1\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 104ms/step\n","\n","Text:   рд╣рд░ рд╣рд░ рдорд╣рд╛рджреЗрд╡  рдмрд╣рдирдЬреА рд╢реБрдн рд░рд╛рддреНрд░рд┐...\n","True: 1 | Predicted: Abuse (0.5335)\n","\u001b[1m1/1\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 110ms/step\n","\n","Text:  рдХреБрддреНрддрд╛ ...\n","True: 0 | Predicted: Neutral (0.2992)\n","\u001b[1m1/1\u001b[0m \u001b[32mтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 85ms/step\n","\n","Text:  рдХреЛрдВрдЧреНрд░реЗрд╕ рдХреА рдорд╣рд╛ рд╕рдЪрд┐рд╡ рд╢реНрд░реА рдорддреА  рдЬреА рдХреЗ рд╕рд╛рде   рдЬреЛ рдЕрднрджреНрд░ рд╡реНрдпрд╡рд╣рд╛рд░ рд╣реБрдЖ рд╣реИред рдЕрдм рддрдХ рдЙрди рд╕рднреА рдорд╣рд┐рд▓рд╛рдУрдВ рдХреЛ рд╕рдбрд╝рдХ рдкрд░...\n","True: 1 | Predicted: Neutral (0.4691)\n"]}]}],"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"6d9dc5f7c6db46a4ab2d2d24d5bbe0fd":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_e5c95d9cc04c488393954b9b196f5499","IPY_MODEL_00a41b37113d48ad97208b25b66cffe2","IPY_MODEL_e7dc4c1b98c74383917fda322d3ab177"],"layout":"IPY_MODEL_6e791e63e7234a779538a8b11cabc731"}},"e5c95d9cc04c488393954b9b196f5499":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3e8c3fde1d964437af2e1b92901f7b6b","placeholder":"тАЛ","style":"IPY_MODEL_8fd94ce96aaf4910befba1e24f252a1a","value":"sentencepiece.bpe.model:тАЗ100%"}},"00a41b37113d48ad97208b25b66cffe2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_b2cb0ed8878c4f758fd97f6b657e0b99","max":5069051,"min":0,"orientation":"horizontal","style":"IPY_MODEL_0e9b67c0d1cd453da59e3032b002c128","value":5069051}},"e7dc4c1b98c74383917fda322d3ab177":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_699f4fc01caa4835bcdc926467538cf2","placeholder":"тАЛ","style":"IPY_MODEL_df304cdcfe344ed0b9182972d3b34ad9","value":"тАЗ5.07M/5.07MтАЗ[00:00&lt;00:00,тАЗ17.7MB/s]"}},"6e791e63e7234a779538a8b11cabc731":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3e8c3fde1d964437af2e1b92901f7b6b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8fd94ce96aaf4910befba1e24f252a1a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b2cb0ed8878c4f758fd97f6b657e0b99":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0e9b67c0d1cd453da59e3032b002c128":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"699f4fc01caa4835bcdc926467538cf2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"df304cdcfe344ed0b9182972d3b34ad9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"47598256a9ce4428a10b12e8646a561f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_0509d1e152564450bb1b3751ebd1bc9f","IPY_MODEL_a72c9be6effc412498cc02f3faf74253","IPY_MODEL_7cca62d10fe244aea10e44c616e4a315"],"layout":"IPY_MODEL_9b8325722ef942bf8a4f1ca7402f3a17"}},"0509d1e152564450bb1b3751ebd1bc9f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_12e95f25b2d74663a62a40595b20c5bd","placeholder":"тАЛ","style":"IPY_MODEL_ba04d9e8621941ba96a27f00834fa060","value":"config.json:тАЗ100%"}},"a72c9be6effc412498cc02f3faf74253":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_ae21a2605d5f4558965052136b7a9ef7","max":512,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a01dd04ef5c342e190e2ca206904cac8","value":512}},"7cca62d10fe244aea10e44c616e4a315":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a5e29efc09f94ed38c0c78ecc8fc88c5","placeholder":"тАЛ","style":"IPY_MODEL_f5a984ad16ad4718977d859807f0337c","value":"тАЗ512/512тАЗ[00:00&lt;00:00,тАЗ53.3kB/s]"}},"9b8325722ef942bf8a4f1ca7402f3a17":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"12e95f25b2d74663a62a40595b20c5bd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ba04d9e8621941ba96a27f00834fa060":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ae21a2605d5f4558965052136b7a9ef7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a01dd04ef5c342e190e2ca206904cac8":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a5e29efc09f94ed38c0c78ecc8fc88c5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f5a984ad16ad4718977d859807f0337c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ecec580caac1432f880a9e2ca4f53505":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_dc4c8b1dfa9046cb841c392a770cf755","IPY_MODEL_3d8c0ff25b2049c3a6d4a7cb7f4258e0","IPY_MODEL_5866b16ddd8647668f14b8d388502ff9"],"layout":"IPY_MODEL_e35480d632394b5b92a3559021f3bc30"}},"dc4c8b1dfa9046cb841c392a770cf755":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f18ea7e5dd564101979d75ba3474639b","placeholder":"тАЛ","style":"IPY_MODEL_b7b3702f129b493d88f4d77cfec115ab","value":"tf_model.h5:тАЗ100%"}},"3d8c0ff25b2049c3a6d4a7cb7f4258e0":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_ac34474bee48491fb4a0e88694e1b0ab","max":1885418496,"min":0,"orientation":"horizontal","style":"IPY_MODEL_42fb1d2e0f2c43e8825781475828e5dc","value":1885418496}},"5866b16ddd8647668f14b8d388502ff9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c93439a6e3cc4e32a2ff7f3060c1e795","placeholder":"тАЛ","style":"IPY_MODEL_2977b78242a047dfa553683a6efc4507","value":"тАЗ1.89G/1.89GтАЗ[00:13&lt;00:00,тАЗ206MB/s]"}},"e35480d632394b5b92a3559021f3bc30":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f18ea7e5dd564101979d75ba3474639b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b7b3702f129b493d88f4d77cfec115ab":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ac34474bee48491fb4a0e88694e1b0ab":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"42fb1d2e0f2c43e8825781475828e5dc":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c93439a6e3cc4e32a2ff7f3060c1e795":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2977b78242a047dfa553683a6efc4507":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}