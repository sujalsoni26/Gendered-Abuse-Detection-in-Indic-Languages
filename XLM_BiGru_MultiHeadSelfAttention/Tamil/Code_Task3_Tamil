{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25158,"status":"ok","timestamp":1744712532149,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"ofi3U7-OkPp3","outputId":"1aa533be-3789-4e50-a8bb-4b07af39edef"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7022,"status":"ok","timestamp":1744712539168,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"H-tWaOpK9yzb","outputId":"cbaff695-771c-4cb1-978a-fa522fd58813"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting emoji\n","  Downloading emoji-2.14.1-py3-none-any.whl.metadata (5.7 kB)\n","Downloading emoji-2.14.1-py3-none-any.whl (590 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m590.6/590.6 kB\u001b[0m \u001b[31m12.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: emoji\n","Successfully installed emoji-2.14.1\n"]}],"source":["!pip install emoji\n","# !pip install datasets"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"mndrNC668uQP","executionInfo":{"status":"ok","timestamp":1744712549525,"user_tz":-330,"elapsed":10355,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["# Data Handling\n","import os\n","import re\n","import string\n","import numpy as np\n","import pandas as pd\n","from numpy import array\n","from numpy import asarray\n","from numpy import zeros\n","\n","# NLP Preprocessing\n","# import nltk\n","from tensorflow.keras.preprocessing.text import Tokenizer, one_hot\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","# Machine Learning & Model Evaluation\n","from sklearn.model_selection import train_test_split\n","# from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics import (\n","    classification_report, f1_score, precision_score, recall_score,\n","    confusion_matrix, accuracy_score\n",")\n","# from skmultilearn.adapt import MLkNN\n","\n","# Deep Learning (Keras & TensorFlow)\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import (\n","    Embedding, LSTM, GRU, SimpleRNN, Dense, Dropout, Activation, Concatenate\n",")\n","from tensorflow.keras.optimizers import Adam\n","# from tensorflow.keras.losses import MeanSquaredError\n","from tensorflow.keras.utils import to_categorical\n","\n","# Visualization\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import emoji\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"DiVADZM88vsW","executionInfo":{"status":"ok","timestamp":1744712616594,"user_tz":-330,"elapsed":6165,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["d1= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_ta_l1.csv')\n","d3= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_ta_l3.csv')\n","\n","d1_test= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/testing/test_ta_l1.csv')\n","d3_test= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/testing/test_ta_l3.csv')\n"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"sOqst0Nq8yG6","executionInfo":{"status":"ok","timestamp":1744712618636,"user_tz":-330,"elapsed":2044,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["def normalize_text(text):\n","  # emoji_pattern = re.compile(\"[\"\n","  #                             u\"\\U0001F600-\\U0001F64F\"  # emoticons\n","  #                             u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n","  #                             u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n","  #                             u\"\\U0001F700-\\U0001F77F\"  # alchemical symbols\n","  #                             u\"\\U0001F780-\\U0001F7FF\"  # Geometric Shapes Extended\n","  #                             u\"\\U0001F800-\\U0001F8FF\"  # Supplemental Arrows-C\n","  #                             u\"\\U0001F900-\\U0001F9FF\"  # Supplemental Symbols and Pictographs\n","  #                             u\"\\U0001FA00-\\U0001FA6F\"  # Chess Symbols\n","  #                             u\"\\U0001FA70-\\U0001FAFF\"  # Symbols and Pictographs Extended-A\n","  #                             u\"\\U00002702-\\U000027B0\"  # Dingbats\n","  #                             u\"\\U000024C2-\\U0001F251\"\n","  #                             \"]+\", flags=re.UNICODE)\n","  text = text.lower()\n","  text = re.sub('\\[.*?\\]', ' ', text)\n","  text = re.sub('https?://\\S+|www\\.\\S+', ' ', text)\n","  text = re.sub('<.*?>+', ' ', text)\n","  text = re.sub('[%s]' % re.escape(string.punctuation), ' ', text)\n","  text = re.sub('\\n', ' ', text)\n","  text = re.sub('\\w*\\d\\w*', ' ', text)\n","  text = re.sub('<handle replaced>', '', text)\n","  text = emoji.demojize(text)\n","  text = text.replace(\"ðŸ¤§\", \" \")\n","  text = text.replace(\"&amp;\", \" \")\n","  text = text.replace(\"\\n\", \" \")\n","  text = text.replace(\"ðŸ˜¡\", \" \")\n","  # text = emoji_pattern.sub(r'', text)\n","  return text\n","\n","d1['text'] = d1['text'].apply(lambda x: normalize_text(x))\n","d1_test['text'] = d1_test['text'].apply(lambda x: normalize_text(x))\n","\n","d3['text'] = d3['text'].apply(lambda x: normalize_text(x))\n","d3_test['text'] = d3_test['text'].apply(lambda x: normalize_text(x))"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1744712618644,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"mWgpPVgh823Q","outputId":"3059ca28-a81b-499d-dd66-bc8743e282b1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      label_3                                               text\n","0           0     வைரமுத்து ஒரு காம மிருகம் என்பது சினிமா துற...\n","1           1       valimai  ajithkumar   ஏண்டா குள்ள புண்டைக...\n","2           1   ambedkarblueshirtrally  இந்த போராட்டத்துக்கு ...\n","3           0   breaking   திருச்சி மாவட்டம்  மணப்பாறையை அடுத...\n","4           1   bachelor :face_with_steam_from_nose::face_wit...\n","...       ...                                                ...\n","1130        1  :face_with_tears_of_joy::face_with_tears_of_jo...\n","1131        1  :grinning_face_with_smiling_eyes: தமிழ் தெரிஞ்...\n","1132        1  :grinning_face_with_sweat::grinning_face_with_...\n","1133        1  :grinning_cat::pencil: — ஆமாம் வேச ஆமாம் வேச அ...\n","1134        1  󾓦     gay  :Sri_Lanka:    பொடியன் மாஸ்டர் :fac...\n","\n","[1135 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-b2e679af-4090-46e4-82d0-16a516c368a7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label_3</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>வைரமுத்து ஒரு காம மிருகம் என்பது சினிமா துற...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>valimai  ajithkumar   ஏண்டா குள்ள புண்டைக...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>ambedkarblueshirtrally  இந்த போராட்டத்துக்கு ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>breaking   திருச்சி மாவட்டம்  மணப்பாறையை அடுத...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>bachelor :face_with_steam_from_nose::face_wit...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1130</th>\n","      <td>1</td>\n","      <td>:face_with_tears_of_joy::face_with_tears_of_jo...</td>\n","    </tr>\n","    <tr>\n","      <th>1131</th>\n","      <td>1</td>\n","      <td>:grinning_face_with_smiling_eyes: தமிழ் தெரிஞ்...</td>\n","    </tr>\n","    <tr>\n","      <th>1132</th>\n","      <td>1</td>\n","      <td>:grinning_face_with_sweat::grinning_face_with_...</td>\n","    </tr>\n","    <tr>\n","      <th>1133</th>\n","      <td>1</td>\n","      <td>:grinning_cat::pencil: — ஆமாம் வேச ஆமாம் வேச அ...</td>\n","    </tr>\n","    <tr>\n","      <th>1134</th>\n","      <td>1</td>\n","      <td>󾓦     gay  :Sri_Lanka:    பொடியன் மாஸ்டர் :fac...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1135 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b2e679af-4090-46e4-82d0-16a516c368a7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b2e679af-4090-46e4-82d0-16a516c368a7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b2e679af-4090-46e4-82d0-16a516c368a7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6a60663f-1d64-4eea-88ed-7a199cdd3b28\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a60663f-1d64-4eea-88ed-7a199cdd3b28')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6a60663f-1d64-4eea-88ed-7a199cdd3b28 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_ab93bff9-b692-41cd-879d-6497e1e9527e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('d3_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_ab93bff9-b692-41cd-879d-6497e1e9527e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('d3_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"d3_test","summary":"{\n  \"name\": \"d3_test\",\n  \"rows\": 1135,\n  \"fields\": [\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1135,\n        \"samples\": [\n          \"\\u0b8f\\u0ba9\\u0bcd\\u0b9f\\u0bbe \\u0baa\\u0bca\\u0b9f\\u0bcd\\u0b9f\\u0bc8 \\u0ba4\\u0bc7 \\u0baa    \\u0b8e\\u0b99\\u0bcd\\u0b95\\u0bc1 \\u0baa\\u0bc1\\u0b95\\u0bbe\\u0bb0\\u0bcd \\u0b95\\u0bca\\u0b9f\\u0bc1\\u0b95\\u0bcd\\u0b95\\u0baa\\u0b9f\\u0bcd\\u0b9f\\u0ba4\\u0bc1  \\u0baa\\u0bc6\\u0ba3\\u0bcd\\u0ba3\\u0bc8 \\u0bae\\u0bbf\\u0bb0\\u0b9f\\u0bcd\\u0b9f\\u0bbf \\u0bb5\\u0bc0\\u0b9f\\u0bc0\\u0baf\\u0bcb\\u0bb5\\u0bc8 \\u0ba8\\u0bc0\\u0b95\\u0bcd\\u0b95 \\u0b9a\\u0bc6\\u0baf\\u0bcd\\u0ba4\\u0bc1 \\u0b87\\u0bb0\\u0bc1\\u0b95\\u0bcd\\u0b95\\u0bbf\\u0bb1\\u0bc0\\u0bb0\\u0bcd\\u0b95\\u0bb3\\u0bcd   \\u0bae\\u0bc2\\u0ba4\\u0bcd\\u0ba4\\u0bbf\\u0bb0 \\u0b9a\\u0b99\\u0bcd\\u0b95\\u0bbf \\u0bb5\\u0bc7\\u0b9a\\u0bbf \\u0bae\\u0b95\\u0ba9\\u0bcd \\u0b9a\\u0bc1\\u0baa\\u0bcd\\u0baa\\u0bc8\\u0baf\\u0bbe \\u0bae\\u0bc0\\u0ba4\\u0bbe\\u0ba9 \\u0bb5\\u0bb4\\u0b95\\u0bcd\\u0b95\\u0bc8 \\u0b8e\\u0baa\\u0bcd\\u0baa\\u0b9f\\u0bbf \\u0bae\\u0bbf\\u0bb0\\u0b9f\\u0bcd\\u0b9f\\u0bbf \\u0bb5\\u0bbe\\u0baa\\u0bb8\\u0bcd \\u0bb5\\u0bbe\\u0b99\\u0bcd\\u0b95 \\u0bb5\\u0bc8\\u0ba4\\u0bcd\\u0ba4\\u0bc0\\u0bb0\\u0bcd\\u0b95\\u0bb3\\u0bcb \\u0b85\\u0ba4\\u0bc8 \\u0baa\\u0bcb\\u0bb2   \\u0ba4\\u0bc6\\u0bb0\\u0bc1\\u0bb5\\u0bc1\\u0b95\\u0bcd\\u0b95\\u0bc1 \\u0bb5\\u0ba8\\u0bcd\\u0ba4\\u0bc1 \\u0bae\\u0b95\\u0bcd\\u0b95\\u0bb3\\u0bc8 \\u0b9a\\u0ba8\\u0bcd\\u0ba4\\u0bbf\\u0b95\\u0bcd\\u0b95\\u0bc1\\u0bae\\u0bcd \\u0baa\\u0bcb\\u0ba4\\u0bc1 \\u0b9a\\u0bbf\\u0bb1\\u0baa\\u0bcd\\u0baa\\u0bbe\\u0ba9 \\u0b9a\\u0bc6\\u0bb0\\u0bc1\\u0baa\\u0bcd\\u0baa\\u0bc1 \\u0bb5\\u0bb0\\u0bb5\\u0bc7\\u0bb1\\u0bcd\\u0baa\\u0bc1 \\u0ba8\\u0bbf\\u0b9a\\u0bcd\\u0b9a\\u0baf\\u0bae\\u0bcd \",\n          \"\\u0b9a\\u0bc0\\u0bae\\u0bbe\\u0ba9\\u0bcd  \\u0bae\\u0bbe\\u0b99\\u0bcd\\u0b95\\u0bbe \\u0baa\\u0bbe\\u0baf\\u0bcd\\u0bb8\\u0bcd  \\u0b9a\\u0b99\\u0bcd\\u0b95\\u0bbf \\u0ba4\\u0bbe\\u0baf\\u0bcd \\u0b92\\u0bb2\\u0bbf \\u0b95\\u0bc2\\u0b9f \\u0b9a\\u0bc7\\u0bb0\\u0bbe\\u0ba4\\u0ba9\\u0bcd\\u0ba9\\u0bc1 \\u0b9a\\u0bca\\u0ba9\\u0bcd\\u0ba9\\u0bbe \\u0b95\\u0bc7\\u0b95\\u0bcd\\u0b95\\u0bc1\\u0bb0\\u0bbe\\u0ba9\\u0bbe         \\u0b95\\u0bca\\u0b9e\\u0bcd\\u0b9a\\u0bae\\u0bcd \\u0b95\\u0bc2\\u0b9f \\u0b89\\u0bb4\\u0bc8\\u0b95\\u0bcd\\u0b95\\u0bbe\\u0bae \\u0ba8\\u0bbf\\u0ba9\\u0bcd\\u0ba9 \\u0b8e\\u0b9f\\u0ba4\\u0bcd\\u0ba4\\u0bc1\\u0bb2 \\u0b87\\u0bb0\\u0bc1\\u0ba8\\u0bcd\\u0ba4\\u0bc1 \\u0bb5\\u0bc0\\u0b9f\\u0bbf\\u0baf\\u0bcb \\u0baa\\u0bcb\\u0b9f\\u0bcd\\u0b9f\\u0bc1   \\u0bb5\\u0bbf\\u0bae\\u0bb0\\u0bcd\\u0b9a\\u0ba9\\u0bae\\u0bcd \\u0b8e\\u0ba9\\u0bcd\\u0bb1 \\u0baa\\u0bc6\\u0baf\\u0bb0\\u0bbf\\u0bb2\\u0bcd \\u0bb5\\u0bbe\\u0baf\\u0bc8 \\u0b95\\u0bc2\\u0b9f\\u0bcd\\u0b9f\\u0bbf \\u0b95\\u0bc1\\u0b9f\\u0bc1\\u0ba4\\u0bcd\\u0ba4\\u0bc1 \\u0baa\\u0bca\\u0bb4\\u0baa\\u0bcd\\u0baa\\u0bc1 \\u0ba8\\u0b9f\\u0ba4\\u0bcd\\u0ba4\\u0bc1\\u0bae\\u0bcd \\u0b87\\u0bb5\\u0ba9\\u0bcd    \\u0b85\\u0ba9\\u0bcd\\u0bb1\\u0bbe\\u0b9f\\u0bae\\u0bcd \\u0b89\\u0bb4\\u0bc8\\u0ba4\\u0bcd\\u0ba4\\u0bc1 \\u0bb5\\u0bbe\\u0bb4\\u0bc1\\u0bae\\u0bcd \\u0bae\\u0b95\\u0bcd\\u0b95\\u0bb3\\u0bc8 \\u0b9a\\u0bca\\u0bb2\\u0bcd\\u0bb2\\u0bc1\\u0bb1\\u0bbe\\u0ba9\\u0bcd   \\u0b9a\\u0bbf\\u0bb2\\u0bcd\\u0bb2\\u0bb1\\u0bc8 \\u0baa\\u0baf \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}],"source":["X1 = list(d1['text'])\n","X1_test = list(d1_test['text'])\n","X3 = list(d3['text'])\n","X3_test = list(d3_test['text'])\n","\n","col_lst = ['ta_a1', 'ta_a2', 'ta_a3', 'ta_a4', 'ta_a5', 'ta_a6']\n","for col in col_lst:\n","    d1[col] = pd.to_numeric(d1[col], errors='coerce')\n","    d1_test[col] = pd.to_numeric(d1_test[col], errors='coerce')\n","\n","    d3[col] = pd.to_numeric(d3[col], errors='coerce')\n","    d3_test[col] = pd.to_numeric(d3_test[col], errors='coerce')\n","\n","\n","d1['label_1'] = d1[col_lst].max(axis=1, skipna=True).astype(int)  # skipna=True to ignore empty values\n","d1_test['label_1'] = d1_test[col_lst].max(axis=1, skipna=True).astype(int)  # skipna=True to ignore empty values\n","\n","d3['label_3'] = d3[col_lst].max(axis=1, skipna=True).astype(int)\n","d3_test['label_3'] = d3_test[col_lst].max(axis=1, skipna=True).astype(int)\n","\n","\n","d1 = d1.drop(col_lst, axis=1)\n","d1_test = d1_test.drop(col_lst, axis=1)\n","d3 = d3.drop(col_lst, axis=1)\n","d3_test = d3_test.drop(col_lst, axis=1)\n","\n","d1['label_1'] = d1['label_1'].astype(int)\n","d1_test['label_1'] = d1_test['label_1'].astype(int)\n","d3['label_3'] = d3['label_3'].astype(int)\n","d3_test['label_3'] = d3_test['label_3'].astype(int)\n","\n","\n","d1 = d1[['label_1', 'text']]\n","d1_test = d1_test[['label_1', 'text']]\n","d1_test\n","\n","d3 = d3[['label_3', 'text']]\n","d3_test = d3_test[['label_3', 'text']]\n","d3_test"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1744712618669,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"oMiDSNhQ9Fjj","outputId":"cfc256d2-ce71-4132-89ed-a574f4f913cf"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   text  label_1  label_3\n","0        வைரமுத்து ஒரு காம மிருகம் என்பது சினிமா துற...        0        0\n","1          valimai  ajithkumar   ஏண்டா குள்ள புண்டைக...        1        1\n","2      ambedkarblueshirtrally  இந்த போராட்டத்துக்கு ...        0        1\n","3      breaking   திருச்சி மாவட்டம்  மணப்பாறையை அடுத...        0        0\n","4      bachelor :face_with_steam_from_nose::face_wit...        1        1\n","...                                                 ...      ...      ...\n","1130  :face_with_tears_of_joy::face_with_tears_of_jo...        1        1\n","1131  :grinning_face_with_smiling_eyes: தமிழ் தெரிஞ்...        1        1\n","1132  :grinning_face_with_sweat::grinning_face_with_...        1        1\n","1133  :grinning_cat::pencil: — ஆமாம் வேச ஆமாம் வேச அ...        1        1\n","1134  󾓦     gay  :Sri_Lanka:    பொடியன் மாஸ்டர் :fac...        1        1\n","\n","[1135 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-0b88a62d-4791-40da-aec9-b27778fa3782\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label_1</th>\n","      <th>label_3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>வைரமுத்து ஒரு காம மிருகம் என்பது சினிமா துற...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>valimai  ajithkumar   ஏண்டா குள்ள புண்டைக...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ambedkarblueshirtrally  இந்த போராட்டத்துக்கு ...</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>breaking   திருச்சி மாவட்டம்  மணப்பாறையை அடுத...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>bachelor :face_with_steam_from_nose::face_wit...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1130</th>\n","      <td>:face_with_tears_of_joy::face_with_tears_of_jo...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1131</th>\n","      <td>:grinning_face_with_smiling_eyes: தமிழ் தெரிஞ்...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1132</th>\n","      <td>:grinning_face_with_sweat::grinning_face_with_...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1133</th>\n","      <td>:grinning_cat::pencil: — ஆமாம் வேச ஆமாம் வேச அ...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1134</th>\n","      <td>󾓦     gay  :Sri_Lanka:    பொடியன் மாஸ்டர் :fac...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1135 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b88a62d-4791-40da-aec9-b27778fa3782')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0b88a62d-4791-40da-aec9-b27778fa3782 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0b88a62d-4791-40da-aec9-b27778fa3782');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e68209d5-7aa6-494e-b0f6-9267b4dc5121\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e68209d5-7aa6-494e-b0f6-9267b4dc5121')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e68209d5-7aa6-494e-b0f6-9267b4dc5121 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f31b9b8f-b049-4879-bb11-9a036df64e2b\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dn_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f31b9b8f-b049-4879-bb11-9a036df64e2b button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dn_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dn_test","summary":"{\n  \"name\": \"dn_test\",\n  \"rows\": 1135,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1135,\n        \"samples\": [\n          \"\\u0b8f\\u0ba9\\u0bcd\\u0b9f\\u0bbe \\u0baa\\u0bca\\u0b9f\\u0bcd\\u0b9f\\u0bc8 \\u0ba4\\u0bc7 \\u0baa    \\u0b8e\\u0b99\\u0bcd\\u0b95\\u0bc1 \\u0baa\\u0bc1\\u0b95\\u0bbe\\u0bb0\\u0bcd \\u0b95\\u0bca\\u0b9f\\u0bc1\\u0b95\\u0bcd\\u0b95\\u0baa\\u0b9f\\u0bcd\\u0b9f\\u0ba4\\u0bc1  \\u0baa\\u0bc6\\u0ba3\\u0bcd\\u0ba3\\u0bc8 \\u0bae\\u0bbf\\u0bb0\\u0b9f\\u0bcd\\u0b9f\\u0bbf \\u0bb5\\u0bc0\\u0b9f\\u0bc0\\u0baf\\u0bcb\\u0bb5\\u0bc8 \\u0ba8\\u0bc0\\u0b95\\u0bcd\\u0b95 \\u0b9a\\u0bc6\\u0baf\\u0bcd\\u0ba4\\u0bc1 \\u0b87\\u0bb0\\u0bc1\\u0b95\\u0bcd\\u0b95\\u0bbf\\u0bb1\\u0bc0\\u0bb0\\u0bcd\\u0b95\\u0bb3\\u0bcd   \\u0bae\\u0bc2\\u0ba4\\u0bcd\\u0ba4\\u0bbf\\u0bb0 \\u0b9a\\u0b99\\u0bcd\\u0b95\\u0bbf \\u0bb5\\u0bc7\\u0b9a\\u0bbf \\u0bae\\u0b95\\u0ba9\\u0bcd \\u0b9a\\u0bc1\\u0baa\\u0bcd\\u0baa\\u0bc8\\u0baf\\u0bbe \\u0bae\\u0bc0\\u0ba4\\u0bbe\\u0ba9 \\u0bb5\\u0bb4\\u0b95\\u0bcd\\u0b95\\u0bc8 \\u0b8e\\u0baa\\u0bcd\\u0baa\\u0b9f\\u0bbf \\u0bae\\u0bbf\\u0bb0\\u0b9f\\u0bcd\\u0b9f\\u0bbf \\u0bb5\\u0bbe\\u0baa\\u0bb8\\u0bcd \\u0bb5\\u0bbe\\u0b99\\u0bcd\\u0b95 \\u0bb5\\u0bc8\\u0ba4\\u0bcd\\u0ba4\\u0bc0\\u0bb0\\u0bcd\\u0b95\\u0bb3\\u0bcb \\u0b85\\u0ba4\\u0bc8 \\u0baa\\u0bcb\\u0bb2   \\u0ba4\\u0bc6\\u0bb0\\u0bc1\\u0bb5\\u0bc1\\u0b95\\u0bcd\\u0b95\\u0bc1 \\u0bb5\\u0ba8\\u0bcd\\u0ba4\\u0bc1 \\u0bae\\u0b95\\u0bcd\\u0b95\\u0bb3\\u0bc8 \\u0b9a\\u0ba8\\u0bcd\\u0ba4\\u0bbf\\u0b95\\u0bcd\\u0b95\\u0bc1\\u0bae\\u0bcd \\u0baa\\u0bcb\\u0ba4\\u0bc1 \\u0b9a\\u0bbf\\u0bb1\\u0baa\\u0bcd\\u0baa\\u0bbe\\u0ba9 \\u0b9a\\u0bc6\\u0bb0\\u0bc1\\u0baa\\u0bcd\\u0baa\\u0bc1 \\u0bb5\\u0bb0\\u0bb5\\u0bc7\\u0bb1\\u0bcd\\u0baa\\u0bc1 \\u0ba8\\u0bbf\\u0b9a\\u0bcd\\u0b9a\\u0baf\\u0bae\\u0bcd \",\n          \"\\u0b9a\\u0bc0\\u0bae\\u0bbe\\u0ba9\\u0bcd  \\u0bae\\u0bbe\\u0b99\\u0bcd\\u0b95\\u0bbe \\u0baa\\u0bbe\\u0baf\\u0bcd\\u0bb8\\u0bcd  \\u0b9a\\u0b99\\u0bcd\\u0b95\\u0bbf \\u0ba4\\u0bbe\\u0baf\\u0bcd \\u0b92\\u0bb2\\u0bbf \\u0b95\\u0bc2\\u0b9f \\u0b9a\\u0bc7\\u0bb0\\u0bbe\\u0ba4\\u0ba9\\u0bcd\\u0ba9\\u0bc1 \\u0b9a\\u0bca\\u0ba9\\u0bcd\\u0ba9\\u0bbe \\u0b95\\u0bc7\\u0b95\\u0bcd\\u0b95\\u0bc1\\u0bb0\\u0bbe\\u0ba9\\u0bbe         \\u0b95\\u0bca\\u0b9e\\u0bcd\\u0b9a\\u0bae\\u0bcd \\u0b95\\u0bc2\\u0b9f \\u0b89\\u0bb4\\u0bc8\\u0b95\\u0bcd\\u0b95\\u0bbe\\u0bae \\u0ba8\\u0bbf\\u0ba9\\u0bcd\\u0ba9 \\u0b8e\\u0b9f\\u0ba4\\u0bcd\\u0ba4\\u0bc1\\u0bb2 \\u0b87\\u0bb0\\u0bc1\\u0ba8\\u0bcd\\u0ba4\\u0bc1 \\u0bb5\\u0bc0\\u0b9f\\u0bbf\\u0baf\\u0bcb \\u0baa\\u0bcb\\u0b9f\\u0bcd\\u0b9f\\u0bc1   \\u0bb5\\u0bbf\\u0bae\\u0bb0\\u0bcd\\u0b9a\\u0ba9\\u0bae\\u0bcd \\u0b8e\\u0ba9\\u0bcd\\u0bb1 \\u0baa\\u0bc6\\u0baf\\u0bb0\\u0bbf\\u0bb2\\u0bcd \\u0bb5\\u0bbe\\u0baf\\u0bc8 \\u0b95\\u0bc2\\u0b9f\\u0bcd\\u0b9f\\u0bbf \\u0b95\\u0bc1\\u0b9f\\u0bc1\\u0ba4\\u0bcd\\u0ba4\\u0bc1 \\u0baa\\u0bca\\u0bb4\\u0baa\\u0bcd\\u0baa\\u0bc1 \\u0ba8\\u0b9f\\u0ba4\\u0bcd\\u0ba4\\u0bc1\\u0bae\\u0bcd \\u0b87\\u0bb5\\u0ba9\\u0bcd    \\u0b85\\u0ba9\\u0bcd\\u0bb1\\u0bbe\\u0b9f\\u0bae\\u0bcd \\u0b89\\u0bb4\\u0bc8\\u0ba4\\u0bcd\\u0ba4\\u0bc1 \\u0bb5\\u0bbe\\u0bb4\\u0bc1\\u0bae\\u0bcd \\u0bae\\u0b95\\u0bcd\\u0b95\\u0bb3\\u0bc8 \\u0b9a\\u0bca\\u0bb2\\u0bcd\\u0bb2\\u0bc1\\u0bb1\\u0bbe\\u0ba9\\u0bcd   \\u0b9a\\u0bbf\\u0bb2\\u0bcd\\u0bb2\\u0bb1\\u0bc8 \\u0baa\\u0baf \",\n          \" \\u0b93\\u0b95\\u0bcd\\u0b95\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}],"source":["dn = pd.concat([d1, d3.drop(columns=['text'])], axis=1)\n","dn_test = pd.concat([d1_test, d3_test.drop(columns=['text'])], axis=1)\n","\n","dn = dn[['text', 'label_1', 'label_3']]\n","dn_test = dn_test[['text', 'label_1', 'label_3']]\n","dn_test"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":59,"status":"ok","timestamp":1744712618731,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"ZOVpp4_j9HsY","outputId":"3ba0920e-4874-44b2-ceb7-44400f93498f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   text  label_1  label_3  \\\n","0            முரசொலி அலுவலகம் அமைந்துள்ள இடம் பஞ்சமி...        0        0   \n","1        சோத்துக்கு பிச்சை எடுக்கிற கடங்கார நாய்களுக...        0        1   \n","2              தத்தபுத்த தத்தபுத்த ன்னு எதாவது புரியுதா        0        0   \n","3        பச்சை மொளகா காரம் vicky அம்மா புண்டை நாறும்...        1        1   \n","4       என்ன உடம்பு டா சாமி  சும்மா வளுவளுனு   முலை ...        1        1   \n","...                                                 ...      ...      ...   \n","6774  :loudly_crying_face::loudly_crying_face::loudl...        1        1   \n","6775  :face_with_rolling_eyes::face_with_rolling_eye...        0        0   \n","6776  :police_car_light:எக்ஸ் பிரஸ் பேர்ல் கப்பல் தீ...        0        0   \n","6777  :rolling_on_the_floor_laughing: :rolling_on_th...        0        1   \n","6778  :rolling_on_the_floor_laughing::rolling_on_the...        1        1   \n","\n","      label  \n","0         0  \n","1         1  \n","2         0  \n","3         3  \n","4         3  \n","...     ...  \n","6774      3  \n","6775      0  \n","6776      0  \n","6777      1  \n","6778      3  \n","\n","[6779 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-4028f38d-63f3-428f-8717-cda1bb798958\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label_1</th>\n","      <th>label_3</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>முரசொலி அலுவலகம் அமைந்துள்ள இடம் பஞ்சமி...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>சோத்துக்கு பிச்சை எடுக்கிற கடங்கார நாய்களுக...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>தத்தபுத்த தத்தபுத்த ன்னு எதாவது புரியுதா</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>பச்சை மொளகா காரம் vicky அம்மா புண்டை நாறும்...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>என்ன உடம்பு டா சாமி  சும்மா வளுவளுனு   முலை ...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6774</th>\n","      <td>:loudly_crying_face::loudly_crying_face::loudl...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>6775</th>\n","      <td>:face_with_rolling_eyes::face_with_rolling_eye...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6776</th>\n","      <td>:police_car_light:எக்ஸ் பிரஸ் பேர்ல் கப்பல் தீ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6777</th>\n","      <td>:rolling_on_the_floor_laughing: :rolling_on_th...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6778</th>\n","      <td>:rolling_on_the_floor_laughing::rolling_on_the...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6779 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4028f38d-63f3-428f-8717-cda1bb798958')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4028f38d-63f3-428f-8717-cda1bb798958 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4028f38d-63f3-428f-8717-cda1bb798958');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3d288cbe-bd68-4ca9-8d35-f58186192799\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3d288cbe-bd68-4ca9-8d35-f58186192799')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3d288cbe-bd68-4ca9-8d35-f58186192799 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_e8fb7ce5-dc19-49ad-b302-b1c7c8cce9b2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dn')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_e8fb7ce5-dc19-49ad-b302-b1c7c8cce9b2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dn');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dn","summary":"{\n  \"name\": \"dn\",\n  \"rows\": 6779,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6776,\n        \"samples\": [\n          \"\\u0bae\\u0bbe\\u0b99\\u0bcd\\u0b95\\u0bbe \\u0ba4\\u0bbf\\u0bb0\\u0bc1\\u0b9f\\u0bbf \\u0bae\\u0bbe\\u0b9f\\u0bcd\\u0b9f\\u0bbf\\u0bb0\\u0bc1\\u0b95\\u0bcd\\u0b95\\u0bc7\\u0ba9\\u0bcd\",\n          \"\\u0b85\\u0b9f\\u0bc7\\u0baf\\u0bcd \\u0b95\\u0bbe\\u0bb0\\u0bcd\\u0baa\\u0bb0\\u0bc7\\u0b9f\\u0bcd \\u0ba4\\u0bbe\\u0baf\\u0bcb\\u0bb3\\u0bbf  \\u0b87\\u0ba8\\u0bcd\\u0ba4 \\u0baa\\u0bbe\\u0b9f\\u0bcd\\u0b9f\\u0bc8 \\u0b8e\\u0bb4\\u0bc1\\u0ba4\\u0bbf \\u0baa\\u0bbe\\u0b9f\\u0bbf\\u0baf \\u0b85\\u0bb1\\u0bbf\\u0bb5\\u0bc1 \\u0baa\\u0bc6\\u0baf\\u0bb0\\u0bcd \\u0b8e\\u0b99\\u0bcd\\u0b95\\u0b9f\\u0bbe   :face_screaming_in_fear::shushing_face:\",\n          \"  \\u0b90\\u0b9f\\u0bcd\\u0b9f\\u0bae\\u0bcd \\u0b95\\u0b9f\\u0bcd\\u0b9a\\u0bbf\\u0bb2 \\u0b87\\u0bb0\\u0bc1\\u0ba8\\u0bcd\\u0ba4\\u0bbe \\u0b87\\u0baa\\u0bcd\\u0baa\\u0b9f\\u0bbf \\u0ba4\\u0bbe\\u0ba9\\u0bcd \\u0baa\\u0bc7\\u0b9a \\u0ba4\\u0bcb\\u0ba3\\u0bc1\\u0bae\\u0bbe\\u0bae\\u0bcd\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}],"source":["# Create new label column based on logic\n","def assign_label(row):\n","    label_1 = row['label_1']\n","    label_3 = row['label_3']\n","\n","    # Handle NaN cases (rows with only label_1 or label_3)\n","    if pd.isna(label_1) and pd.isna(label_3):\n","        return np.nan  # Both missing\n","    elif pd.isna(label_1):\n","        # Only label_3 exists (from d3, d3_test)\n","        return 1 if label_3 == 1 else 0  # Treat as binary\n","    elif pd.isna(label_3):\n","        # Only label_1 exists (from d1, d1_test)\n","        return 2 if label_1 == 1 else 0  # Treat as binary\n","    else:\n","        # Both labels exist (unlikely unless datasets overlap)\n","        if label_1 == 0 and label_3 == 0:\n","            return 0\n","        elif label_1 == 0 and label_3 == 1:\n","            return 1\n","        elif label_1 == 1 and label_3 == 0:\n","            return 2\n","        else:  # label_1 == 1 and label_3 == 1\n","            return 3\n","\n","# dn_new=dn.copy()\n","dn['label'] = dn.apply(assign_label, axis=1)\n","\n","# dn_test_new=dn_test.copy()\n","dn_test['label'] = dn_test.apply(assign_label, axis=1)\n","\n","dn"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1744712618760,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"YSaME4sQ9juc","outputId":"a4827054-a5ac-4fbb-84e1-461528dc1f4e"},"outputs":[{"output_type":"stream","name":"stdout","text":["label\n","3    2977\n","0    2324\n","1    1453\n","2      25\n","Name: count, dtype: int64\n","label\n","3    715\n","0    275\n","1    139\n","2      6\n","Name: count, dtype: int64\n"]}],"source":["dn = dn[['label', 'text']].copy()\n","dn_test = dn_test[['label', 'text']].copy()\n","dn\n","\n","print(dn['label'].value_counts())\n","print(dn_test['label'].value_counts())"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1744712618761,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"l6fD8Ujc8-F8","outputId":"c8e2283a-e162-4b93-e4cd-e5d245ccb4be"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0 1 0 ... 0 1 3]\n","6779\n"]}],"source":["y_data1 = dn[\"label\"]\n","# y_data2 = d2[\"label\"]\n","# y_data3 = d3[\"label\"]\n","# # print(y_data)\n","y1 = y_data1.values\n","# y2 = y_data2.values\n","# y3 = y_data3.values\n","print(y1)\n","print(len(y1))\n","# print(y2)\n","# print(len(y2))\n","# print(y3)\n","# print(len(y3))"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1744712618762,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"eqcS8s2W-ppD","outputId":"3fa3fb43-099b-4c10-8d2b-fc7c955f95c6"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0 1 2 3]\n","[2324 1453   25 2977]\n","1.599449415003441\n"]}],"source":["# y1.#\n","unique_values, counts = np.unique(y1, return_counts=True)\n","print(unique_values)\n","print(counts)\n","print(counts[0]/counts[1])\n"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"gXAL76qW-fgB","executionInfo":{"status":"ok","timestamp":1744712626447,"user_tz":-330,"elapsed":6,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["d1 = dn.copy()"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"elapsed":677,"status":"ok","timestamp":1744712627647,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"hJNxaadV_ik2","outputId":"b99cda5a-c0e2-435e-e31a-36348a6a48dd"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Average Text Length: 137.50007375719133\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Calculate the lengths of each text element\n","text_lengths = d1['text'].str.len()\n","\n","# Create a histogram with bins of size 10\n","plt.hist(text_lengths, bins=range(0, text_lengths.max() + 10, 10))\n","\n","plt.xlabel('Text Length')\n","plt.ylabel('Frequency')\n","plt.title('Distribution of Text Lengths')\n","plt.show()\n","\n","# Calculate and print the average text length\n","average_length = text_lengths.mean()\n","print(f\"Average Text Length: {average_length}\")\n","\n","# Get counts for each bucket of 10\n","bins = range(0, text_lengths.max() + 10, 10)\n","counts, _ = np.histogram(text_lengths, bins=bins)\n","\n","sum=0\n","# Print the counts for each bucket\n","# for i in range(len(bins) - 1):\n","#     sum+=counts[i]\n","#     print(f\"Length {bins[i]}-{bins[i+1]}: {counts[i]} {sum}\")"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1744712628899,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"tsxFCYDbMugS","outputId":"e17e5d15-d904-4af5-d38d-02d8ff5e6ab3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0.72923838,  1.1663799 , 67.79      ,  0.56928116])"]},"metadata":{},"execution_count":14}],"source":["import numpy as np\n","arr = [2324, 1453, 25, 2977]\n","# Total number of samples\n","total_samples = np.array(arr).sum()\n","\n","# Class frequencies\n","class_freq = np.array(arr)\n","\n","# Calculate the class weights\n","class_weights = total_samples / (len(class_freq) * class_freq)\n","class_weights"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"49Soz7wQECpW","executionInfo":{"status":"ok","timestamp":1744712629525,"user_tz":-330,"elapsed":15,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["from sklearn.metrics import f1_score\n","from tensorflow.keras.callbacks import Callback\n","import numpy as np\n","\n","class MacroF1Callback(Callback):\n","    def __init__(self, val_data):\n","        super().__init__()\n","        self.validation_data = val_data\n","\n","    def on_epoch_end(self, epoch, logs=None):\n","        val_inputs, val_labels = self.validation_data\n","        predictions = self.model.predict(val_inputs)\n","        y_true = np.argmax(val_labels, axis=1)\n","        y_pred = np.argmax(predictions, axis=1)\n","        macro_f1 = f1_score(y_true, y_pred, average='macro')\n","        print(f'\\nEpoch {epoch+1} — Macro F1-score: {macro_f1:.4f}')\n"]},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","import tensorflow as tf\n","from tensorflow.keras.layers import Input, Dense, Bidirectional, GRU, MultiHeadAttention, GlobalAveragePooling1D, Dropout, Lambda\n","from tensorflow.keras.models import Model\n","from transformers import XLMRobertaTokenizer, TFXLMRobertaModel\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, f1_score\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","from tensorflow.keras import backend as K\n","\n","# ======================\n","# CONFIGURATION\n","# ======================\n","MAX_LEN = 100  # Reduced for English text\n","BATCH_SIZE = 32\n","EPOCHS = 5\n","LEARNING_RATE = 5e-4\n","VAL_SPLIT = 0.2\n","CLASS_WEIGHT = {0: 0.72, 1: 0.9, 2: 4, 3: 0.4} # Adjusted for English class distribution\n","XLM_MODEL_NAME = 'xlm-roberta-base'\n","\n","# ======================\n","# MODEL ARCHITECTURE\n","# ======================\n","\n","class XLMRobertaEmbedding(tf.keras.layers.Layer):\n","    def __init__(self, model_name, **kwargs):\n","        super().__init__(**kwargs)\n","        self.xlm_model = TFXLMRobertaModel.from_pretrained(model_name)\n","\n","        # Freeze all layers of the XLM-Roberta model\n","        for layer in self.xlm_model.layers:\n","            layer.trainable = False\n","\n","    def call(self, inputs):\n","        input_ids, attention_mask = inputs\n","        return self.xlm_model(input_ids=input_ids, attention_mask=attention_mask).last_hidden_state\n","\n","\n","def create_model():\n","    input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids')\n","    attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask')\n","\n","    # XLM-R Embeddings\n","    embeddings = XLMRobertaEmbedding(XLM_MODEL_NAME)([input_ids, attention_mask])\n","\n","    # BiGRU\n","    gru_out = Bidirectional(GRU(512, return_sequences=True))(embeddings)\n","\n","    # Multi-Head Attention\n","    attention = MultiHeadAttention(num_heads=4, key_dim=64)(gru_out, gru_out)\n","\n","    # Pooling + Classification\n","    pooled = GlobalAveragePooling1D()(attention)\n","    dropout = Dropout(0.3)(pooled)\n","    output = Dense(4, activation='softmax')(dropout)\n","\n","    return Model(inputs=[input_ids, attention_mask], outputs=output)\n","\n","\n"],"metadata":{"id":"jnX4bNEHHadO","executionInfo":{"status":"ok","timestamp":1744712645244,"user_tz":-330,"elapsed":7073,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","execution_count":17,"metadata":{"id":"Qt9pw3Yt_c2u","executionInfo":{"status":"ok","timestamp":1744712645255,"user_tz":-330,"elapsed":5,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["# # -*- coding: utf-8 -*-\n","# import tensorflow as tf\n","# from tensorflow.keras.layers import Input, Dense, Bidirectional, GRU, MultiHeadAttention\n","# from tensorflow.keras.models import Model\n","# from transformers import XLMRobertaTokenizer, TFXLMRobertaModel\n","# from sklearn.model_selection import train_test_split\n","# from sklearn.metrics import classification_report, f1_score\n","# import matplotlib.pyplot as plt\n","# import numpy as np\n","# import pandas as pd\n","# from tensorflow.keras.layers import Input, Lambda, Dense, Dropout, Bidirectional, GRU, GlobalAveragePooling1D\n","# from tensorflow.keras.models import Model\n","# from tensorflow.keras import backend as K\n","\n","# # ======================\n","# # CONFIGURATION\n","# # ======================\n","# MAX_LEN = 100 # Reduced for English text\n","# BATCH_SIZE = 32\n","# EPOCHS = 5\n","# LEARNING_RATE = 5e-4\n","# VAL_SPLIT = 0.2\n","# # CLASS_WEIGHT = {0: 1, 1: 3.5, 2: 1, 3: 1}  # Adjusted for English class distribution\n","# CLASS_WEIGHT = {0: 0.72, 1: 0.9, 2: 4, 3: 0.4}  # Adjusted for English class distribution\n","# XLM_MODEL_NAME = 'xlm-roberta-base'\n","\n","# # ======================\n","# # MODEL ARCHITECTURE\n","# # ======================\n","\n","# class XLMRobertaEmbedding(tf.keras.layers.Layer):\n","#     def __init__(self, model_name, **kwargs):\n","#         super().__init__(**kwargs)\n","#         self.xlm_model = TFXLMRobertaModel.from_pretrained(model_name)\n","\n","#         for i in range(6):  # You can change how many layers you want frozen\n","#             self.xlm_model.roberta.encoder.layer[i].trainable = False\n","\n","#     def call(self, inputs):\n","#         input_ids, attention_mask = inputs\n","#         return self.xlm_model(\n","#             input_ids,\n","#             attention_mask=attention_mask,\n","#             return_dict=True\n","#         ).last_hidden_state\n","\n","# # def create_model():\n","# #     input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids')\n","# #     attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask')\n","\n","# #     # XLM-R Embeddings\n","# #     embeddings = XLMRobertaEmbedding(XLM_MODEL_NAME)([input_ids, attention_mask])\n","\n","# #     # BiGRU with reduced units for English\n","# #     gru_out = Bidirectional(GRU(512, return_sequences=True))(embeddings)\n","\n","# #     # Multi-Head Attention\n","# #     attention = MultiHeadAttention(num_heads=4, key_dim=64)(gru_out, gru_out)\n","\n","# #     # Pooling + Classification\n","# #     pooled = tf.keras.layers.GlobalAveragePooling1D()(attention)\n","# #     dropout = tf.keras.layers.Dropout(0.2)(pooled)\n","# #     output = Dense(4, activation='softmax')(dropout)\n","\n","# #     return Model(inputs=[input_ids, attention_mask], outputs=output)\n","\n","# def create_model():\n","#     input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids')\n","#     attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask')\n","\n","#     xlm_model = TFXLMRobertaModel.from_pretrained(XLM_MODEL_NAME)\n","\n","#     for i in range(8):\n","#         xlm_model.roberta.encoder.layer[i].trainable = False\n","\n","#     def xlm_embed(inputs):\n","#         input_ids, attention_mask = inputs\n","#         outputs = xlm_model(input_ids=input_ids, attention_mask=attention_mask)\n","#         return outputs.last_hidden_state\n","\n","#     embeddings = Lambda(xlm_embed, output_shape=(MAX_LEN, 768))([input_ids, attention_mask])  # (None, 100, 768)\n","\n","#     gru_out = Bidirectional(GRU(512, return_sequences=True))(embeddings)\n","#     attention = tf.keras.layers.MultiHeadAttention(num_heads=4, key_dim=64)(gru_out, gru_out)\n","#     pooled = GlobalAveragePooling1D()(attention)\n","#     dropout = Dropout(0.3)(pooled)\n","#     output = Dense(4, activation='softmax')(dropout)\n","\n","#     return Model(inputs=[input_ids, attention_mask], outputs=output)\n","\n","\n","# # Load dataset (replace with your English data path)\n","# english_df = d1\n","\n","# # Split data\n","# X_train, X_val, y_train, y_val = train_test_split(\n","#     english_df['text'].values,\n","#     english_df['label'].values,\n","#     test_size=VAL_SPLIT,\n","#     stratify=english_df['label'],\n","#     random_state=42\n","# )\n","\n","# from tensorflow.keras.utils import to_categorical\n","\n","# y_train = to_categorical(y_train, num_classes=4)\n","# y_val = to_categorical(y_val, num_classes=4)\n","\n","# # Tokenization\n","# tokenizer = XLMRobertaTokenizer.from_pretrained(XLM_MODEL_NAME)\n","\n","# def preprocess(texts):\n","#     return tokenizer(\n","#         texts.tolist(),\n","#         max_length=MAX_LEN,\n","#         truncation=True,\n","#         padding='max_length',\n","#         return_tensors='tf'\n","#     )\n","\n","# train_enc = preprocess(X_train)\n","# val_enc = preprocess(X_val)\n","\n","# # ======================\n","# # MODEL TRAINING\n","# # ======================\n","# model = create_model()\n","# model.compile(\n","#     optimizer=tf.keras.optimizers.Adam(LEARNING_RATE),\n","#     loss='categorical_crossentropy',\n","#     metrics=['accuracy']\n","# )\n","\n","# for layer in model.layers:\n","#     print(layer.name, layer.trainable)\n","\n","\n","# print(\"\\n\\nMODEL SUMMARY\\n\\n\\n\")\n","# model.summary()\n","\n","# val_data = (\n","#     {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","#     y_val\n","# )\n","\n","# f1_callback = MacroF1Callback(val_data)\n","# history = model.fit(\n","#     {'input_ids': train_enc['input_ids'], 'attention_mask': train_enc['attention_mask']},\n","#     y_train,\n","#     validation_data=val_data,\n","#     epochs=EPOCHS,\n","#     batch_size=BATCH_SIZE,\n","#     class_weight=CLASS_WEIGHT,\n","#     callbacks=[f1_callback]\n","# )\n"]},{"cell_type":"code","source":["# Load dataset (replace with your English data path)\n","english_df = d1\n","\n","# Split data\n","X_train, X_val, y_train, y_val = train_test_split(\n","    english_df['text'].values,\n","    english_df['label'].values,\n","    test_size=VAL_SPLIT,\n","    stratify=english_df['label'],\n","    random_state=42\n",")\n","\n","from tensorflow.keras.utils import to_categorical\n","\n","y_train = to_categorical(y_train, num_classes=4)\n","y_val = to_categorical(y_val, num_classes=4)\n","\n","# Tokenization\n","tokenizer = XLMRobertaTokenizer.from_pretrained(XLM_MODEL_NAME)\n","\n","def preprocess(texts):\n","    return tokenizer(\n","        texts.tolist(),\n","        max_length=MAX_LEN,\n","        truncation=True,\n","        padding='max_length',\n","        return_tensors='tf'\n","    )\n","\n","train_enc = preprocess(X_train)\n","val_enc = preprocess(X_val)\n","\n","# ======================\n","# MODEL TRAINING\n","# ======================\n","model = create_model()\n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=LEARNING_RATE),\n","    loss='categorical_crossentropy',\n","    metrics=['accuracy']\n",")\n","\n","print(\"\\n\\nMODEL SUMMARY\\n\\n\\n\")\n","model.summary()\n","\n","val_data = (\n","    {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","    y_val\n",")\n","\n","# Assuming you have defined or imported the MacroF1Callback class\n","f1_callback = MacroF1Callback(val_data)\n","\n","history = model.fit(\n","    {'input_ids': train_enc['input_ids'], 'attention_mask': train_enc['attention_mask']},\n","    y_train,\n","    validation_data=val_data,\n","    epochs=EPOCHS,\n","    batch_size=BATCH_SIZE,\n","    class_weight=CLASS_WEIGHT,\n","    callbacks=[f1_callback]  # You can uncomment this once defined\n",")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["bdf4850a47f048ea9387013112f9a23a","3c1d391431514adfa2b319904b4daf3f","5b5db65b596c41cfaa09d356c41bc9c9","8de24fb774cb40289ff4761fb1f058dc","9c6e17f38aac406593249180deab4bba","fcbce3ef1b9e4cf8b10e943453204a95","e17babf32a4149e88c5ba1a1926a894c","ece368acb0a84693b080c0ea61edc659","b61ec38a7f944fba863bdf279640b281","f19a67a99eb1487aaefbfbc7cd2c900a","7964e97649214afeab64dcfa6cf05377","56c27f08f0424d2380dd76450dea2592","a71447ed4d954a77881233e6228bbb25","0a0c6c66886b40d19180fa816b02ab18","46d4c177c64349fca140049503e6e53d","8bdd89e820b047d8bd9f474194595562","f88875b889024e5398da71a905bfed1d","78372a91eacc4ac89dfe18e4c072f2a2","0d541f73d5604d1796461ea059937735","8495b5c45e104e51945d756a7f019b5e","5f7de39d19534fafa8e302a493067672","34f27f34d0d64834bfdd52a60965ccf5","1035448221da4b2db920f28f876a5253","6e402307b71e40cf807d7dd57ed5a334","e32568b5186b4884b6a4d22180ba6298","62a237de67a74ad6b4232c46565321c2","73aa93b07fe44a82bb11dc48d7caf430","f09eadb695a44c63b54b7bf8e5c45b33","c316af863a554bd7b4db4ffa6bbb44fa","29ad9a9fffb249d1b7638a2fde9dadf2","a70da45a01e9490fa47aad24c62d3dfc","b249757a61db4224b305c39232ddce2d","0ac28082e6e34c289f03cd796bac6e41","97a6d18918054935824d4e66c6c9c409","90f2a524708b4515a71bf585dfaddb20","728537bb26be418984d44a8a851b91f3","2179792625414d70a734d2dae6275569","1701338d3f8d4a73828a00b37dce34a2","534f3f8b5c934503bf38f54b3fe3e21b","0651d478c70149bc833dcfa51c3463a9","e03bc106cc9b490a8da1b5b37be1e53e","2142003d4e924cbb975a19b8690efd17","513a48e535694369a17f02261a6a779c","64ef9ac473264e07bf091acf80eef40e","ea5ba931ee944eee8deb1f61167889ed","224e34820bd44143ba982c283f4442eb","e4e32bb4b2fb4a1aa43d8e318a7b1a66","1a4d536b86874437a19322a5b5f09c96","ba707f5cfb3746daa7f7dccc9c299884","9611f7a70d3840009a41d6c6a461081a","4aeb6221563e450bb21a9233189f00d2","69fe7dfffed74d4388608831d75b76db","814467e5a26c47dea13aa03607da19c2","4684d173c01e4848960cbc8af12957ac","ee4f754c11df41b19631e56d85fbead4"]},"id":"rTpEMXk6-S37","executionInfo":{"status":"ok","timestamp":1744713213657,"user_tz":-330,"elapsed":562051,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"2fd0117d-e80d-4cef-b5e0-d7e8b13cc563"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["sentencepiece.bpe.model:   0%|          | 0.00/5.07M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bdf4850a47f048ea9387013112f9a23a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tokenizer_config.json:   0%|          | 0.00/25.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"56c27f08f0424d2380dd76450dea2592"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tokenizer.json:   0%|          | 0.00/9.10M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1035448221da4b2db920f28f876a5253"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/615 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"97a6d18918054935824d4e66c6c9c409"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n","WARNING:huggingface_hub.file_download:Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n"]},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/1.12G [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ea5ba931ee944eee8deb1f61167889ed"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFXLMRobertaModel: ['lm_head.bias', 'lm_head.layer_norm.bias', 'lm_head.dense.weight', 'lm_head.dense.bias', 'lm_head.layer_norm.weight']\n","- This IS expected if you are initializing TFXLMRobertaModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFXLMRobertaModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n","All the weights of TFXLMRobertaModel were initialized from the PyTorch model.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFXLMRobertaModel for predictions without further training.\n"]},{"output_type":"stream","name":"stdout","text":["\n","\n","MODEL SUMMARY\n","\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"functional\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_ids           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_mask      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ xlm_roberta_embedd… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m768\u001b[0m)  │          \u001b[38;5;34m0\u001b[0m │ input_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n","│ (\u001b[38;5;33mXLMRobertaEmbeddi…\u001b[0m │                   │            │ attention_mask[\u001b[38;5;34m0\u001b[0m… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ bidirectional       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1024\u001b[0m) │  \u001b[38;5;34m3,938,304\u001b[0m │ xlm_roberta_embe… │\n","│ (\u001b[38;5;33mBidirectional\u001b[0m)     │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ multi_head_attenti… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1024\u001b[0m) │  \u001b[38;5;34m1,050,368\u001b[0m │ bidirectional[\u001b[38;5;34m0\u001b[0m]… │\n","│ (\u001b[38;5;33mMultiHeadAttentio…\u001b[0m │                   │            │ bidirectional[\u001b[38;5;34m0\u001b[0m]… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ multi_head_atten… │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ global_average_p… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)         │      \u001b[38;5;34m4,100\u001b[0m │ dropout_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_ids           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_mask      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ xlm_roberta_embedd… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">XLMRobertaEmbeddi…</span> │                   │            │ attention_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ bidirectional       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>) │  <span style=\"color: #00af00; text-decoration-color: #00af00\">3,938,304</span> │ xlm_roberta_embe… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)     │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ multi_head_attenti… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>) │  <span style=\"color: #00af00; text-decoration-color: #00af00\">1,050,368</span> │ bidirectional[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MultiHeadAttentio…</span> │                   │            │ bidirectional[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ multi_head_atten… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ global_average_p… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">4,100</span> │ dropout_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m4,992,772\u001b[0m (19.05 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,992,772</span> (19.05 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m4,992,772\u001b[0m (19.05 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,992,772</span> (19.05 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 292ms/step\n","\n","Epoch 1 — Macro F1-score: 0.3821\n","\u001b[1m170/170\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m94s\u001b[0m 447ms/step - accuracy: 0.3594 - loss: 0.7754 - val_accuracy: 0.5206 - val_loss: 0.9589\n","Epoch 2/5\n","\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 219ms/step\n","\n","Epoch 2 — Macro F1-score: 0.4361\n","\u001b[1m170/170\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m65s\u001b[0m 385ms/step - accuracy: 0.5812 - loss: 0.5947 - val_accuracy: 0.6165 - val_loss: 0.8538\n","Epoch 3/5\n","\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 221ms/step\n","\n","Epoch 3 — Macro F1-score: 0.4002\n","\u001b[1m170/170\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 391ms/step - accuracy: 0.6334 - loss: 0.5460 - val_accuracy: 0.5391 - val_loss: 0.8912\n","Epoch 4/5\n","\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 223ms/step\n","\n","Epoch 4 — Macro F1-score: 0.4244\n","\u001b[1m170/170\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m65s\u001b[0m 381ms/step - accuracy: 0.6458 - loss: 0.5218 - val_accuracy: 0.5892 - val_loss: 0.8729\n","Epoch 5/5\n","\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 220ms/step\n","\n","Epoch 5 — Macro F1-score: 0.4559\n","\u001b[1m170/170\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 386ms/step - accuracy: 0.6650 - loss: 0.4853 - val_accuracy: 0.6571 - val_loss: 0.8077\n"]}]},{"cell_type":"code","source":["# Save the trained model\n","model.save('/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Tamil/task_3_ta_xlm_roberta.keras')\n","\n","# Save tokenizer\n","tokenizer.save_pretrained(\"/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Tamil/Task3_tokenizer_ta\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m61HvZIJ-Tu6","executionInfo":{"status":"ok","timestamp":1744713227515,"user_tz":-330,"elapsed":904,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"d18812a1-9b8f-45b8-afe1-7bbf2d122807"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Tamil/Task3_tokenizer_ta/tokenizer_config.json',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Tamil/Task3_tokenizer_ta/special_tokens_map.json',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Tamil/Task3_tokenizer_ta/sentencepiece.bpe.model',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Tamil/Task3_tokenizer_ta/added_tokens.json')"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["\n","# Load the saved model\n","print(\"Loading the saved model...\")\n","loaded_model = tf.keras.models.load_model(\n","    \"/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/Tamil/task_3_ta_xlm_roberta.keras\",\n","    custom_objects={'XLMRobertaEmbedding': XLMRobertaEmbedding}\n",")\n","\n","# You can proceed to use the `loaded_model` for inference or further training."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BSzouz9W-WP-","executionInfo":{"status":"ok","timestamp":1744713240392,"user_tz":-330,"elapsed":6689,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"be450405-3d31-4204-e211-caa663308dfc"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Loading the saved model...\n"]},{"output_type":"stream","name":"stderr","text":["Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFXLMRobertaModel: ['lm_head.bias', 'lm_head.layer_norm.bias', 'lm_head.dense.weight', 'lm_head.dense.bias', 'lm_head.layer_norm.weight']\n","- This IS expected if you are initializing TFXLMRobertaModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFXLMRobertaModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n","All the weights of TFXLMRobertaModel were initialized from the PyTorch model.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFXLMRobertaModel for predictions without further training.\n"]}]},{"cell_type":"code","source":["model = loaded_model"],"metadata":{"id":"K0mRKWt4-YIB","executionInfo":{"status":"ok","timestamp":1744713243898,"user_tz":-330,"elapsed":6,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","execution_count":22,"metadata":{"id":"aYfaa1ASBrMd","executionInfo":{"status":"ok","timestamp":1744713248195,"user_tz":-330,"elapsed":5,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["\n","# # ======================\n","# # EVALUATION & VISUALIZATION\n","# # ======================\n","# def evaluate_model(model, data, true_labels):\n","#     y_pred = model.predict(data)\n","#     y_pred_labels = (y_pred > 0.5).astype(int)\n","\n","#     print(\"\\nClassification Report:\")\n","#     print(classification_report(true_labels, y_pred_labels))\n","#     print(f\"F1 Score: {f1_score(true_labels, y_pred_labels, average='macro'):.4f}\")\n","\n","# print(\"English Validation Results:\")\n","# evaluate_model(model,\n","#     {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","#     y_val\n","# )\n","\n","from sklearn.metrics import classification_report, f1_score, confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","def evaluate_model(model, data, true_labels, class_names=None):\n","    # Predict probabilities\n","    y_pred = model.predict(data)\n","\n","    # Convert to class labels\n","    y_pred_labels = y_pred.argmax(axis=1)  # Assuming softmax output\n","    true_labels = true_labels.argmax(axis=1) if true_labels.ndim > 1 else true_labels\n","\n","    # Classification report\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(true_labels, y_pred_labels, target_names=class_names))\n","    print(f\"Macro F1 Score: {f1_score(true_labels, y_pred_labels, average='macro'):.4f}\")\n","\n","    # Confusion matrix\n","    cm = confusion_matrix(true_labels, y_pred_labels)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=class_names, yticklabels=class_names)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n"]},{"cell_type":"code","source":["class_names = ['Neutral', 'Gender Abuse', 'Explicit Lang', 'Both']\n","\n","print(\"English Validation Results:\")\n","evaluate_model(\n","    model,\n","    {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","    y_val,\n","    class_names=class_names\n",")\n"],"metadata":{"id":"GY6ZmDzJWjA4","colab":{"base_uri":"https://localhost:8080/","height":842},"executionInfo":{"status":"ok","timestamp":1744713270043,"user_tz":-330,"elapsed":20713,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"ccf96f1b-f34e-4fe7-b6c7-8561f7868c7c"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["English Validation Results:\n","\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 286ms/step\n","\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","      Neutral       0.72      0.85      0.78       465\n"," Gender Abuse       0.37      0.31      0.34       291\n","Explicit Lang       0.00      0.00      0.00         5\n","         Both       0.74      0.68      0.71       595\n","\n","     accuracy                           0.66      1356\n","    macro avg       0.46      0.46      0.46      1356\n"," weighted avg       0.65      0.66      0.65      1356\n","\n","Macro F1 Score: 0.4559\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"elapsed":388,"status":"ok","timestamp":1744713289875,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"LXRmHcnKBtSs","outputId":"3535a2f0-c6de-4e7f-d221-03364e04e17e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x400 with 2 Axes>"],"image/png":"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\n"},"metadata":{}}],"source":["\n","plt.figure(figsize=(12, 4))\n","plt.subplot(1, 2, 1)\n","plt.plot(history.history['accuracy'], label='Train Accuracy')\n","plt.plot(history.history['val_accuracy'], label='Val Accuracy')\n","plt.title('Accuracy Progress')\n","plt.legend()\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(history.history['loss'], label='Train Loss')\n","plt.plot(history.history['val_loss'], label='Val Loss')\n","plt.title('Loss Progress')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"07L2-FcEkgtv","executionInfo":{"status":"ok","timestamp":1744713290682,"user_tz":-330,"elapsed":4,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}}},"outputs":[],"source":["def evaluate_on_test(model, dn_test, tokenizer, max_length=100, class_names=None):\n","    import numpy as np\n","    from sklearn.metrics import classification_report, f1_score, confusion_matrix\n","    import seaborn as sns\n","    import matplotlib.pyplot as plt\n","    from tensorflow.keras.utils import to_categorical\n","\n","    # Tokenize test data\n","    test_enc = tokenizer(\n","        list(dn_test['text']),\n","        truncation=True,\n","        padding='max_length',\n","        max_length=max_length,\n","        return_tensors='tf'\n","    )\n","\n","    # Convert labels to integers if needed\n","    test_labels = dn_test['label'].values\n","    y_true = test_labels\n","\n","    # Predict\n","    y_pred_probs = model.predict({'input_ids': test_enc['input_ids'], 'attention_mask': test_enc['attention_mask']})\n","    y_pred = y_pred_probs.argmax(axis=1)\n","\n","    # Metrics\n","    print(\"\\nTest Set Classification Report:\")\n","    print(classification_report(y_true, y_pred, target_names=class_names))\n","    print(f\"Macro F1 Score: {f1_score(y_true, y_pred, average='macro'):.4f}\")\n","\n","    # Confusion Matrix\n","    cm = confusion_matrix(y_true, y_pred)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=class_names, yticklabels=class_names)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix - Test Set')\n","    plt.show()\n"]},{"cell_type":"code","source":["class_names = ['Neutral', 'Gender Abuse', 'Explicit Lang', 'Both']\n","\n","evaluate_on_test(model, dn_test, tokenizer, class_names=class_names)\n"],"metadata":{"id":"wVbG9uI5WTMm","colab":{"base_uri":"https://localhost:8080/","height":824},"executionInfo":{"status":"ok","timestamp":1744713304949,"user_tz":-330,"elapsed":8999,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"c90a4cc5-8ec0-47d3-e110-192d27bd0086"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 229ms/step\n","\n","Test Set Classification Report:\n","               precision    recall  f1-score   support\n","\n","      Neutral       0.59      0.94      0.73       275\n"," Gender Abuse       0.18      0.30      0.23       139\n","Explicit Lang       0.00      0.00      0.00         6\n","         Both       0.95      0.61      0.74       715\n","\n","     accuracy                           0.65      1135\n","    macro avg       0.43      0.46      0.42      1135\n"," weighted avg       0.76      0.65      0.67      1135\n","\n","Macro F1 Score: 0.4241\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"9wUYk0VxBCe3"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"bdf4850a47f048ea9387013112f9a23a":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_3c1d391431514adfa2b319904b4daf3f","IPY_MODEL_5b5db65b596c41cfaa09d356c41bc9c9","IPY_MODEL_8de24fb774cb40289ff4761fb1f058dc"],"layout":"IPY_MODEL_9c6e17f38aac406593249180deab4bba"}},"3c1d391431514adfa2b319904b4daf3f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_fcbce3ef1b9e4cf8b10e943453204a95","placeholder":"​","style":"IPY_MODEL_e17babf32a4149e88c5ba1a1926a894c","value":"sentencepiece.bpe.model: 100%"}},"5b5db65b596c41cfaa09d356c41bc9c9":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_ece368acb0a84693b080c0ea61edc659","max":5069051,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b61ec38a7f944fba863bdf279640b281","value":5069051}},"8de24fb774cb40289ff4761fb1f058dc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f19a67a99eb1487aaefbfbc7cd2c900a","placeholder":"​","style":"IPY_MODEL_7964e97649214afeab64dcfa6cf05377","value":" 5.07M/5.07M [00:01&lt;00:00, 2.69MB/s]"}},"9c6e17f38aac406593249180deab4bba":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fcbce3ef1b9e4cf8b10e943453204a95":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e17babf32a4149e88c5ba1a1926a894c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ece368acb0a84693b080c0ea61edc659":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b61ec38a7f944fba863bdf279640b281":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"f19a67a99eb1487aaefbfbc7cd2c900a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7964e97649214afeab64dcfa6cf05377":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"56c27f08f0424d2380dd76450dea2592":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_a71447ed4d954a77881233e6228bbb25","IPY_MODEL_0a0c6c66886b40d19180fa816b02ab18","IPY_MODEL_46d4c177c64349fca140049503e6e53d"],"layout":"IPY_MODEL_8bdd89e820b047d8bd9f474194595562"}},"a71447ed4d954a77881233e6228bbb25":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f88875b889024e5398da71a905bfed1d","placeholder":"​","style":"IPY_MODEL_78372a91eacc4ac89dfe18e4c072f2a2","value":"tokenizer_config.json: 100%"}},"0a0c6c66886b40d19180fa816b02ab18":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_0d541f73d5604d1796461ea059937735","max":25,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8495b5c45e104e51945d756a7f019b5e","value":25}},"46d4c177c64349fca140049503e6e53d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5f7de39d19534fafa8e302a493067672","placeholder":"​","style":"IPY_MODEL_34f27f34d0d64834bfdd52a60965ccf5","value":" 25.0/25.0 [00:00&lt;00:00, 2.40kB/s]"}},"8bdd89e820b047d8bd9f474194595562":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f88875b889024e5398da71a905bfed1d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"78372a91eacc4ac89dfe18e4c072f2a2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0d541f73d5604d1796461ea059937735":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8495b5c45e104e51945d756a7f019b5e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"5f7de39d19534fafa8e302a493067672":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"34f27f34d0d64834bfdd52a60965ccf5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1035448221da4b2db920f28f876a5253":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_6e402307b71e40cf807d7dd57ed5a334","IPY_MODEL_e32568b5186b4884b6a4d22180ba6298","IPY_MODEL_62a237de67a74ad6b4232c46565321c2"],"layout":"IPY_MODEL_73aa93b07fe44a82bb11dc48d7caf430"}},"6e402307b71e40cf807d7dd57ed5a334":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f09eadb695a44c63b54b7bf8e5c45b33","placeholder":"​","style":"IPY_MODEL_c316af863a554bd7b4db4ffa6bbb44fa","value":"tokenizer.json: 100%"}},"e32568b5186b4884b6a4d22180ba6298":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_29ad9a9fffb249d1b7638a2fde9dadf2","max":9096718,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a70da45a01e9490fa47aad24c62d3dfc","value":9096718}},"62a237de67a74ad6b4232c46565321c2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b249757a61db4224b305c39232ddce2d","placeholder":"​","style":"IPY_MODEL_0ac28082e6e34c289f03cd796bac6e41","value":" 9.10M/9.10M [01:41&lt;00:00, 89.7kB/s]"}},"73aa93b07fe44a82bb11dc48d7caf430":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f09eadb695a44c63b54b7bf8e5c45b33":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c316af863a554bd7b4db4ffa6bbb44fa":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"29ad9a9fffb249d1b7638a2fde9dadf2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a70da45a01e9490fa47aad24c62d3dfc":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"b249757a61db4224b305c39232ddce2d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0ac28082e6e34c289f03cd796bac6e41":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"97a6d18918054935824d4e66c6c9c409":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_90f2a524708b4515a71bf585dfaddb20","IPY_MODEL_728537bb26be418984d44a8a851b91f3","IPY_MODEL_2179792625414d70a734d2dae6275569"],"layout":"IPY_MODEL_1701338d3f8d4a73828a00b37dce34a2"}},"90f2a524708b4515a71bf585dfaddb20":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_534f3f8b5c934503bf38f54b3fe3e21b","placeholder":"​","style":"IPY_MODEL_0651d478c70149bc833dcfa51c3463a9","value":"config.json: 100%"}},"728537bb26be418984d44a8a851b91f3":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e03bc106cc9b490a8da1b5b37be1e53e","max":615,"min":0,"orientation":"horizontal","style":"IPY_MODEL_2142003d4e924cbb975a19b8690efd17","value":615}},"2179792625414d70a734d2dae6275569":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_513a48e535694369a17f02261a6a779c","placeholder":"​","style":"IPY_MODEL_64ef9ac473264e07bf091acf80eef40e","value":" 615/615 [00:00&lt;00:00, 31.4kB/s]"}},"1701338d3f8d4a73828a00b37dce34a2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"534f3f8b5c934503bf38f54b3fe3e21b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0651d478c70149bc833dcfa51c3463a9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e03bc106cc9b490a8da1b5b37be1e53e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2142003d4e924cbb975a19b8690efd17":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"513a48e535694369a17f02261a6a779c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"64ef9ac473264e07bf091acf80eef40e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ea5ba931ee944eee8deb1f61167889ed":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_224e34820bd44143ba982c283f4442eb","IPY_MODEL_e4e32bb4b2fb4a1aa43d8e318a7b1a66","IPY_MODEL_1a4d536b86874437a19322a5b5f09c96"],"layout":"IPY_MODEL_ba707f5cfb3746daa7f7dccc9c299884"}},"224e34820bd44143ba982c283f4442eb":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9611f7a70d3840009a41d6c6a461081a","placeholder":"​","style":"IPY_MODEL_4aeb6221563e450bb21a9233189f00d2","value":"model.safetensors: 100%"}},"e4e32bb4b2fb4a1aa43d8e318a7b1a66":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_69fe7dfffed74d4388608831d75b76db","max":1115567652,"min":0,"orientation":"horizontal","style":"IPY_MODEL_814467e5a26c47dea13aa03607da19c2","value":1115567652}},"1a4d536b86874437a19322a5b5f09c96":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4684d173c01e4848960cbc8af12957ac","placeholder":"​","style":"IPY_MODEL_ee4f754c11df41b19631e56d85fbead4","value":" 1.12G/1.12G [00:06&lt;00:00, 295MB/s]"}},"ba707f5cfb3746daa7f7dccc9c299884":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9611f7a70d3840009a41d6c6a461081a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4aeb6221563e450bb21a9233189f00d2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"69fe7dfffed74d4388608831d75b76db":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"814467e5a26c47dea13aa03607da19c2":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"4684d173c01e4848960cbc8af12957ac":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ee4f754c11df41b19631e56d85fbead4":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}