{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6300,"status":"ok","timestamp":1744709136749,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"ofi3U7-OkPp3","outputId":"43579264-a522-42c3-be2e-46f2e3a56588"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2287,"status":"ok","timestamp":1744709139037,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"H-tWaOpK9yzb","outputId":"c480a8ed-0350-4550-b701-76256d5f4c91"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: emoji in /usr/local/lib/python3.11/dist-packages (2.14.1)\n"]}],"source":["!pip install emoji\n","# !pip install datasets"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mndrNC668uQP"},"outputs":[],"source":["# Data Handling\n","import os\n","import re\n","import string\n","import numpy as np\n","import pandas as pd\n","from numpy import array\n","from numpy import asarray\n","from numpy import zeros\n","\n","# NLP Preprocessing\n","# import nltk\n","from tensorflow.keras.preprocessing.text import Tokenizer, one_hot\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","# Machine Learning & Model Evaluation\n","from sklearn.model_selection import train_test_split\n","# from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics import (\n","    classification_report, f1_score, precision_score, recall_score,\n","    confusion_matrix, accuracy_score\n",")\n","# from skmultilearn.adapt import MLkNN\n","\n","# Deep Learning (Keras & TensorFlow)\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import (\n","    Embedding, LSTM, GRU, SimpleRNN, Dense, Dropout, Activation, Concatenate\n",")\n","from tensorflow.keras.optimizers import Adam\n","# from tensorflow.keras.losses import MeanSquaredError\n","from tensorflow.keras.utils import to_categorical\n","\n","# Visualization\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import emoji\n"]},{"cell_type":"code","source":["!ls /content/drive/MyDrive\n"],"metadata":{"id":"EFlpawL8YLhF","executionInfo":{"status":"ok","timestamp":1744709139137,"user_tz":-330,"elapsed":90,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"ae016c67-8236-4864-9557-522751b440c3","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["'How to get started with Drive.pdf'   NLP_Project\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DiVADZM88vsW"},"outputs":[],"source":["d1= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_en_l1.csv')\n","d3= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_en_l3.csv')\n","\n","d1_test= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/testing/test_en_l1.csv')\n","d3_test= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/testing/test_en_l3.csv')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sOqst0Nq8yG6"},"outputs":[],"source":["def normalize_text(text):\n","  # emoji_pattern = re.compile(\"[\"\n","  #                             u\"\\U0001F600-\\U0001F64F\"  # emoticons\n","  #                             u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n","  #                             u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n","  #                             u\"\\U0001F700-\\U0001F77F\"  # alchemical symbols\n","  #                             u\"\\U0001F780-\\U0001F7FF\"  # Geometric Shapes Extended\n","  #                             u\"\\U0001F800-\\U0001F8FF\"  # Supplemental Arrows-C\n","  #                             u\"\\U0001F900-\\U0001F9FF\"  # Supplemental Symbols and Pictographs\n","  #                             u\"\\U0001FA00-\\U0001FA6F\"  # Chess Symbols\n","  #                             u\"\\U0001FA70-\\U0001FAFF\"  # Symbols and Pictographs Extended-A\n","  #                             u\"\\U00002702-\\U000027B0\"  # Dingbats\n","  #                             u\"\\U000024C2-\\U0001F251\"\n","  #                             \"]+\", flags=re.UNICODE)\n","  text = text.lower()\n","  text = re.sub('\\[.*?\\]', ' ', text)\n","  text = re.sub('https?://\\S+|www\\.\\S+', ' ', text)\n","  text = re.sub('<.*?>+', ' ', text)\n","  text = re.sub('[%s]' % re.escape(string.punctuation), ' ', text)\n","  text = re.sub('\\n', ' ', text)\n","  text = re.sub('\\w*\\d\\w*', ' ', text)\n","  text = re.sub('<handle replaced>', '', text)\n","  text = emoji.demojize(text)\n","  text = text.replace(\"ðŸ¤§\", \" \")\n","  text = text.replace(\"&amp;\", \" \")\n","  text = text.replace(\"\\n\", \" \")\n","  text = text.replace(\"ðŸ˜¡\", \" \")\n","  # text = emoji_pattern.sub(r'', text)\n","  return text\n","\n","d1['text'] = d1['text'].apply(lambda x: normalize_text(x))\n","d1_test['text'] = d1_test['text'].apply(lambda x: normalize_text(x))\n","\n","d3['text'] = d3['text'].apply(lambda x: normalize_text(x))\n","d3_test['text'] = d3_test['text'].apply(lambda x: normalize_text(x))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mWgpPVgh823Q","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1744709141402,"user_tz":-330,"elapsed":40,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"853657cf-9c46-41fd-84b3-67d91a0a2871"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      label_3                                               text\n","0           1   who s this tweet about  bitch it s about you ...\n","1           0   alkalamba should’ve used her slippers to slap...\n","2           1   coronavillains   covididiot      is a      do...\n","3           1   acts      like the female  governors  of stat...\n","4           1     let us celebrate “secular” as a beautiful w...\n","...       ...                                                ...\n","1102        1  you should be tired of not having any kind of ...\n","1103        0  “the limits of tyrants are prescribed by the e...\n","1104        1  :Cancer::crab: like wtf my symbol is   and i’m...\n","1105        1  :United_States:  marry a millionaire guy  divo...\n","1106        1  :face_with_tears_of_joy: slim could take over ...\n","\n","[1107 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-55f34682-0408-4bef-b58d-71eb33f4ee6a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label_3</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>who s this tweet about  bitch it s about you ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>alkalamba should’ve used her slippers to slap...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>coronavillains   covididiot      is a      do...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>acts      like the female  governors  of stat...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>let us celebrate “secular” as a beautiful w...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1102</th>\n","      <td>1</td>\n","      <td>you should be tired of not having any kind of ...</td>\n","    </tr>\n","    <tr>\n","      <th>1103</th>\n","      <td>0</td>\n","      <td>“the limits of tyrants are prescribed by the e...</td>\n","    </tr>\n","    <tr>\n","      <th>1104</th>\n","      <td>1</td>\n","      <td>:Cancer::crab: like wtf my symbol is   and i’m...</td>\n","    </tr>\n","    <tr>\n","      <th>1105</th>\n","      <td>1</td>\n","      <td>:United_States:  marry a millionaire guy  divo...</td>\n","    </tr>\n","    <tr>\n","      <th>1106</th>\n","      <td>1</td>\n","      <td>:face_with_tears_of_joy: slim could take over ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1107 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55f34682-0408-4bef-b58d-71eb33f4ee6a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-55f34682-0408-4bef-b58d-71eb33f4ee6a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-55f34682-0408-4bef-b58d-71eb33f4ee6a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c09a0160-c211-408c-b5bb-e863978cc4bd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c09a0160-c211-408c-b5bb-e863978cc4bd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c09a0160-c211-408c-b5bb-e863978cc4bd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_97b9bce2-3187-4dbc-ae48-cfc67b10d6c0\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('d3_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_97b9bce2-3187-4dbc-ae48-cfc67b10d6c0 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('d3_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"d3_test","summary":"{\n  \"name\": \"d3_test\",\n  \"rows\": 1107,\n  \"fields\": [\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1107,\n        \"samples\": [\n          \" pissfull snakes :snake: traitors\",\n          \"had to cut that hoe off cause the bitch was steady bitchin\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":38}],"source":["X1 = list(d1['text'])\n","X1_test = list(d1_test['text'])\n","X3 = list(d3['text'])\n","X3_test = list(d3_test['text'])\n","\n","col_lst = ['en_a1', 'en_a2', 'en_a3', 'en_a4', 'en_a5', 'en_a6']\n","for col in col_lst:\n","    d1[col] = pd.to_numeric(d1[col], errors='coerce')\n","    d1_test[col] = pd.to_numeric(d1_test[col], errors='coerce')\n","\n","    d3[col] = pd.to_numeric(d3[col], errors='coerce')\n","    d3_test[col] = pd.to_numeric(d3_test[col], errors='coerce')\n","\n","\n","d1['label_1'] = d1[col_lst].max(axis=1, skipna=True).astype(int)  # skipna=True to ignore empty values\n","d1_test['label_1'] = d1_test[col_lst].max(axis=1, skipna=True).astype(int)  # skipna=True to ignore empty values\n","\n","d3['label_3'] = d3[col_lst].max(axis=1, skipna=True).astype(int)\n","d3_test['label_3'] = d3_test[col_lst].max(axis=1, skipna=True).astype(int)\n","\n","\n","d1 = d1.drop(col_lst, axis=1)\n","d1_test = d1_test.drop(col_lst, axis=1)\n","d3 = d3.drop(col_lst, axis=1)\n","d3_test = d3_test.drop(col_lst, axis=1)\n","\n","d1['label_1'] = d1['label_1'].astype(int)\n","d1_test['label_1'] = d1_test['label_1'].astype(int)\n","d3['label_3'] = d3['label_3'].astype(int)\n","d3_test['label_3'] = d3_test['label_3'].astype(int)\n","\n","\n","d1 = d1[['label_1', 'text']]\n","d1_test = d1_test[['label_1', 'text']]\n","d1_test\n","\n","d3 = d3[['label_3', 'text']]\n","d3_test = d3_test[['label_3', 'text']]\n","d3_test"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oMiDSNhQ9Fjj","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1744709141448,"user_tz":-330,"elapsed":45,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"72aa3372-05cb-4341-e0a6-80ffda3ff55f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   text  label_1  label_3\n","0      who s this tweet about  bitch it s about you ...        1        1\n","1      alkalamba should’ve used her slippers to slap...        0        0\n","2      coronavillains   covididiot      is a      do...        1        1\n","3      acts      like the female  governors  of stat...        1        1\n","4        let us celebrate “secular” as a beautiful w...        1        1\n","...                                                 ...      ...      ...\n","1102  you should be tired of not having any kind of ...        1        1\n","1103  “the limits of tyrants are prescribed by the e...        0        0\n","1104  :Cancer::crab: like wtf my symbol is   and i’m...        1        1\n","1105  :United_States:  marry a millionaire guy  divo...        1        1\n","1106  :face_with_tears_of_joy: slim could take over ...        1        1\n","\n","[1107 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-eaea6c84-ef15-4b7e-9171-97f1a367b760\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label_1</th>\n","      <th>label_3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>who s this tweet about  bitch it s about you ...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>alkalamba should’ve used her slippers to slap...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>coronavillains   covididiot      is a      do...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>acts      like the female  governors  of stat...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>let us celebrate “secular” as a beautiful w...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1102</th>\n","      <td>you should be tired of not having any kind of ...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1103</th>\n","      <td>“the limits of tyrants are prescribed by the e...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1104</th>\n","      <td>:Cancer::crab: like wtf my symbol is   and i’m...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1105</th>\n","      <td>:United_States:  marry a millionaire guy  divo...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1106</th>\n","      <td>:face_with_tears_of_joy: slim could take over ...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1107 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eaea6c84-ef15-4b7e-9171-97f1a367b760')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eaea6c84-ef15-4b7e-9171-97f1a367b760 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eaea6c84-ef15-4b7e-9171-97f1a367b760');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-326f7f0f-5954-484d-8af9-ed486550d0c7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-326f7f0f-5954-484d-8af9-ed486550d0c7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-326f7f0f-5954-484d-8af9-ed486550d0c7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a3557d45-973f-43a4-a336-d4d6c7837e28\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dn_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a3557d45-973f-43a4-a336-d4d6c7837e28 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dn_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dn_test","summary":"{\n  \"name\": \"dn_test\",\n  \"rows\": 1107,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1107,\n        \"samples\": [\n          \" pissfull snakes :snake: traitors\",\n          \"had to cut that hoe off cause the bitch was steady bitchin\",\n          \"       so    options  either there is no rule of law in india or that you re lying either knowingly or unknowingly  under option    feel free to leave  under option    stop lying \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":39}],"source":["dn = pd.concat([d1, d3.drop(columns=['text'])], axis=1)\n","dn_test = pd.concat([d1_test, d3_test.drop(columns=['text'])], axis=1)\n","\n","dn = dn[['text', 'label_1', 'label_3']]\n","dn_test = dn_test[['text', 'label_1', 'label_3']]\n","dn_test"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZOVpp4_j9HsY","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1744709141498,"user_tz":-330,"elapsed":49,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"cc25cfe0-e26d-43de-9a8a-7ca4fdd53a5a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   text  label_1  label_3  \\\n","0         this is our history   for shia and sunni  ...        0        0   \n","1        if this is  grilling  then wht wud u call t...        1        1   \n","2       look at  madam  locals attacked  no religion...        0        0   \n","3       our beloved yogi ji has given money home and...        1        1   \n","4      i gonna kill that bitch   bitvj imma kill you...        1        1   \n","...                                                 ...      ...      ...   \n","6526  “mama let’s research” bitch suck my dick :loud...        0        0   \n","6527  :face_with_tears_of_joy::face_with_tears_of_jo...        0        0   \n","6528  :face_with_tears_of_joy::face_with_tears_of_jo...        0        0   \n","6529  :smiling_face_with_sunglasses: boys only luxur...        1        1   \n","6530  :rolling_on_the_floor_laughing: mfs act like t...        0        0   \n","\n","      label  \n","0         0  \n","1         3  \n","2         0  \n","3         3  \n","4         3  \n","...     ...  \n","6526      0  \n","6527      0  \n","6528      0  \n","6529      3  \n","6530      0  \n","\n","[6531 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-e888526f-9d3d-494c-ad63-fa6869db8752\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label_1</th>\n","      <th>label_3</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>this is our history   for shia and sunni  ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>if this is  grilling  then wht wud u call t...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>look at  madam  locals attacked  no religion...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>our beloved yogi ji has given money home and...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>i gonna kill that bitch   bitvj imma kill you...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6526</th>\n","      <td>“mama let’s research” bitch suck my dick :loud...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6527</th>\n","      <td>:face_with_tears_of_joy::face_with_tears_of_jo...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6528</th>\n","      <td>:face_with_tears_of_joy::face_with_tears_of_jo...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6529</th>\n","      <td>:smiling_face_with_sunglasses: boys only luxur...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>6530</th>\n","      <td>:rolling_on_the_floor_laughing: mfs act like t...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6531 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e888526f-9d3d-494c-ad63-fa6869db8752')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e888526f-9d3d-494c-ad63-fa6869db8752 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e888526f-9d3d-494c-ad63-fa6869db8752');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7c215f3f-56f2-4633-80d7-3a551dc57ad2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7c215f3f-56f2-4633-80d7-3a551dc57ad2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7c215f3f-56f2-4633-80d7-3a551dc57ad2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_6cecf9f7-5a98-4de5-bef0-ef7aa00d61c6\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dn')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_6cecf9f7-5a98-4de5-bef0-ef7aa00d61c6 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dn');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dn","summary":"{\n  \"name\": \"dn\",\n  \"rows\": 6531,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6523,\n        \"samples\": [\n          \" oh well that is homophobic :grinning_face_with_sweat:    nm\",\n          \" shame on you for misinterpreting about word hallelujah    stop doing ur nonsense comedy    \",\n          \"that\\u2019s fucking disgusting    but i guess if you\\u2019re gonna let me choose  burn the bitch since i\\u2019m \\u201ckilling\\u201d it anyways \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":40}],"source":["# Create new label column based on logic\n","def assign_label(row):\n","    label_1 = row['label_1']\n","    label_3 = row['label_3']\n","\n","    # Handle NaN cases (rows with only label_1 or label_3)\n","    if pd.isna(label_1) and pd.isna(label_3):\n","        return np.nan  # Both missing\n","    elif pd.isna(label_1):\n","        # Only label_3 exists (from d3, d3_test)\n","        return 1 if label_3 == 1 else 0  # Treat as binary\n","    elif pd.isna(label_3):\n","        # Only label_1 exists (from d1, d1_test)\n","        return 2 if label_1 == 1 else 0  # Treat as binary\n","    else:\n","        # Both labels exist (unlikely unless datasets overlap)\n","        if label_1 == 0 and label_3 == 0:\n","            return 0\n","        elif label_1 == 0 and label_3 == 1:\n","            return 1\n","        elif label_1 == 1 and label_3 == 0:\n","            return 2\n","        else:  # label_1 == 1 and label_3 == 1\n","            return 3\n","\n","# dn_new=dn.copy()\n","dn['label'] = dn.apply(assign_label, axis=1)\n","\n","# dn_test_new=dn_test.copy()\n","dn_test['label'] = dn_test.apply(assign_label, axis=1)\n","\n","dn"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YSaME4sQ9juc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744709141511,"user_tz":-330,"elapsed":11,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"c1b56287-d8d5-45f6-d07e-c8c65c500b56"},"outputs":[{"output_type":"stream","name":"stdout","text":["label\n","0    4034\n","3    1248\n","1    1125\n","2     124\n","Name: count, dtype: int64\n","label\n","3    450\n","0    395\n","1    238\n","2     24\n","Name: count, dtype: int64\n"]}],"source":["dn = dn[['label', 'text']].copy()\n","dn_test = dn_test[['label', 'text']].copy()\n","dn\n","\n","print(dn['label'].value_counts())\n","print(dn_test['label'].value_counts())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1744709141533,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"l6fD8Ujc8-F8","outputId":"ff6b6f82-f2f8-4b59-8195-e49d9fce8bc5"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0 3 0 ... 0 3 0]\n","6531\n"]}],"source":["y_data1 = dn[\"label\"]\n","# y_data2 = d2[\"label\"]\n","# y_data3 = d3[\"label\"]\n","# # print(y_data)\n","y1 = y_data1.values\n","# y2 = y_data2.values\n","# y3 = y_data3.values\n","print(y1)\n","print(len(y1))\n","# print(y2)\n","# print(len(y2))\n","# print(y3)\n","# print(len(y3))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1744709141537,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"eqcS8s2W-ppD","outputId":"1e38d9de-a788-4b00-9984-de2056a0f956"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0 1 2 3]\n","[4034 1125  124 1248]\n","3.585777777777778\n"]}],"source":["# y1.#\n","unique_values, counts = np.unique(y1, return_counts=True)\n","print(unique_values)\n","print(counts)\n","print(counts[0]/counts[1])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gXAL76qW-fgB"},"outputs":[],"source":["d1 = dn.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"elapsed":248,"status":"ok","timestamp":1744709141786,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"hJNxaadV_ik2","outputId":"2e9ed48c-97c0-4367-f228-9f1c177f0670"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Average Text Length: 112.52273771244832\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Calculate the lengths of each text element\n","text_lengths = d1['text'].str.len()\n","\n","# Create a histogram with bins of size 10\n","plt.hist(text_lengths, bins=range(0, text_lengths.max() + 10, 10))\n","\n","plt.xlabel('Text Length')\n","plt.ylabel('Frequency')\n","plt.title('Distribution of Text Lengths')\n","plt.show()\n","\n","# Calculate and print the average text length\n","average_length = text_lengths.mean()\n","print(f\"Average Text Length: {average_length}\")\n","\n","# Get counts for each bucket of 10\n","bins = range(0, text_lengths.max() + 10, 10)\n","counts, _ = np.histogram(text_lengths, bins=bins)\n","\n","sum=0\n","# Print the counts for each bucket\n","# for i in range(len(bins) - 1):\n","#     sum+=counts[i]\n","#     print(f\"Length {bins[i]}-{bins[i+1]}: {counts[i]} {sum}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":64,"status":"ok","timestamp":1744709141850,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"tsxFCYDbMugS","outputId":"142d5dcf-211f-48b9-ad65-49e97b0c2e7c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0.40474715,  1.45133333, 13.16733871,  1.30829327])"]},"metadata":{},"execution_count":46}],"source":["import numpy as np\n","\n","# Total number of samples\n","total_samples = np.array([4034, 1125, 124, 1248]).sum()\n","\n","# Class frequencies\n","class_freq = np.array([4034, 1125, 124, 1248])\n","\n","# Calculate the class weights\n","class_weights = total_samples / (len(class_freq) * class_freq)\n","class_weights"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"49Soz7wQECpW"},"outputs":[],"source":["from sklearn.metrics import f1_score\n","from tensorflow.keras.callbacks import Callback\n","import numpy as np\n","\n","class MacroF1Callback(Callback):\n","    def __init__(self, val_data):\n","        super().__init__()\n","        self.validation_data = val_data\n","\n","    def on_epoch_end(self, epoch, logs=None):\n","        val_inputs, val_labels = self.validation_data\n","        predictions = self.model.predict(val_inputs)\n","        y_true = np.argmax(val_labels, axis=1)\n","        y_pred = np.argmax(predictions, axis=1)\n","        macro_f1 = f1_score(y_true, y_pred, average='macro')\n","        print(f'\\nEpoch {epoch+1} — Macro F1-score: {macro_f1:.4f}')\n"]},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","import tensorflow as tf\n","from tensorflow.keras.layers import Input, Dense, Bidirectional, GRU, MultiHeadAttention, GlobalAveragePooling1D, Dropout, Lambda\n","from tensorflow.keras.models import Model\n","from transformers import XLMRobertaTokenizer, TFXLMRobertaModel\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, f1_score\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","from tensorflow.keras import backend as K\n","\n","# ======================\n","# CONFIGURATION\n","# ======================\n","MAX_LEN = 100  # Reduced for English text\n","BATCH_SIZE = 32\n","EPOCHS = 5\n","LEARNING_RATE = 5e-4\n","VAL_SPLIT = 0.2\n","CLASS_WEIGHT = {0: 0.504, 1: 1.451, 2: 6, 3: 1.308}  # Adjusted for English class distribution\n","XLM_MODEL_NAME = 'xlm-roberta-base'\n","\n","# ======================\n","# MODEL ARCHITECTURE\n","# ======================\n","\n","class XLMRobertaEmbedding(tf.keras.layers.Layer):\n","    def __init__(self, model_name, **kwargs):\n","        super().__init__(**kwargs)\n","        self.xlm_model = TFXLMRobertaModel.from_pretrained(model_name)\n","\n","        # Freeze all layers of the XLM-Roberta model\n","        for layer in self.xlm_model.layers:\n","            layer.trainable = False\n","\n","    def call(self, inputs):\n","        input_ids, attention_mask = inputs\n","        return self.xlm_model(input_ids=input_ids, attention_mask=attention_mask).last_hidden_state\n","\n","\n","def create_model():\n","    input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids')\n","    attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask')\n","\n","    # XLM-R Embeddings\n","    embeddings = XLMRobertaEmbedding(XLM_MODEL_NAME)([input_ids, attention_mask])\n","\n","    # BiGRU\n","    gru_out = Bidirectional(GRU(512, return_sequences=True))(embeddings)\n","\n","    # Multi-Head Attention\n","    attention = MultiHeadAttention(num_heads=4, key_dim=64)(gru_out, gru_out)\n","\n","    # Pooling + Classification\n","    pooled = GlobalAveragePooling1D()(attention)\n","    dropout = Dropout(0.3)(pooled)\n","    output = Dense(4, activation='softmax')(dropout)\n","\n","    return Model(inputs=[input_ids, attention_mask], outputs=output)\n","\n","\n"],"metadata":{"id":"ANdcQadz0ldS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load dataset (replace with your English data path)\n","english_df = d1\n","\n","# Split data\n","X_train, X_val, y_train, y_val = train_test_split(\n","    english_df['text'].values,\n","    english_df['label'].values,\n","    test_size=VAL_SPLIT,\n","    stratify=english_df['label'],\n","    random_state=42\n",")\n","\n","from tensorflow.keras.utils import to_categorical\n","\n","y_train = to_categorical(y_train, num_classes=4)\n","y_val = to_categorical(y_val, num_classes=4)\n","\n","# Tokenization\n","tokenizer = XLMRobertaTokenizer.from_pretrained(XLM_MODEL_NAME)\n","\n","def preprocess(texts):\n","    return tokenizer(\n","        texts.tolist(),\n","        max_length=MAX_LEN,\n","        truncation=True,\n","        padding='max_length',\n","        return_tensors='tf'\n","    )\n","\n","train_enc = preprocess(X_train)\n","val_enc = preprocess(X_val)\n","\n","# ======================\n","# MODEL TRAINING\n","# ======================\n","model = create_model()\n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=LEARNING_RATE),\n","    loss='categorical_crossentropy',\n","    metrics=['accuracy']\n",")\n","\n","print(\"\\n\\nMODEL SUMMARY\\n\\n\\n\")\n","model.summary()\n","\n","val_data = (\n","    {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","    y_val\n",")\n","\n","# Assuming you have defined or imported the MacroF1Callback class\n","f1_callback = MacroF1Callback(val_data)\n","\n","history = model.fit(\n","    {'input_ids': train_enc['input_ids'], 'attention_mask': train_enc['attention_mask']},\n","    y_train,\n","    validation_data=val_data,\n","    epochs=EPOCHS,\n","    batch_size=BATCH_SIZE,\n","    class_weight=CLASS_WEIGHT,\n","    callbacks=[f1_callback]  # You can uncomment this once defined\n",")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":865},"id":"aCWGnklo1eh7","executionInfo":{"status":"ok","timestamp":1744710752584,"user_tz":-330,"elapsed":442901,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"8420b2a3-fd4a-4db5-8f6e-dbb42fcbf0dc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFXLMRobertaModel: ['lm_head.dense.bias', 'lm_head.layer_norm.bias', 'lm_head.layer_norm.weight', 'lm_head.bias', 'lm_head.dense.weight']\n","- This IS expected if you are initializing TFXLMRobertaModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFXLMRobertaModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n","All the weights of TFXLMRobertaModel were initialized from the PyTorch model.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFXLMRobertaModel for predictions without further training.\n"]},{"output_type":"stream","name":"stdout","text":["\n","\n","MODEL SUMMARY\n","\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"functional_2\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_2\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_ids           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_mask      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ xlm_roberta_embedd… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m768\u001b[0m)  │          \u001b[38;5;34m0\u001b[0m │ input_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n","│ (\u001b[38;5;33mXLMRobertaEmbeddi…\u001b[0m │                   │            │ attention_mask[\u001b[38;5;34m0\u001b[0m… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ bidirectional_2     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1024\u001b[0m) │  \u001b[38;5;34m3,938,304\u001b[0m │ xlm_roberta_embe… │\n","│ (\u001b[38;5;33mBidirectional\u001b[0m)     │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ multi_head_attenti… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1024\u001b[0m) │  \u001b[38;5;34m1,050,368\u001b[0m │ bidirectional_2[\u001b[38;5;34m…\u001b[0m │\n","│ (\u001b[38;5;33mMultiHeadAttentio…\u001b[0m │                   │            │ bidirectional_2[\u001b[38;5;34m…\u001b[0m │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ multi_head_atten… │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout_6 (\u001b[38;5;33mDropout\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ global_average_p… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_2 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)         │      \u001b[38;5;34m4,100\u001b[0m │ dropout_6[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_ids           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_mask      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ xlm_roberta_embedd… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">XLMRobertaEmbeddi…</span> │                   │            │ attention_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ bidirectional_2     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>) │  <span style=\"color: #00af00; text-decoration-color: #00af00\">3,938,304</span> │ xlm_roberta_embe… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)     │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ multi_head_attenti… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>) │  <span style=\"color: #00af00; text-decoration-color: #00af00\">1,050,368</span> │ bidirectional_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MultiHeadAttentio…</span> │                   │            │ bidirectional_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ multi_head_atten… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ global_average_p… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">4,100</span> │ dropout_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m4,992,772\u001b[0m (19.05 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,992,772</span> (19.05 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m4,992,772\u001b[0m (19.05 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,992,772</span> (19.05 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","\u001b[1m164/164\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 344ms/step - accuracy: 0.4331 - loss: 1.2761 - val_accuracy: 0.1905 - val_loss: 1.3011\n","Epoch 2/5\n","\u001b[1m164/164\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m77s\u001b[0m 317ms/step - accuracy: 0.4947 - loss: 1.1711 - val_accuracy: 0.3550 - val_loss: 1.2045\n","Epoch 3/5\n","\u001b[1m164/164\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 322ms/step - accuracy: 0.5544 - loss: 1.1258 - val_accuracy: 0.5585 - val_loss: 1.0288\n","Epoch 4/5\n","\u001b[1m164/164\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 322ms/step - accuracy: 0.5959 - loss: 1.0507 - val_accuracy: 0.6106 - val_loss: 0.9451\n","Epoch 5/5\n","\u001b[1m164/164\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 320ms/step - accuracy: 0.5884 - loss: 0.9449 - val_accuracy: 0.5899 - val_loss: 0.9644\n"]}]},{"cell_type":"code","source":["# Save the trained model\n","model.save('/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/English/task_3_en_xlm_roberta.keras')\n","\n","# Save tokenizer\n","tokenizer.save_pretrained(\"/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/English/Task3_tokenizer_en\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tf0I37Yq1htn","executionInfo":{"status":"ok","timestamp":1744710803204,"user_tz":-330,"elapsed":541,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"98dc1e77-1e4e-4254-d2bc-aae957f38741"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/English/Task3_tokenizer_en/tokenizer_config.json',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/English/Task3_tokenizer_en/special_tokens_map.json',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/English/Task3_tokenizer_en/sentencepiece.bpe.model',\n"," '/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/English/Task3_tokenizer_en/added_tokens.json')"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["\n","# Load the saved model\n","print(\"Loading the saved model...\")\n","loaded_model = tf.keras.models.load_model(\n","    \"/content/drive/MyDrive/NLP_Project/XLM_BiGru_MultiHeadSelfAttention/English/task_3_en_xlm_roberta.keras\",\n","    custom_objects={'XLMRobertaEmbedding': XLMRobertaEmbedding}\n",")\n","\n","# You can proceed to use the `loaded_model` for inference or further training."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tCdFtcCC1kr_","executionInfo":{"status":"ok","timestamp":1744710810085,"user_tz":-330,"elapsed":5240,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"28df7b98-66e5-4183-f0d8-72b10b163641"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Loading the saved model...\n"]},{"output_type":"stream","name":"stderr","text":["Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFXLMRobertaModel: ['lm_head.dense.bias', 'lm_head.layer_norm.bias', 'lm_head.layer_norm.weight', 'lm_head.bias', 'lm_head.dense.weight']\n","- This IS expected if you are initializing TFXLMRobertaModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFXLMRobertaModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n","All the weights of TFXLMRobertaModel were initialized from the PyTorch model.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFXLMRobertaModel for predictions without further training.\n"]}]},{"cell_type":"code","source":["model = loaded_model"],"metadata":{"id":"L0new4oIwXjn"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aYfaa1ASBrMd"},"outputs":[],"source":["\n","# # ======================\n","# # EVALUATION & VISUALIZATION\n","# # ======================\n","# def evaluate_model(model, data, true_labels):\n","#     y_pred = model.predict(data)\n","#     y_pred_labels = (y_pred > 0.5).astype(int)\n","\n","#     print(\"\\nClassification Report:\")\n","#     print(classification_report(true_labels, y_pred_labels))\n","#     print(f\"F1 Score: {f1_score(true_labels, y_pred_labels, average='macro'):.4f}\")\n","\n","# print(\"English Validation Results:\")\n","# evaluate_model(model,\n","#     {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","#     y_val\n","# )\n","\n","from sklearn.metrics import classification_report, f1_score, confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","def evaluate_model(model, data, true_labels, class_names=None):\n","    # Predict probabilities\n","    y_pred = model.predict(data)\n","\n","    # Convert to class labels\n","    y_pred_labels = y_pred.argmax(axis=1)  # Assuming softmax output\n","    true_labels = true_labels.argmax(axis=1) if true_labels.ndim > 1 else true_labels\n","\n","    # Classification report\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(true_labels, y_pred_labels, target_names=class_names))\n","    print(f\"Macro F1 Score: {f1_score(true_labels, y_pred_labels, average='macro'):.4f}\")\n","\n","    # Confusion matrix\n","    cm = confusion_matrix(true_labels, y_pred_labels)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=class_names, yticklabels=class_names)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n"]},{"cell_type":"code","source":["class_names = ['Neutral', 'Gender Abuse', 'Explicit Lang', 'Both']\n","\n","print(\"English Validation Results:\")\n","evaluate_model(\n","    model,\n","    {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","    y_val,\n","    class_names=class_names\n",")\n"],"metadata":{"id":"GY6ZmDzJWjA4","colab":{"base_uri":"https://localhost:8080/","height":842},"executionInfo":{"status":"ok","timestamp":1744710845012,"user_tz":-330,"elapsed":14542,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"2eca6cc2-1ddc-41bd-9203-dbf96a2cf6ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["English Validation Results:\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 287ms/step\n","\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","      Neutral       0.77      0.67      0.72       807\n"," Gender Abuse       0.34      0.48      0.40       225\n","Explicit Lang       0.02      0.04      0.03        25\n","         Both       0.50      0.48      0.49       250\n","\n","     accuracy                           0.59      1307\n","    macro avg       0.41      0.42      0.41      1307\n"," weighted avg       0.63      0.59      0.61      1307\n","\n","Macro F1 Score: 0.4077\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"elapsed":544,"status":"ok","timestamp":1744710854087,"user":{"displayName":"sujal soni","userId":"06744318330685511567"},"user_tz":-330},"id":"LXRmHcnKBtSs","outputId":"1c6c5861-0f9e-4e73-e5cd-bb9a8cc6b966"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["\n","plt.figure(figsize=(12, 4))\n","plt.subplot(1, 2, 1)\n","plt.plot(history.history['accuracy'], label='Train Accuracy')\n","plt.plot(history.history['val_accuracy'], label='Val Accuracy')\n","plt.title('Accuracy Progress')\n","plt.legend()\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(history.history['loss'], label='Train Loss')\n","plt.plot(history.history['val_loss'], label='Val Loss')\n","plt.title('Loss Progress')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"07L2-FcEkgtv"},"outputs":[],"source":["def evaluate_on_test(model, dn_test, tokenizer, max_length=100, class_names=None):\n","    import numpy as np\n","    from sklearn.metrics import classification_report, f1_score, confusion_matrix\n","    import seaborn as sns\n","    import matplotlib.pyplot as plt\n","    from tensorflow.keras.utils import to_categorical\n","\n","    # Tokenize test data\n","    test_enc = tokenizer(\n","        list(dn_test['text']),\n","        truncation=True,\n","        padding='max_length',\n","        max_length=max_length,\n","        return_tensors='tf'\n","    )\n","\n","    # Convert labels to integers if needed\n","    test_labels = dn_test['label'].values\n","    y_true = test_labels\n","\n","    # Predict\n","    y_pred_probs = model.predict({'input_ids': test_enc['input_ids'], 'attention_mask': test_enc['attention_mask']})\n","    y_pred = y_pred_probs.argmax(axis=1)\n","\n","    # Metrics\n","    print(\"\\nTest Set Classification Report:\")\n","    print(classification_report(y_true, y_pred, target_names=class_names))\n","    print(f\"Macro F1 Score: {f1_score(y_true, y_pred, average='macro'):.4f}\")\n","\n","    # Confusion Matrix\n","    cm = confusion_matrix(y_true, y_pred)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=class_names, yticklabels=class_names)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix - Test Set')\n","    plt.show()\n"]},{"cell_type":"code","source":["class_names = ['Neutral', 'Gender Abuse', 'Explicit Lang', 'Both']\n","\n","evaluate_on_test(model, dn_test, tokenizer, class_names=class_names)\n"],"metadata":{"id":"wVbG9uI5WTMm","colab":{"base_uri":"https://localhost:8080/","height":824},"executionInfo":{"status":"ok","timestamp":1744710869621,"user_tz":-330,"elapsed":10717,"user":{"displayName":"sujal soni","userId":"06744318330685511567"}},"outputId":"7c7e1188-849b-410c-af74-3ea6c80bc644"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 217ms/step\n","\n","Test Set Classification Report:\n","               precision    recall  f1-score   support\n","\n","      Neutral       0.57      0.82      0.67       395\n"," Gender Abuse       0.43      0.54      0.48       238\n","Explicit Lang       0.10      0.17      0.12        24\n","         Both       0.77      0.34      0.47       450\n","\n","     accuracy                           0.55      1107\n","    macro avg       0.47      0.47      0.43      1107\n"," weighted avg       0.61      0.55      0.54      1107\n","\n","Macro F1 Score: 0.4348\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"sL8RWu7LZreQ"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}