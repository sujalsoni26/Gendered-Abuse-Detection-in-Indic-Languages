{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":40770,"status":"ok","timestamp":1744551844032,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"ofi3U7-OkPp3","outputId":"2c3e9767-e785-4574-a9fa-b1d0bcd8649c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2248,"status":"ok","timestamp":1744552617936,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"H-tWaOpK9yzb","outputId":"1e822eca-a56e-4ac6-dfc5-c492b8228258"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: emoji in /usr/local/lib/python3.11/dist-packages (2.14.1)\n"]}],"source":["!pip install emoji\n","# !pip install datasets"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"mndrNC668uQP","executionInfo":{"status":"ok","timestamp":1744552617941,"user_tz":-330,"elapsed":2,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":["# Data Handling\n","import os\n","import re\n","import string\n","import numpy as np\n","import pandas as pd\n","from numpy import array\n","from numpy import asarray\n","from numpy import zeros\n","\n","# NLP Preprocessing\n","# import nltk\n","from tensorflow.keras.preprocessing.text import Tokenizer, one_hot\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","# Machine Learning & Model Evaluation\n","from sklearn.model_selection import train_test_split\n","# from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics import (\n","    classification_report, f1_score, precision_score, recall_score,\n","    confusion_matrix, accuracy_score\n",")\n","# from skmultilearn.adapt import MLkNN\n","\n","# Deep Learning (Keras & TensorFlow)\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import (\n","    Embedding, LSTM, GRU, SimpleRNN, Dense, Dropout, Activation, Concatenate\n",")\n","from tensorflow.keras.optimizers import Adam\n","# from tensorflow.keras.losses import MeanSquaredError\n","from tensorflow.keras.utils import to_categorical\n","\n","# Visualization\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import emoji\n"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"DiVADZM88vsW","executionInfo":{"status":"ok","timestamp":1744552618536,"user_tz":-330,"elapsed":93,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":["d1= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_en_l1.csv')\n","d3= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_en_l3.csv')\n","\n","d1_test= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/testing/test_en_l1.csv')\n","d3_test= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/testing/test_en_l3.csv')\n"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"qxp_3tAd83lH","executionInfo":{"status":"ok","timestamp":1744552619263,"user_tz":-330,"elapsed":3,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":[]},{"cell_type":"code","execution_count":14,"metadata":{"id":"sOqst0Nq8yG6","executionInfo":{"status":"ok","timestamp":1744552621454,"user_tz":-330,"elapsed":1593,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":["def normalize_text(text):\n","  # emoji_pattern = re.compile(\"[\"\n","  #                             u\"\\U0001F600-\\U0001F64F\"  # emoticons\n","  #                             u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n","  #                             u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n","  #                             u\"\\U0001F700-\\U0001F77F\"  # alchemical symbols\n","  #                             u\"\\U0001F780-\\U0001F7FF\"  # Geometric Shapes Extended\n","  #                             u\"\\U0001F800-\\U0001F8FF\"  # Supplemental Arrows-C\n","  #                             u\"\\U0001F900-\\U0001F9FF\"  # Supplemental Symbols and Pictographs\n","  #                             u\"\\U0001FA00-\\U0001FA6F\"  # Chess Symbols\n","  #                             u\"\\U0001FA70-\\U0001FAFF\"  # Symbols and Pictographs Extended-A\n","  #                             u\"\\U00002702-\\U000027B0\"  # Dingbats\n","  #                             u\"\\U000024C2-\\U0001F251\"\n","  #                             \"]+\", flags=re.UNICODE)\n","  text = text.lower()\n","  text = re.sub('\\[.*?\\]', ' ', text)\n","  text = re.sub('https?://\\S+|www\\.\\S+', ' ', text)\n","  text = re.sub('<.*?>+', ' ', text)\n","  text = re.sub('[%s]' % re.escape(string.punctuation), ' ', text)\n","  text = re.sub('\\n', ' ', text)\n","  text = re.sub('\\w*\\d\\w*', ' ', text)\n","  text = re.sub('<handle replaced>', '', text)\n","  text = emoji.demojize(text)\n","  text = text.replace(\"ðŸ¤§\", \" \")\n","  text = text.replace(\"&amp;\", \" \")\n","  text = text.replace(\"\\n\", \" \")\n","  text = text.replace(\"ðŸ˜¡\", \" \")\n","  # text = emoji_pattern.sub(r'', text)\n","  return text\n","\n","d1['text'] = d1['text'].apply(lambda x: normalize_text(x))\n","d1_test['text'] = d1_test['text'].apply(lambda x: normalize_text(x))\n","\n","d3['text'] = d3['text'].apply(lambda x: normalize_text(x))\n","d3_test['text'] = d3_test['text'].apply(lambda x: normalize_text(x))"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":2323,"status":"ok","timestamp":1744552623774,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"mWgpPVgh823Q","outputId":"0397b20d-56de-4157-bee1-203de58ac469"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   text         key  label_1\n","0         this is our history   for shia and sunni  ...  question_1        0\n","1        if this is  grilling  then wht wud u call t...  question_1        1\n","2       look at  madam  locals attacked  no religion...  question_1        0\n","3       our beloved yogi ji has given money home and...  question_1        1\n","4      i gonna kill that bitch   bitvj imma kill you...  question_1        1\n","...                                                 ...         ...      ...\n","6526  “mama let’s research” bitch suck my dick :loud...  question_1        0\n","6527  :face_with_tears_of_joy::face_with_tears_of_jo...  question_1        0\n","6528  :face_with_tears_of_joy::face_with_tears_of_jo...  question_1        0\n","6529  :smiling_face_with_sunglasses: boys only luxur...  question_1        1\n","6530  :rolling_on_the_floor_laughing: mfs act like t...  question_1        0\n","\n","[6531 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-afed1712-fc7c-4617-a772-332a7c429972\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>key</th>\n","      <th>label_1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>this is our history   for shia and sunni  ...</td>\n","      <td>question_1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>if this is  grilling  then wht wud u call t...</td>\n","      <td>question_1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>look at  madam  locals attacked  no religion...</td>\n","      <td>question_1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>our beloved yogi ji has given money home and...</td>\n","      <td>question_1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>i gonna kill that bitch   bitvj imma kill you...</td>\n","      <td>question_1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6526</th>\n","      <td>“mama let’s research” bitch suck my dick :loud...</td>\n","      <td>question_1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6527</th>\n","      <td>:face_with_tears_of_joy::face_with_tears_of_jo...</td>\n","      <td>question_1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6528</th>\n","      <td>:face_with_tears_of_joy::face_with_tears_of_jo...</td>\n","      <td>question_1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6529</th>\n","      <td>:smiling_face_with_sunglasses: boys only luxur...</td>\n","      <td>question_1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6530</th>\n","      <td>:rolling_on_the_floor_laughing: mfs act like t...</td>\n","      <td>question_1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6531 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-afed1712-fc7c-4617-a772-332a7c429972')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-afed1712-fc7c-4617-a772-332a7c429972 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-afed1712-fc7c-4617-a772-332a7c429972');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-36b308e4-6d22-45d0-8b82-d7fd28cbfb81\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-36b308e4-6d22-45d0-8b82-d7fd28cbfb81')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-36b308e4-6d22-45d0-8b82-d7fd28cbfb81 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a4869d36-f0e5-44e2-8898-d2aa69608a85\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('d1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a4869d36-f0e5-44e2-8898-d2aa69608a85 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('d1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"d1","summary":"{\n  \"name\": \"d1\",\n  \"rows\": 6531,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6523,\n        \"samples\": [\n          \" oh well that is homophobic :grinning_face_with_sweat:    nm\",\n          \" shame on you for misinterpreting about word hallelujah    stop doing ur nonsense comedy    \",\n          \"that\\u2019s fucking disgusting    but i guess if you\\u2019re gonna let me choose  burn the bitch since i\\u2019m \\u201ckilling\\u201d it anyways \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"key\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"question_1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}],"source":["X1 = list(d1['text'])\n","X1_test = list(d1_test['text'])\n","X3 = list(d3['text'])\n","X3_test = list(d3_test['text'])\n","\n","col_lst = ['en_a1', 'en_a2', 'en_a3', 'en_a4', 'en_a5', 'en_a6']\n","for col in col_lst:\n","    d1[col] = pd.to_numeric(d1[col], errors='coerce')\n","    d1_test[col] = pd.to_numeric(d1_test[col], errors='coerce')\n","\n","    d3[col] = pd.to_numeric(d3[col], errors='coerce')\n","    d3_test[col] = pd.to_numeric(d3_test[col], errors='coerce')\n","\n","\n","def majority_label(row):\n","    ones = (row == 1).sum()\n","    zeros = (row == 0).sum()\n","    if ones >= zeros:\n","        return 1\n","    elif zeros > ones:\n","        return 0\n","    return 0\n","\n","d1['label_1'] = d1[col_lst].apply(majority_label, axis=1)\n","d1_test['label_1'] = d1_test[col_lst].apply(majority_label, axis=1)\n","\n","d3['label_3'] = d3[col_lst].apply(majority_label, axis=1)\n","d3_test['label_3'] = d3_test[col_lst].apply(majority_label, axis=1)\n","\n","# d3['label_3'] = d3[col_lst].max(axis=1, skipna=True).astype(int)\n","# d3_test['label_3'] = d3_test[col_lst].max(axis=1, skipna=True).astype(int)\n","\n","\n","d1 = d1.drop(col_lst, axis=1)\n","d1_test = d1_test.drop(col_lst, axis=1)\n","d3 = d3.drop(col_lst, axis=1)\n","d3_test = d3_test.drop(col_lst, axis=1)\n","\n","# d1\n"]},{"cell_type":"code","source":["d1['label_1'] = d1['label_1'].astype(int)\n","d1_test['label_1'] = d1_test['label_1'].astype(int)\n","d3['label_3'] = d3['label_3'].astype(int)\n","d3_test['label_3'] = d3_test['label_3'].astype(int)\n","\n","\n","d1 = d1[['label_1', 'text']]\n","d1_test = d1_test[['label_1', 'text']]\n","d1_test\n","\n","d3 = d3[['label_3', 'text']]\n","d3_test = d3_test[['label_3', 'text']]\n","d3_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"tQdjrD_KcOwU","executionInfo":{"status":"ok","timestamp":1744552688293,"user_tz":-330,"elapsed":42,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}},"outputId":"bb262eb1-e996-433b-9bc2-c04f64198d25"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      label_3                                               text\n","0           0   who s this tweet about  bitch it s about you ...\n","1           0   alkalamba should’ve used her slippers to slap...\n","2           1   coronavillains   covididiot      is a      do...\n","3           1   acts      like the female  governors  of stat...\n","4           0     let us celebrate “secular” as a beautiful w...\n","...       ...                                                ...\n","1102        1  you should be tired of not having any kind of ...\n","1103        0  “the limits of tyrants are prescribed by the e...\n","1104        0  :Cancer::crab: like wtf my symbol is   and i’m...\n","1105        1  :United_States:  marry a millionaire guy  divo...\n","1106        0  :face_with_tears_of_joy: slim could take over ...\n","\n","[1107 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-c9d08bfd-486e-45e9-a06f-cf4c50352137\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label_3</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>who s this tweet about  bitch it s about you ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>alkalamba should’ve used her slippers to slap...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>coronavillains   covididiot      is a      do...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>acts      like the female  governors  of stat...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>let us celebrate “secular” as a beautiful w...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1102</th>\n","      <td>1</td>\n","      <td>you should be tired of not having any kind of ...</td>\n","    </tr>\n","    <tr>\n","      <th>1103</th>\n","      <td>0</td>\n","      <td>“the limits of tyrants are prescribed by the e...</td>\n","    </tr>\n","    <tr>\n","      <th>1104</th>\n","      <td>0</td>\n","      <td>:Cancer::crab: like wtf my symbol is   and i’m...</td>\n","    </tr>\n","    <tr>\n","      <th>1105</th>\n","      <td>1</td>\n","      <td>:United_States:  marry a millionaire guy  divo...</td>\n","    </tr>\n","    <tr>\n","      <th>1106</th>\n","      <td>0</td>\n","      <td>:face_with_tears_of_joy: slim could take over ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1107 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9d08bfd-486e-45e9-a06f-cf4c50352137')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c9d08bfd-486e-45e9-a06f-cf4c50352137 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c9d08bfd-486e-45e9-a06f-cf4c50352137');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4a3b8f0e-afe3-4b39-933e-a24b1750a258\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4a3b8f0e-afe3-4b39-933e-a24b1750a258')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4a3b8f0e-afe3-4b39-933e-a24b1750a258 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_cade9b1b-54bb-4a54-b91a-62e413466d78\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('d3_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_cade9b1b-54bb-4a54-b91a-62e413466d78 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('d3_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"d3_test","summary":"{\n  \"name\": \"d3_test\",\n  \"rows\": 1107,\n  \"fields\": [\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1107,\n        \"samples\": [\n          \" pissfull snakes :snake: traitors\",\n          \"had to cut that hoe off cause the bitch was steady bitchin\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":62,"status":"ok","timestamp":1744552692630,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"oMiDSNhQ9Fjj","outputId":"2a1b1d9b-5223-44c9-c85b-857d309fee65"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   text  label_1  label_3\n","0      who s this tweet about  bitch it s about you ...        0        0\n","1      alkalamba should’ve used her slippers to slap...        0        0\n","2      coronavillains   covididiot      is a      do...        1        1\n","3      acts      like the female  governors  of stat...        1        1\n","4        let us celebrate “secular” as a beautiful w...        0        0\n","...                                                 ...      ...      ...\n","1102  you should be tired of not having any kind of ...        1        1\n","1103  “the limits of tyrants are prescribed by the e...        0        0\n","1104  :Cancer::crab: like wtf my symbol is   and i’m...        0        0\n","1105  :United_States:  marry a millionaire guy  divo...        1        1\n","1106  :face_with_tears_of_joy: slim could take over ...        0        0\n","\n","[1107 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-773a1289-15da-457b-8d2e-97cd772b1845\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label_1</th>\n","      <th>label_3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>who s this tweet about  bitch it s about you ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>alkalamba should’ve used her slippers to slap...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>coronavillains   covididiot      is a      do...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>acts      like the female  governors  of stat...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>let us celebrate “secular” as a beautiful w...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1102</th>\n","      <td>you should be tired of not having any kind of ...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1103</th>\n","      <td>“the limits of tyrants are prescribed by the e...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1104</th>\n","      <td>:Cancer::crab: like wtf my symbol is   and i’m...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1105</th>\n","      <td>:United_States:  marry a millionaire guy  divo...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1106</th>\n","      <td>:face_with_tears_of_joy: slim could take over ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1107 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-773a1289-15da-457b-8d2e-97cd772b1845')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-773a1289-15da-457b-8d2e-97cd772b1845 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-773a1289-15da-457b-8d2e-97cd772b1845');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-73d00c8d-b1f1-4486-a8e8-5394d6149d43\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-73d00c8d-b1f1-4486-a8e8-5394d6149d43')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-73d00c8d-b1f1-4486-a8e8-5394d6149d43 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a31039d6-a6c9-4c02-b0fe-4bba89d51ac0\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dn_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a31039d6-a6c9-4c02-b0fe-4bba89d51ac0 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dn_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dn_test","summary":"{\n  \"name\": \"dn_test\",\n  \"rows\": 1107,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1107,\n        \"samples\": [\n          \" pissfull snakes :snake: traitors\",\n          \"had to cut that hoe off cause the bitch was steady bitchin\",\n          \"       so    options  either there is no rule of law in india or that you re lying either knowingly or unknowingly  under option    feel free to leave  under option    stop lying \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":17}],"source":["\n","dn = pd.concat([d1, d3.drop(columns=['text'])], axis=1)\n","dn_test = pd.concat([d1_test, d3_test.drop(columns=['text'])], axis=1)\n","\n","dn = dn[['text', 'label_1', 'label_3']]\n","dn_test = dn_test[['text', 'label_1', 'label_3']]\n","dn_test"]},{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":51,"status":"ok","timestamp":1744552701721,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"ZOVpp4_j9HsY"},"outputs":[],"source":["# # Create new label column based on logic\n","# def assign_label(row):\n","#     label_1 = row['label_1']\n","#     label_3 = row['label_3']\n","\n","#     # Handle NaN cases (rows with only label_1 or label_3)\n","#     if pd.isna(label_1) and pd.isna(label_3):\n","#         return np.nan  # Both missing\n","#     elif pd.isna(label_1):\n","#         # Only label_3 exists (from d3, d3_test)\n","#         return 1 if label_3 == 1 else 0  # Treat as binary\n","#     elif pd.isna(label_3):\n","#         # Only label_1 exists (from d1, d1_test)\n","#         return 2 if label_1 == 1 else 0  # Treat as binary\n","#     else:\n","#         # Both labels exist (unlikely unless datasets overlap)\n","#         if label_1 == 0 and label_3 == 0:\n","#             return 0\n","#         elif label_1 == 0 and label_3 == 1:\n","#             return 1\n","#         elif label_1 == 1 and label_3 == 0:\n","#             return 2\n","#         else:  # label_1 == 1 and label_3 == 1\n","#             return 3\n","\n","# # dn_new=dn.copy()\n","# dn['label'] = dn.apply(assign_label, axis=1)\n","\n","# # dn_test_new=dn_test.copy()\n","# dn_test['label'] = dn_test.apply(assign_label, axis=1)\n","\n","# dn"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1744552702688,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"YSaME4sQ9juc","outputId":"4e4a6a9f-54f8-41ac-9d08-769a0b7cd423"},"outputs":[{"output_type":"stream","name":"stdout","text":["label_1\n","0    5159\n","1    1372\n","Name: count, dtype: int64\n","label_3\n","0    4159\n","1    2372\n","Name: count, dtype: int64\n","label_1\n","0    877\n","1    230\n","Name: count, dtype: int64\n","label_3\n","0    699\n","1    408\n","Name: count, dtype: int64\n"]}],"source":["# dn = dn[['label', 'text']].copy()\n","# dn_test = dn_test[['label', 'text']].copy()\n","# dn\n","\n","print(dn['label_1'].value_counts())\n","print(dn['label_3'].value_counts())\n","print(dn_test['label_1'].value_counts())\n","print(dn_test['label_3'].value_counts())"]},{"cell_type":"code","execution_count":20,"metadata":{"executionInfo":{"elapsed":41,"status":"ok","timestamp":1744552753666,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"l6fD8Ujc8-F8"},"outputs":[],"source":["# y_data1 = dn[\"label\"]\n","# # y_data2 = d2[\"label\"]\n","# # y_data3 = d3[\"label\"]\n","# # # print(y_data)\n","# y1 = y_data1.values\n","# # y2 = y_data2.values\n","# # y3 = y_data3.values\n","# print(y1)\n","# print(len(y1))\n","# # print(y2)\n","# # print(len(y2))\n","# # print(y3)\n","# # print(len(y3))"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":30,"status":"ok","timestamp":1744552762114,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"eqcS8s2W-ppD"},"outputs":[],"source":["# # y1.#\n","# unique_values, counts = np.unique(y1, return_counts=True)\n","# print(unique_values)\n","# print(counts)\n","# print(counts[0]/counts[1])\n"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"gXAL76qW-fgB","executionInfo":{"status":"ok","timestamp":1744552768759,"user_tz":-330,"elapsed":2,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":["d1 = dn.copy()"]},{"cell_type":"code","source":["# Create multi-label column\n","d1['labels'] = d1[['label_1', 'label_3']].values.tolist()\n","d1\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"CYFj8m-EdhK-","executionInfo":{"status":"ok","timestamp":1744553003064,"user_tz":-330,"elapsed":51,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}},"outputId":"61014e8f-a61b-4bbc-d294-304abef7ff29"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   text  label_1  label_3  \\\n","0         this is our history   for shia and sunni  ...        0        0   \n","1        if this is  grilling  then wht wud u call t...        1        1   \n","2       look at  madam  locals attacked  no religion...        0        0   \n","3       our beloved yogi ji has given money home and...        1        1   \n","4      i gonna kill that bitch   bitvj imma kill you...        1        1   \n","...                                                 ...      ...      ...   \n","6526  “mama let’s research” bitch suck my dick :loud...        0        0   \n","6527  :face_with_tears_of_joy::face_with_tears_of_jo...        0        0   \n","6528  :face_with_tears_of_joy::face_with_tears_of_jo...        0        0   \n","6529  :smiling_face_with_sunglasses: boys only luxur...        1        1   \n","6530  :rolling_on_the_floor_laughing: mfs act like t...        0        0   \n","\n","      labels  \n","0     [0, 0]  \n","1     [1, 1]  \n","2     [0, 0]  \n","3     [1, 1]  \n","4     [1, 1]  \n","...      ...  \n","6526  [0, 0]  \n","6527  [0, 0]  \n","6528  [0, 0]  \n","6529  [1, 1]  \n","6530  [0, 0]  \n","\n","[6531 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-e419a09b-082d-40f9-851b-2ae5555aaea9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label_1</th>\n","      <th>label_3</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>this is our history   for shia and sunni  ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>[0, 0]</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>if this is  grilling  then wht wud u call t...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>[1, 1]</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>look at  madam  locals attacked  no religion...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>[0, 0]</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>our beloved yogi ji has given money home and...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>[1, 1]</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>i gonna kill that bitch   bitvj imma kill you...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>[1, 1]</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6526</th>\n","      <td>“mama let’s research” bitch suck my dick :loud...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>[0, 0]</td>\n","    </tr>\n","    <tr>\n","      <th>6527</th>\n","      <td>:face_with_tears_of_joy::face_with_tears_of_jo...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>[0, 0]</td>\n","    </tr>\n","    <tr>\n","      <th>6528</th>\n","      <td>:face_with_tears_of_joy::face_with_tears_of_jo...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>[0, 0]</td>\n","    </tr>\n","    <tr>\n","      <th>6529</th>\n","      <td>:smiling_face_with_sunglasses: boys only luxur...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>[1, 1]</td>\n","    </tr>\n","    <tr>\n","      <th>6530</th>\n","      <td>:rolling_on_the_floor_laughing: mfs act like t...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>[0, 0]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6531 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e419a09b-082d-40f9-851b-2ae5555aaea9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e419a09b-082d-40f9-851b-2ae5555aaea9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e419a09b-082d-40f9-851b-2ae5555aaea9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5d16534c-0fae-4e22-bd5d-8aebb3f55f29\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5d16534c-0fae-4e22-bd5d-8aebb3f55f29')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5d16534c-0fae-4e22-bd5d-8aebb3f55f29 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f38bfaf1-0118-4e06-af23-6c4249444d8e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('d1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f38bfaf1-0118-4e06-af23-6c4249444d8e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('d1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"d1","summary":"{\n  \"name\": \"d1\",\n  \"rows\": 6531,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6523,\n        \"samples\": [\n          \" oh well that is homophobic :grinning_face_with_sweat:    nm\",\n          \" shame on you for misinterpreting about word hallelujah    stop doing ur nonsense comedy    \",\n          \"that\\u2019s fucking disgusting    but i guess if you\\u2019re gonna let me choose  burn the bitch since i\\u2019m \\u201ckilling\\u201d it anyways \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"labels\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":24}]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"elapsed":348,"status":"ok","timestamp":1744552784890,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"hJNxaadV_ik2","outputId":"e67f7da5-4404-49d7-c180-9e8fd338bc42"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Average Text Length: 112.52273771244832\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Calculate the lengths of each text element\n","text_lengths = d1['text'].str.len()\n","\n","# Create a histogram with bins of size 10\n","plt.hist(text_lengths, bins=range(0, text_lengths.max() + 10, 10))\n","\n","plt.xlabel('Text Length')\n","plt.ylabel('Frequency')\n","plt.title('Distribution of Text Lengths')\n","plt.show()\n","\n","# Calculate and print the average text length\n","average_length = text_lengths.mean()\n","print(f\"Average Text Length: {average_length}\")\n","\n","# Get counts for each bucket of 10\n","bins = range(0, text_lengths.max() + 10, 10)\n","counts, _ = np.histogram(text_lengths, bins=bins)\n","\n","sum=0\n","# Print the counts for each bucket\n","# for i in range(len(bins) - 1):\n","#     sum+=counts[i]\n","#     print(f\"Length {bins[i]}-{bins[i+1]}: {counts[i]} {sum}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":44,"status":"ok","timestamp":1744531816727,"user":{"displayName":"Sujal Soni","userId":"00761747243758695910"},"user_tz":-330},"id":"tsxFCYDbMugS","outputId":"23023b24-f2c4-4f57-a71d-27f8d2c3c615"},"outputs":[{"data":{"text/plain":["array([ 0.40474715,  1.45133333, 13.16733871,  1.30829327])"]},"execution_count":37,"metadata":{},"output_type":"execute_result"}],"source":["# import numpy as np\n","\n","# # Total number of samples\n","# total_samples = np.array([4034, 1125, 124, 1248]).sum()\n","\n","# # Class frequencies\n","# class_freq = np.array([4034, 1125, 124, 1248])\n","\n","# # Calculate the class weights\n","# class_weights = total_samples / (len(class_freq) * class_freq)\n","# class_weights"]},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","import tensorflow as tf\n","from tensorflow.keras.layers import Input, Dense, Bidirectional, GRU, Dropout, GlobalAveragePooling1D, MultiHeadAttention, Lambda\n","from tensorflow.keras.models import Model\n","from transformers import XLMRobertaTokenizer, TFXLMRobertaModel\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, f1_score, confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import numpy as np\n","import pandas as pd\n","\n","# ======================\n","# CONFIGURATION\n","# ======================\n","MAX_LEN = 100\n","BATCH_SIZE = 16\n","EPOCHS = 5\n","LEARNING_RATE = 2e-6\n","VAL_SPLIT = 0.2\n","XLM_MODEL_NAME = 'xlm-roberta-base'\n","CLASS_NAMES = ['Gender Abuse', 'Explicit Language']\n","\n","# ======================\n","# CALLBACK FOR F1 SCORE\n","# ======================\n","from tensorflow.keras.callbacks import Callback\n","\n","class MacroF1Callback(Callback):\n","    def __init__(self, val_data):\n","        super().__init__()\n","        self.validation_data = val_data\n","\n","    def on_epoch_end(self, epoch, logs=None):\n","        val_inputs, val_labels = self.validation_data\n","        predictions = self.model.predict(val_inputs)\n","        y_pred = (predictions > 0.25).astype(int)\n","        macro_f1 = f1_score(val_labels, y_pred, average='macro')\n","        print(f'\\nEpoch {epoch+1} — Macro F1-score: {macro_f1:.4f}')\n","        print(predictions[:10])\n","\n","# ======================\n","# MODEL ARCHITECTURE\n","# ======================\n","def create_model():\n","    input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids')\n","    attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask')\n","\n","    xlm_model = TFXLMRobertaModel.from_pretrained(XLM_MODEL_NAME)\n","\n","    # for i in range(6):\n","    #     xlm_model.roberta.encoder.layer[i].trainable = False\n","\n","    def xlm_embed(inputs):\n","        input_ids, attention_mask = inputs\n","        outputs = xlm_model(input_ids=input_ids, attention_mask=attention_mask)\n","        return outputs.last_hidden_state\n","\n","    embeddings = Lambda(xlm_embed, output_shape=(MAX_LEN, 768))([input_ids, attention_mask])\n","    gru_out = Bidirectional(GRU(1024, return_sequences=True))(embeddings)\n","    # attention = MultiHeadAttention(num_heads=4, key_dim=64)(gru_out, gru_out)\n","    attention = MultiHeadAttention(num_heads=4, key_dim=64)(gru_out, gru_out)\n","    attention_proj = Dense(1024)(attention)  # Optional if needed\n","    pooled = GlobalAveragePooling1D()(attention_proj)\n","    dropout = Dropout(0.3)(pooled)\n","    output = Dense(2, activation='sigmoid')(dropout)  # Multi-label\n","\n","    return Model(inputs=[input_ids, attention_mask], outputs=output)\n","\n"],"metadata":{"id":"PbQxB4cLeMms","executionInfo":{"status":"ok","timestamp":1744557805394,"user_tz":-330,"elapsed":28,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["# ======================\n","# LOAD + PREPROCESS DATA\n","# ======================\n","# Assuming d1 has columns: text, label_1, label_3\n","df = d1[['text', 'label_1', 'label_3']].copy()\n","df = df.dropna(subset=['text'])  # Drop missing texts if any\n","\n","X = df['text'].values\n","y = df[['label_1', 'label_3']].values.astype(int)\n","\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X, y, test_size=VAL_SPLIT, random_state=42\n",")\n","\n","print(\"Train label distribution:\\n\", pd.DataFrame(y_train, columns=CLASS_NAMES).sum())\n","\n","tokenizer = XLMRobertaTokenizer.from_pretrained(XLM_MODEL_NAME)\n","\n","def preprocess(texts):\n","    return tokenizer(\n","        texts.tolist(),\n","        max_length=MAX_LEN,\n","        truncation=True,\n","        padding='max_length',\n","        return_tensors='tf'\n","    )\n","\n","train_enc = preprocess(X_train)\n","val_enc = preprocess(X_val)\n","\n","# ======================\n","# TRAIN MODEL\n","# ======================\n","model = create_model()\n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(LEARNING_RATE),\n","    loss='binary_crossentropy',  # For multi-label\n","    metrics=['accuracy']\n",")\n","\n","model.summary()\n","\n","val_data = (\n","    {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","    y_val\n",")\n","\n","f1_callback = MacroF1Callback(val_data)\n","history = model.fit(\n","    {'input_ids': train_enc['input_ids'], 'attention_mask': train_enc['attention_mask']},\n","    y_train,\n","    validation_data=val_data,\n","    epochs=EPOCHS,\n","    batch_size=BATCH_SIZE,\n","    callbacks=[f1_callback]\n",")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"H6u7z2U9eVkn","executionInfo":{"status":"ok","timestamp":1744558496390,"user_tz":-330,"elapsed":690257,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}},"outputId":"fb766470-4b9a-4a89-ff1e-312efca2d9e5"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Train label distribution:\n"," Gender Abuse         1121\n","Explicit Language    1910\n","dtype: int64\n"]},{"output_type":"stream","name":"stderr","text":["Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFXLMRobertaModel: ['lm_head.layer_norm.weight', 'lm_head.dense.weight', 'lm_head.dense.bias', 'lm_head.layer_norm.bias', 'lm_head.bias']\n","- This IS expected if you are initializing TFXLMRobertaModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFXLMRobertaModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n","All the weights of TFXLMRobertaModel were initialized from the PyTorch model.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFXLMRobertaModel for predictions without further training.\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"functional_5\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_5\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_ids           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_mask      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lambda_6 (\u001b[38;5;33mLambda\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m768\u001b[0m)  │          \u001b[38;5;34m0\u001b[0m │ input_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n","│                     │                   │            │ attention_mask[\u001b[38;5;34m0\u001b[0m… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ bidirectional_5     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m2048\u001b[0m) │ \u001b[38;5;34m11,022,336\u001b[0m │ lambda_6[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","│ (\u001b[38;5;33mBidirectional\u001b[0m)     │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ multi_head_attenti… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m2048\u001b[0m) │  \u001b[38;5;34m2,099,968\u001b[0m │ bidirectional_5[\u001b[38;5;34m…\u001b[0m │\n","│ (\u001b[38;5;33mMultiHeadAttentio…\u001b[0m │                   │            │ bidirectional_5[\u001b[38;5;34m…\u001b[0m │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_7 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1024\u001b[0m) │  \u001b[38;5;34m2,098,176\u001b[0m │ multi_head_atten… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ dense_7[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout_11          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ global_average_p… │\n","│ (\u001b[38;5;33mDropout\u001b[0m)           │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_8 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │      \u001b[38;5;34m2,050\u001b[0m │ dropout_11[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_ids           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_mask      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lambda_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n","│                     │                   │            │ attention_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ bidirectional_5     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>) │ <span style=\"color: #00af00; text-decoration-color: #00af00\">11,022,336</span> │ lambda_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)     │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ multi_head_attenti… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>) │  <span style=\"color: #00af00; text-decoration-color: #00af00\">2,099,968</span> │ bidirectional_5[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MultiHeadAttentio…</span> │                   │            │ bidirectional_5[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>) │  <span style=\"color: #00af00; text-decoration-color: #00af00\">2,098,176</span> │ multi_head_atten… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dense_7[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout_11          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ global_average_p… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)           │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">2,050</span> │ dropout_11[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m15,222,530\u001b[0m (58.07 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">15,222,530</span> (58.07 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m15,222,530\u001b[0m (58.07 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">15,222,530</span> (58.07 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 307ms/step\n","\n","Epoch 1 — Macro F1-score: 0.2612\n","[[0.21520159 0.35146767]\n"," [0.21871652 0.35403395]\n"," [0.21954024 0.35515165]\n"," [0.2145547  0.35027504]\n"," [0.21833041 0.35428792]\n"," [0.22050731 0.3529519 ]\n"," [0.21481068 0.3509756 ]\n"," [0.21567596 0.35204074]\n"," [0.21708076 0.3529339 ]\n"," [0.22091036 0.35232177]]\n","\u001b[1m327/327\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m127s\u001b[0m 340ms/step - accuracy: 0.1935 - loss: 0.6291 - val_accuracy: 0.1790 - val_loss: 0.5705\n","Epoch 2/5\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 229ms/step\n","\n","Epoch 2 — Macro F1-score: 0.2612\n","[[0.21871749 0.37391612]\n"," [0.2245383  0.378972  ]\n"," [0.22562729 0.38100275]\n"," [0.2171459  0.37144855]\n"," [0.22356936 0.37917125]\n"," [0.22983928 0.37962627]\n"," [0.21741515 0.372408  ]\n"," [0.21870354 0.37431797]\n"," [0.22166803 0.37688392]\n"," [0.23030159 0.3787769 ]]\n","\u001b[1m327/327\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m128s\u001b[0m 296ms/step - accuracy: 0.1686 - loss: 0.5817 - val_accuracy: 0.1790 - val_loss: 0.5713\n","Epoch 3/5\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 230ms/step\n","\n","Epoch 3 — Macro F1-score: 0.2689\n","[[0.22919203 0.37405065]\n"," [0.23679006 0.38157573]\n"," [0.23836216 0.3848924 ]\n"," [0.22682364 0.3702861 ]\n"," [0.23564443 0.38211387]\n"," [0.24431098 0.38273817]\n"," [0.22719167 0.37167165]\n"," [0.2288377  0.37449658]\n"," [0.23309866 0.37869897]\n"," [0.24480587 0.38162845]]\n","\u001b[1m327/327\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 298ms/step - accuracy: 0.1802 - loss: 0.5838 - val_accuracy: 0.1790 - val_loss: 0.5724\n","Epoch 4/5\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 231ms/step\n","\n","Epoch 4 — Macro F1-score: 0.2612\n","[[0.20426174 0.35878822]\n"," [0.2133112  0.36947593]\n"," [0.215538   0.3744142 ]\n"," [0.20117581 0.35339305]\n"," [0.21229866 0.37051782]\n"," [0.22233239 0.37105113]\n"," [0.20171572 0.35539106]\n"," [0.20370536 0.35934228]\n"," [0.20907451 0.36564586]\n"," [0.2228372  0.36974654]]\n","\u001b[1m327/327\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m133s\u001b[0m 271ms/step - accuracy: 0.1634 - loss: 0.5926 - val_accuracy: 0.1790 - val_loss: 0.5693\n","Epoch 5/5\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 228ms/step\n","\n","Epoch 5 — Macro F1-score: 0.2612\n","[[0.18409087 0.3414707 ]\n"," [0.19434579 0.35600188]\n"," [0.19752377 0.36320075]\n"," [0.18022294 0.33389854]\n"," [0.19392188 0.3581085 ]\n"," [0.20358242 0.35673392]\n"," [0.18111315 0.33690998]\n"," [0.18350275 0.3423663 ]\n"," [0.18992501 0.351309  ]\n"," [0.2039795  0.35508764]]\n","\u001b[1m327/327\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m151s\u001b[0m 298ms/step - accuracy: 0.1706 - loss: 0.5855 - val_accuracy: 0.1790 - val_loss: 0.5681\n"]}]},{"cell_type":"code","source":["print(X_train[:5])\n","print(y_train[:5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Okc0ir7pWQT","executionInfo":{"status":"ok","timestamp":1744558496403,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}},"outputId":"e91feb48-cf78-4a6b-b5c8-ac8807f92031"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["[' wicked :face_with_tears_of_joy::thumbs_up::raising_hands::clapping_hands:'\n"," 'simple pay for your forefather s sin s   and don t forgot to thank them for not choosing a path of taking revenge against horrific oppressions  raping dalit women s  making devadasis in the name of god  forcing them to clean shits for centuries      scstact'\n"," ' बहनचोद   sister in law tau will now shoot in the ass of chun chun:rolling_on_the_floor_laughing::rolling_on_the_floor_laughing::rolling_on_the_floor_laughing::rolling_on_the_floor_laughing::rolling_on_the_floor_laughing:'\n"," ' no one except fak people dislike hr    roarlikesana'\n"," 'working   w nadia officials ensuring migrant wkrs fm krishnanagar get rations wherever stuck  migrants dying but where is pan india plan to help w cash in hand  food or any plan b now   starving vs covid can’t be only   available options  modiji']\n","[[1 1]\n"," [0 0]\n"," [1 1]\n"," [0 1]\n"," [0 0]]\n"]}]},{"cell_type":"code","source":["# ======================\n","# EVALUATION\n","# ======================\n","def evaluate_model(model, data, true_labels, class_names=None):\n","    y_pred = model.predict(data)\n","    y_pred_labels = (y_pred > 0.25).astype(int)\n","\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(true_labels, y_pred_labels, target_names=class_names))\n","    print(f\"Macro F1 Score: {f1_score(true_labels, y_pred_labels, average='macro'):.4f}\")\n","\n","    # Plot confusion matrices per label\n","    for i, label in enumerate(class_names):\n","        cm = confusion_matrix(true_labels[:, i], y_pred_labels[:, i])\n","        plt.figure(figsize=(4, 3))\n","        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No', 'Yes'], yticklabels=['No', 'Yes'])\n","        plt.xlabel('Predicted')\n","        plt.ylabel('Actual')\n","        plt.title(f'Confusion Matrix - {label}')\n","        plt.show()\n","\n","evaluate_model(\n","    model,\n","    {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","    y_val,\n","    class_names=CLASS_NAMES\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":947},"id":"XfyH7Gw2fGmF","executionInfo":{"status":"ok","timestamp":1744558506963,"user_tz":-330,"elapsed":10555,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}},"outputId":"1c91aef5-0001-49b9-8f40-faefe9838be7"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 232ms/step\n","\n","Classification Report:\n","                   precision    recall  f1-score   support\n","\n","     Gender Abuse       0.00      0.00      0.00       251\n","Explicit Language       0.35      1.00      0.52       462\n","\n","        micro avg       0.35      0.65      0.46       713\n","        macro avg       0.18      0.50      0.26       713\n","     weighted avg       0.23      0.65      0.34       713\n","      samples avg       0.35      0.27      0.30       713\n","\n","Macro F1 Score: 0.2612\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in samples with no true labels. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"49Soz7wQECpW"},"outputs":[],"source":["# from sklearn.metrics import f1_score\n","# from tensorflow.keras.callbacks import Callback\n","# import numpy as np\n","\n","# class MacroF1Callback(Callback):\n","#     def __init__(self, val_data):\n","#         super().__init__()\n","#         self.validation_data = val_data\n","\n","#     def on_epoch_end(self, epoch, logs=None):\n","#         val_inputs, val_labels = self.validation_data\n","#         predictions = self.model.predict(val_inputs)\n","#         y_true = np.argmax(val_labels, axis=1)\n","#         y_pred = np.argmax(predictions, axis=1)\n","#         macro_f1 = f1_score(y_true, y_pred, average='macro')\n","#         print(f'\\nEpoch {epoch+1} — Macro F1-score: {macro_f1:.4f}')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":1000},"id":"Qt9pw3Yt_c2u","outputId":"e4bf9784-48ea-49a7-99d3-7c153fefe6f5"},"outputs":[{"name":"stderr","output_type":"stream","text":["Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFXLMRobertaModel: ['lm_head.bias', 'lm_head.layer_norm.bias', 'lm_head.layer_norm.weight', 'lm_head.dense.weight', 'lm_head.dense.bias']\n","- This IS expected if you are initializing TFXLMRobertaModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFXLMRobertaModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n","All the weights of TFXLMRobertaModel were initialized from the PyTorch model.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFXLMRobertaModel for predictions without further training.\n"]},{"name":"stdout","output_type":"stream","text":["input_ids True\n","attention_mask True\n","lambda_4 True\n","bidirectional_6 True\n","multi_head_attention_5 True\n","global_average_pooling1d_5 True\n","dropout_11 True\n","dense_5 True\n","\n","\n","MODEL SUMMARY\n","\n","\n","\n"]},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_5\"</span>\n","</pre>\n"],"text/plain":["\u001b[1mModel: \"functional_5\"\u001b[0m\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_ids           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_mask      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lambda_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n","│                     │                   │            │ attention_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ bidirectional_6     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>) │  <span style=\"color: #00af00; text-decoration-color: #00af00\">3,938,304</span> │ lambda_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)     │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ multi_head_attenti… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>) │  <span style=\"color: #00af00; text-decoration-color: #00af00\">1,050,368</span> │ bidirectional_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MultiHeadAttentio…</span> │                   │            │ bidirectional_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ multi_head_atten… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout_11          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ global_average_p… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)           │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">4,100</span> │ dropout_11[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","</pre>\n"],"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_ids           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_mask      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ lambda_4 (\u001b[38;5;33mLambda\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m768\u001b[0m)  │          \u001b[38;5;34m0\u001b[0m │ input_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n","│                     │                   │            │ attention_mask[\u001b[38;5;34m0\u001b[0m… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ bidirectional_6     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1024\u001b[0m) │  \u001b[38;5;34m3,938,304\u001b[0m │ lambda_4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","│ (\u001b[38;5;33mBidirectional\u001b[0m)     │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ multi_head_attenti… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1024\u001b[0m) │  \u001b[38;5;34m1,050,368\u001b[0m │ bidirectional_6[\u001b[38;5;34m…\u001b[0m │\n","│ (\u001b[38;5;33mMultiHeadAttentio…\u001b[0m │                   │            │ bidirectional_6[\u001b[38;5;34m…\u001b[0m │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ multi_head_atten… │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout_11          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ global_average_p… │\n","│ (\u001b[38;5;33mDropout\u001b[0m)           │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_5 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)         │      \u001b[38;5;34m4,100\u001b[0m │ dropout_11[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,992,772</span> (19.05 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m4,992,772\u001b[0m (19.05 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,992,772</span> (19.05 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m4,992,772\u001b[0m (19.05 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"],"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Epoch 1/5\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 298ms/step\n","\n","Epoch 1 — Macro F1-score: 0.2340\n","\u001b[1m164/164\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m89s\u001b[0m 464ms/step - accuracy: 0.2434 - loss: 1.5786 - val_accuracy: 0.4399 - val_loss: 1.3338\n","Epoch 2/5\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 211ms/step\n","\n","Epoch 2 — Macro F1-score: 0.3538\n","\u001b[1m164/164\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m67s\u001b[0m 371ms/step - accuracy: 0.3953 - loss: 1.3454 - val_accuracy: 0.4262 - val_loss: 1.2502\n","Epoch 3/5\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 212ms/step\n","\n","Epoch 3 — Macro F1-score: 0.2927\n","\u001b[1m164/164\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m60s\u001b[0m 369ms/step - accuracy: 0.5054 - loss: 1.1896 - val_accuracy: 0.4422 - val_loss: 1.1871\n","Epoch 4/5\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 210ms/step\n","\n","Epoch 4 — Macro F1-score: 0.3454\n","\u001b[1m164/164\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 382ms/step - accuracy: 0.5198 - loss: 1.1021 - val_accuracy: 0.4514 - val_loss: 1.1946\n","Epoch 5/5\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 212ms/step\n","\n","Epoch 5 — Macro F1-score: 0.3771\n","\u001b[1m164/164\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m62s\u001b[0m 378ms/step - accuracy: 0.5284 - loss: 1.0131 - val_accuracy: 0.5065 - val_loss: 1.1766\n"]}],"source":["# # -*- coding: utf-8 -*-\n","# import tensorflow as tf\n","# from tensorflow.keras.layers import Input, Dense, Bidirectional, GRU, MultiHeadAttention\n","# from tensorflow.keras.models import Model\n","# from transformers import XLMRobertaTokenizer, TFXLMRobertaModel\n","# from sklearn.model_selection import train_test_split\n","# from sklearn.metrics import classification_report, f1_score\n","# import matplotlib.pyplot as plt\n","# import numpy as np\n","# import pandas as pd\n","# from tensorflow.keras.layers import Input, Lambda, Dense, Dropout, Bidirectional, GRU, GlobalAveragePooling1D\n","# from tensorflow.keras.models import Model\n","# from tensorflow.keras import backend as K\n","\n","# # ======================\n","# # CONFIGURATION\n","# # ======================\n","# MAX_LEN = 100 # Reduced for English text\n","# BATCH_SIZE = 32\n","# EPOCHS = 5\n","# LEARNING_RATE = 5e-4\n","# VAL_SPLIT = 0.2\n","# # CLASS_WEIGHT = {0: 1, 1: 3.5, 2: 1, 3: 1}  # Adjusted for English class distribution\n","# CLASS_WEIGHT = {0: 0.404, 1: 1.451, 2: 13.167, 3: 1.308}  # Adjusted for English class distribution\n","# XLM_MODEL_NAME = 'xlm-roberta-base'\n","\n","# # ======================\n","# # MODEL ARCHITECTURE\n","# # ======================\n","# class XLMRobertaEmbedding(tf.keras.layers.Layer):\n","#     def __init__(self, model_name, **kwargs):\n","#         super().__init__(**kwargs)\n","#         self.xlm_model = TFXLMRobertaModel.from_pretrained(model_name)\n","\n","#         for i in range(6):  # You can change how many layers you want frozen\n","#             self.xlm_model.roberta.encoder.layer[i].trainable = False\n","\n","#     def call(self, inputs):\n","#         input_ids, attention_mask = inputs\n","#         return self.xlm_model(\n","#             input_ids,\n","#             attention_mask=attention_mask,\n","#             return_dict=True\n","#         ).last_hidden_state\n","\n","# # def create_model():\n","# #     input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids')\n","# #     attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask')\n","\n","# #     # XLM-R Embeddings\n","# #     embeddings = XLMRobertaEmbedding(XLM_MODEL_NAME)([input_ids, attention_mask])\n","\n","# #     # BiGRU with reduced units for English\n","# #     gru_out = Bidirectional(GRU(512, return_sequences=True))(embeddings)\n","\n","# #     # Multi-Head Attention\n","# #     attention = MultiHeadAttention(num_heads=4, key_dim=64)(gru_out, gru_out)\n","\n","# #     # Pooling + Classification\n","# #     pooled = tf.keras.layers.GlobalAveragePooling1D()(attention)\n","# #     dropout = tf.keras.layers.Dropout(0.2)(pooled)\n","# #     output = Dense(4, activation='softmax')(dropout)\n","\n","# #     return Model(inputs=[input_ids, attention_mask], outputs=output)\n","\n","# def create_model():\n","#     input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids')\n","#     attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask')\n","\n","#     xlm_model = TFXLMRobertaModel.from_pretrained(XLM_MODEL_NAME)\n","\n","#     # ❄️ Freeze first 6 encoder layers\n","#     for i in range(8):\n","#         xlm_model.roberta.encoder.layer[i].trainable = False\n","\n","#     # ✅ Hugging Face models expect raw Tensors, use Lambda wrapper\n","#     def xlm_embed(inputs):\n","#         input_ids, attention_mask = inputs\n","#         outputs = xlm_model(input_ids=input_ids, attention_mask=attention_mask)\n","#         return outputs.last_hidden_state\n","\n","#     embeddings = Lambda(xlm_embed, output_shape=(MAX_LEN, 768))([input_ids, attention_mask])  # (None, 100, 768)\n","\n","#     gru_out = Bidirectional(GRU(512, return_sequences=True))(embeddings)\n","#     attention = tf.keras.layers.MultiHeadAttention(num_heads=4, key_dim=64)(gru_out, gru_out)\n","#     pooled = GlobalAveragePooling1D()(attention)\n","#     dropout = Dropout(0.2)(pooled)\n","#     output = Dense(4, activation='sigmoid')(dropout)\n","\n","#     return Model(inputs=[input_ids, attention_mask], outputs=output)\n","\n","\n","# # Load dataset (replace with your English data path)\n","# english_df = d1\n","\n","# # Split data\n","# X_train, X_val, y_train, y_val = train_test_split(\n","#     english_df['text'].values,\n","#     english_df['label'].values,\n","#     test_size=VAL_SPLIT,\n","#     stratify=english_df['label'],\n","#     random_state=42\n","# )\n","\n","# from tensorflow.keras.utils import to_categorical\n","\n","# y_train = to_categorical(y_train, num_classes=4)\n","# y_val = to_categorical(y_val, num_classes=4)\n","\n","# # Tokenization\n","# tokenizer = XLMRobertaTokenizer.from_pretrained(XLM_MODEL_NAME)\n","\n","# def preprocess(texts):\n","#     return tokenizer(\n","#         texts.tolist(),\n","#         max_length=MAX_LEN,\n","#         truncation=True,\n","#         padding='max_length',\n","#         return_tensors='tf'\n","#     )\n","\n","# train_enc = preprocess(X_train)\n","# val_enc = preprocess(X_val)\n","\n","# # ======================\n","# # MODEL TRAINING\n","# # ======================\n","# model = create_model()\n","# model.compile(\n","#     optimizer=tf.keras.optimizers.Adam(LEARNING_RATE),\n","#     loss='categorical_crossentropy',\n","#     metrics=['accuracy']\n","# )\n","\n","# for layer in model.layers:\n","#     print(layer.name, layer.trainable)\n","\n","\n","# print(\"\\n\\nMODEL SUMMARY\\n\\n\\n\")\n","# model.summary()\n","\n","# val_data = (\n","#     {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","#     y_val\n","# )\n","\n","# f1_callback = MacroF1Callback(val_data)\n","# history = model.fit(\n","#     {'input_ids': train_enc['input_ids'], 'attention_mask': train_enc['attention_mask']},\n","#     y_train,\n","#     validation_data=val_data,\n","#     epochs=EPOCHS,\n","#     batch_size=BATCH_SIZE,\n","#     class_weight=CLASS_WEIGHT,\n","#     callbacks=[f1_callback]\n","# )\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aYfaa1ASBrMd"},"outputs":[],"source":["\n","# # ======================\n","# # EVALUATION & VISUALIZATION\n","# # ======================\n","# def evaluate_model(model, data, true_labels):\n","#     y_pred = model.predict(data)\n","#     y_pred_labels = (y_pred > 0.5).astype(int)\n","\n","#     print(\"\\nClassification Report:\")\n","#     print(classification_report(true_labels, y_pred_labels))\n","#     print(f\"F1 Score: {f1_score(true_labels, y_pred_labels, average='macro'):.4f}\")\n","\n","# print(\"English Validation Results:\")\n","# evaluate_model(model,\n","#     {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","#     y_val\n","# )\n","\n","from sklearn.metrics import classification_report, f1_score, confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","def evaluate_model(model, data, true_labels, class_names=None):\n","    # Predict probabilities\n","    y_pred = model.predict(data)\n","\n","    # Convert to class labels\n","    y_pred_labels = y_pred.argmax(axis=1)  # Assuming softmax output\n","    true_labels = true_labels.argmax(axis=1) if true_labels.ndim > 1 else true_labels\n","\n","    # Classification report\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(true_labels, y_pred_labels, target_names=class_names))\n","    print(f\"Macro F1 Score: {f1_score(true_labels, y_pred_labels, average='macro'):.4f}\")\n","\n","    # Confusion matrix\n","    cm = confusion_matrix(true_labels, y_pred_labels)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=class_names, yticklabels=class_names)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n"]},{"cell_type":"code","source":["class_names = ['Neutral', 'Gender Abuse', 'Explicit Lang', 'Both']\n","\n","print(\"English Validation Results:\")\n","evaluate_model(\n","    model,\n","    {'input_ids': val_enc['input_ids'], 'attention_mask': val_enc['attention_mask']},\n","    y_val,\n","    class_names=class_names\n",")\n"],"metadata":{"id":"GY6ZmDzJWjA4"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"elapsed":577,"status":"ok","timestamp":1744530559990,"user":{"displayName":"Sujal Soni","userId":"00761747243758695910"},"user_tz":-330},"id":"LXRmHcnKBtSs","outputId":"c67028f8-4f46-4511-c1f0-3e372c73ef18"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1200x400 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["\n","plt.figure(figsize=(12, 4))\n","plt.subplot(1, 2, 1)\n","plt.plot(history.history['accuracy'], label='Train Accuracy')\n","plt.plot(history.history['val_accuracy'], label='Val Accuracy')\n","plt.title('Accuracy Progress')\n","plt.legend()\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(history.history['loss'], label='Train Loss')\n","plt.plot(history.history['val_loss'], label='Val Loss')\n","plt.title('Loss Progress')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"07L2-FcEkgtv"},"outputs":[],"source":["def evaluate_on_test(model, dn_test, tokenizer, max_length=100, class_names=None):\n","    import numpy as np\n","    from sklearn.metrics import classification_report, f1_score, confusion_matrix\n","    import seaborn as sns\n","    import matplotlib.pyplot as plt\n","    from tensorflow.keras.utils import to_categorical\n","\n","    # Tokenize test data\n","    test_enc = tokenizer(\n","        list(dn_test['text']),\n","        truncation=True,\n","        padding='max_length',\n","        max_length=max_length,\n","        return_tensors='tf'\n","    )\n","\n","    # Convert labels to integers if needed\n","    test_labels = dn_test['label'].values\n","    y_true = test_labels\n","\n","    # Predict\n","    y_pred_probs = model.predict({'input_ids': test_enc['input_ids'], 'attention_mask': test_enc['attention_mask']})\n","    y_pred = y_pred_probs.argmax(axis=1)\n","\n","    # Metrics\n","    print(\"\\nTest Set Classification Report:\")\n","    print(classification_report(y_true, y_pred, target_names=class_names))\n","    print(f\"Macro F1 Score: {f1_score(y_true, y_pred, average='macro'):.4f}\")\n","\n","    # Confusion Matrix\n","    cm = confusion_matrix(y_true, y_pred)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=class_names, yticklabels=class_names)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix - Test Set')\n","    plt.show()\n"]},{"cell_type":"code","source":["class_names = ['Neutral', 'Gender Abuse', 'Explicit Lang', 'Both']\n","\n","evaluate_on_test(model, dn_test, tokenizer, class_names=class_names)\n"],"metadata":{"id":"wVbG9uI5WTMm"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}