{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24530,"status":"ok","timestamp":1744611335347,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"ofi3U7-OkPp3","outputId":"299349d5-a2bd-4f9c-f708-aa387964743d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5277,"status":"ok","timestamp":1744611340619,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"H-tWaOpK9yzb","outputId":"eb7ee273-eb6c-4e5b-da71-f8c9dd04eb6a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting emoji\n","  Downloading emoji-2.14.1-py3-none-any.whl.metadata (5.7 kB)\n","Downloading emoji-2.14.1-py3-none-any.whl (590 kB)\n","\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/590.6 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━\u001b[0m \u001b[32m522.2/590.6 kB\u001b[0m \u001b[31m17.5 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m590.6/590.6 kB\u001b[0m \u001b[31m12.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: emoji\n","Successfully installed emoji-2.14.1\n"]}],"source":["!pip install emoji\n","# !pip install datasets"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"mndrNC668uQP","executionInfo":{"status":"ok","timestamp":1744611353436,"user_tz":-330,"elapsed":10491,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":["# Data Handling\n","import os\n","import re\n","import string\n","import numpy as np\n","import pandas as pd\n","from numpy import array\n","from numpy import asarray\n","from numpy import zeros\n","\n","# NLP Preprocessing\n","# import nltk\n","from tensorflow.keras.preprocessing.text import Tokenizer, one_hot\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","# Machine Learning & Model Evaluation\n","from sklearn.model_selection import train_test_split\n","# from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics import (\n","    classification_report, f1_score, precision_score, recall_score,\n","    confusion_matrix, accuracy_score\n",")\n","# from skmultilearn.adapt import MLkNN\n","\n","# Deep Learning (Keras & TensorFlow)\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import (\n","    Embedding, LSTM, GRU, SimpleRNN, Dense, Dropout, Activation, Concatenate\n",")\n","from tensorflow.keras.optimizers import Adam\n","# from tensorflow.keras.losses import MeanSquaredError\n","from tensorflow.keras.utils import to_categorical\n","\n","# Visualization\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import emoji\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"DiVADZM88vsW","executionInfo":{"status":"ok","timestamp":1744611357070,"user_tz":-330,"elapsed":3630,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":["d1= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_en_l1.csv')\n","d3= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/training/train_en_l3.csv')\n","\n","d1_test= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/testing/test_en_l1.csv')\n","d3_test= pd.read_csv('/content/drive/MyDrive/NLP_Project/NLP/testing/test_en_l3.csv')\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"qxp_3tAd83lH","executionInfo":{"status":"ok","timestamp":1744611357074,"user_tz":-330,"elapsed":2,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":[]},{"cell_type":"code","execution_count":5,"metadata":{"id":"sOqst0Nq8yG6","executionInfo":{"status":"ok","timestamp":1744611361936,"user_tz":-330,"elapsed":4860,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":["def normalize_text(text):\n","  # emoji_pattern = re.compile(\"[\"\n","  #                             u\"\\U0001F600-\\U0001F64F\"  # emoticons\n","  #                             u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n","  #                             u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n","  #                             u\"\\U0001F700-\\U0001F77F\"  # alchemical symbols\n","  #                             u\"\\U0001F780-\\U0001F7FF\"  # Geometric Shapes Extended\n","  #                             u\"\\U0001F800-\\U0001F8FF\"  # Supplemental Arrows-C\n","  #                             u\"\\U0001F900-\\U0001F9FF\"  # Supplemental Symbols and Pictographs\n","  #                             u\"\\U0001FA00-\\U0001FA6F\"  # Chess Symbols\n","  #                             u\"\\U0001FA70-\\U0001FAFF\"  # Symbols and Pictographs Extended-A\n","  #                             u\"\\U00002702-\\U000027B0\"  # Dingbats\n","  #                             u\"\\U000024C2-\\U0001F251\"\n","  #                             \"]+\", flags=re.UNICODE)\n","  text = text.lower()\n","  text = re.sub('\\[.*?\\]', ' ', text)\n","  text = re.sub('https?://\\S+|www\\.\\S+', ' ', text)\n","  text = re.sub('<.*?>+', ' ', text)\n","  text = re.sub('[%s]' % re.escape(string.punctuation), ' ', text)\n","  text = re.sub('\\n', ' ', text)\n","  text = re.sub('\\w*\\d\\w*', ' ', text)\n","  text = re.sub('<handle replaced>', '', text)\n","  text = emoji.demojize(text)\n","  text = text.replace(\"ðŸ¤§\", \" \")\n","  text = text.replace(\"&amp;\", \" \")\n","  text = text.replace(\"\\n\", \" \")\n","  text = text.replace(\"ðŸ˜¡\", \" \")\n","  # text = emoji_pattern.sub(r'', text)\n","  return text\n","\n","d1['text'] = d1['text'].apply(lambda x: normalize_text(x))\n","d1_test['text'] = d1_test['text'].apply(lambda x: normalize_text(x))\n","\n","d3['text'] = d3['text'].apply(lambda x: normalize_text(x))\n","d3_test['text'] = d3_test['text'].apply(lambda x: normalize_text(x))"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":8219,"status":"ok","timestamp":1744611370153,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"mWgpPVgh823Q"},"outputs":[],"source":["X1 = list(d1['text'])\n","X1_test = list(d1_test['text'])\n","X3 = list(d3['text'])\n","X3_test = list(d3_test['text'])\n","\n","col_lst = ['en_a1', 'en_a2', 'en_a3', 'en_a4', 'en_a5', 'en_a6']\n","for col in col_lst:\n","    d1[col] = pd.to_numeric(d1[col], errors='coerce')\n","    d1_test[col] = pd.to_numeric(d1_test[col], errors='coerce')\n","\n","    d3[col] = pd.to_numeric(d3[col], errors='coerce')\n","    d3_test[col] = pd.to_numeric(d3_test[col], errors='coerce')\n","\n","\n","def majority_label(row):\n","    ones = (row == 1).sum()\n","    zeros = (row == 0).sum()\n","    if ones >= zeros:\n","        return 1\n","    elif zeros > ones:\n","        return 0\n","    return 0\n","\n","d1['label_1'] = d1[col_lst].apply(majority_label, axis=1)\n","d1_test['label_1'] = d1_test[col_lst].apply(majority_label, axis=1)\n","\n","d3['label_3'] = d3[col_lst].apply(majority_label, axis=1)\n","d3_test['label_3'] = d3_test[col_lst].apply(majority_label, axis=1)\n","\n","# d3['label_3'] = d3[col_lst].max(axis=1, skipna=True).astype(int)\n","# d3_test['label_3'] = d3_test[col_lst].max(axis=1, skipna=True).astype(int)\n","\n","\n","d1 = d1.drop(col_lst, axis=1)\n","d1_test = d1_test.drop(col_lst, axis=1)\n","d3 = d3.drop(col_lst, axis=1)\n","d3_test = d3_test.drop(col_lst, axis=1)\n","\n","# d1\n"]},{"cell_type":"code","source":["d1['label_1'] = d1['label_1'].astype(int)\n","d1_test['label_1'] = d1_test['label_1'].astype(int)\n","d3['label_3'] = d3['label_3'].astype(int)\n","d3_test['label_3'] = d3_test['label_3'].astype(int)\n","\n","\n","d1 = d1[['label_1', 'text']]\n","d1_test = d1_test[['label_1', 'text']]\n","d1_test\n","\n","d3 = d3[['label_3', 'text']]\n","d3_test = d3_test[['label_3', 'text']]\n","d3_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"tQdjrD_KcOwU","executionInfo":{"status":"ok","timestamp":1744611370258,"user_tz":-330,"elapsed":95,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}},"outputId":"d065a0f0-2b4a-48bf-bb7b-d9912aa8bfd1"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      label_3                                               text\n","0           0   who s this tweet about  bitch it s about you ...\n","1           0   alkalamba should’ve used her slippers to slap...\n","2           1   coronavillains   covididiot      is a      do...\n","3           1   acts      like the female  governors  of stat...\n","4           0     let us celebrate “secular” as a beautiful w...\n","...       ...                                                ...\n","1102        1  you should be tired of not having any kind of ...\n","1103        0  “the limits of tyrants are prescribed by the e...\n","1104        0  :Cancer::crab: like wtf my symbol is   and i’m...\n","1105        1  :United_States:  marry a millionaire guy  divo...\n","1106        0  :face_with_tears_of_joy: slim could take over ...\n","\n","[1107 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-ffddffe8-35c1-49b5-90c9-42e862b26931\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label_3</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>who s this tweet about  bitch it s about you ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>alkalamba should’ve used her slippers to slap...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>coronavillains   covididiot      is a      do...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>acts      like the female  governors  of stat...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>let us celebrate “secular” as a beautiful w...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1102</th>\n","      <td>1</td>\n","      <td>you should be tired of not having any kind of ...</td>\n","    </tr>\n","    <tr>\n","      <th>1103</th>\n","      <td>0</td>\n","      <td>“the limits of tyrants are prescribed by the e...</td>\n","    </tr>\n","    <tr>\n","      <th>1104</th>\n","      <td>0</td>\n","      <td>:Cancer::crab: like wtf my symbol is   and i’m...</td>\n","    </tr>\n","    <tr>\n","      <th>1105</th>\n","      <td>1</td>\n","      <td>:United_States:  marry a millionaire guy  divo...</td>\n","    </tr>\n","    <tr>\n","      <th>1106</th>\n","      <td>0</td>\n","      <td>:face_with_tears_of_joy: slim could take over ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1107 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ffddffe8-35c1-49b5-90c9-42e862b26931')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ffddffe8-35c1-49b5-90c9-42e862b26931 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ffddffe8-35c1-49b5-90c9-42e862b26931');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1b51a596-b531-4579-9403-562dcc7945fe\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1b51a596-b531-4579-9403-562dcc7945fe')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1b51a596-b531-4579-9403-562dcc7945fe button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_72f01174-8085-499a-8f65-3e8c0e4a9c3a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('d3_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_72f01174-8085-499a-8f65-3e8c0e4a9c3a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('d3_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"d3_test","summary":"{\n  \"name\": \"d3_test\",\n  \"rows\": 1107,\n  \"fields\": [\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1107,\n        \"samples\": [\n          \" pissfull snakes :snake: traitors\",\n          \"had to cut that hoe off cause the bitch was steady bitchin\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":159,"status":"ok","timestamp":1744611370420,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"oMiDSNhQ9Fjj","outputId":"a844e01e-3199-4673-ab28-3ed49ec84429"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   text  label_1  label_3\n","0      who s this tweet about  bitch it s about you ...        0        0\n","1      alkalamba should’ve used her slippers to slap...        0        0\n","2      coronavillains   covididiot      is a      do...        1        1\n","3      acts      like the female  governors  of stat...        1        1\n","4        let us celebrate “secular” as a beautiful w...        0        0\n","...                                                 ...      ...      ...\n","1102  you should be tired of not having any kind of ...        1        1\n","1103  “the limits of tyrants are prescribed by the e...        0        0\n","1104  :Cancer::crab: like wtf my symbol is   and i’m...        0        0\n","1105  :United_States:  marry a millionaire guy  divo...        1        1\n","1106  :face_with_tears_of_joy: slim could take over ...        0        0\n","\n","[1107 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-9e9fa60a-445d-4489-acb8-7509c5e8519d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label_1</th>\n","      <th>label_3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>who s this tweet about  bitch it s about you ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>alkalamba should’ve used her slippers to slap...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>coronavillains   covididiot      is a      do...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>acts      like the female  governors  of stat...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>let us celebrate “secular” as a beautiful w...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1102</th>\n","      <td>you should be tired of not having any kind of ...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1103</th>\n","      <td>“the limits of tyrants are prescribed by the e...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1104</th>\n","      <td>:Cancer::crab: like wtf my symbol is   and i’m...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1105</th>\n","      <td>:United_States:  marry a millionaire guy  divo...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1106</th>\n","      <td>:face_with_tears_of_joy: slim could take over ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1107 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e9fa60a-445d-4489-acb8-7509c5e8519d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9e9fa60a-445d-4489-acb8-7509c5e8519d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9e9fa60a-445d-4489-acb8-7509c5e8519d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-49a0fd35-2bdc-45a8-b582-60c614775a2a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-49a0fd35-2bdc-45a8-b582-60c614775a2a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-49a0fd35-2bdc-45a8-b582-60c614775a2a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_fab82abd-4425-4a95-a1d7-d337bd4228df\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dn_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_fab82abd-4425-4a95-a1d7-d337bd4228df button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dn_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dn_test","summary":"{\n  \"name\": \"dn_test\",\n  \"rows\": 1107,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1107,\n        \"samples\": [\n          \" pissfull snakes :snake: traitors\",\n          \"had to cut that hoe off cause the bitch was steady bitchin\",\n          \"       so    options  either there is no rule of law in india or that you re lying either knowingly or unknowingly  under option    feel free to leave  under option    stop lying \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}],"source":["\n","dn = pd.concat([d1, d3.drop(columns=['text'])], axis=1)\n","dn_test = pd.concat([d1_test, d3_test.drop(columns=['text'])], axis=1)\n","\n","dn = dn[['text', 'label_1', 'label_3']]\n","dn_test = dn_test[['text', 'label_1', 'label_3']]\n","dn_test"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"ZOVpp4_j9HsY","executionInfo":{"status":"ok","timestamp":1744611370441,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":["# # Create new label column based on logic\n","# def assign_label(row):\n","#     label_1 = row['label_1']\n","#     label_3 = row['label_3']\n","\n","#     # Handle NaN cases (rows with only label_1 or label_3)\n","#     if pd.isna(label_1) and pd.isna(label_3):\n","#         return np.nan  # Both missing\n","#     elif pd.isna(label_1):\n","#         # Only label_3 exists (from d3, d3_test)\n","#         return 1 if label_3 == 1 else 0  # Treat as binary\n","#     elif pd.isna(label_3):\n","#         # Only label_1 exists (from d1, d1_test)\n","#         return 2 if label_1 == 1 else 0  # Treat as binary\n","#     else:\n","#         # Both labels exist (unlikely unless datasets overlap)\n","#         if label_1 == 0 and label_3 == 0:\n","#             return 0\n","#         elif label_1 == 0 and label_3 == 1:\n","#             return 1\n","#         elif label_1 == 1 and label_3 == 0:\n","#             return 2\n","#         else:  # label_1 == 1 and label_3 == 1\n","#             return 3\n","\n","# # dn_new=dn.copy()\n","# dn['label'] = dn.apply(assign_label, axis=1)\n","\n","# # dn_test_new=dn_test.copy()\n","# dn_test['label'] = dn_test.apply(assign_label, axis=1)\n","\n","# dn"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1744611370460,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"YSaME4sQ9juc","outputId":"4c09a579-0007-4f41-d692-9a3de2f83555"},"outputs":[{"output_type":"stream","name":"stdout","text":["label_1\n","0    5159\n","1    1372\n","Name: count, dtype: int64\n","label_3\n","0    4159\n","1    2372\n","Name: count, dtype: int64\n","label_1\n","0    877\n","1    230\n","Name: count, dtype: int64\n","label_3\n","0    699\n","1    408\n","Name: count, dtype: int64\n"]}],"source":["# dn = dn[['label', 'text']].copy()\n","# dn_test = dn_test[['label', 'text']].copy()\n","# dn\n","\n","print(dn['label_1'].value_counts())\n","print(dn['label_3'].value_counts())\n","print(dn_test['label_1'].value_counts())\n","print(dn_test['label_3'].value_counts())"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"l6fD8Ujc8-F8","executionInfo":{"status":"ok","timestamp":1744611370472,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":["# y_data1 = dn[\"label\"]\n","# # y_data2 = d2[\"label\"]\n","# # y_data3 = d3[\"label\"]\n","# # # print(y_data)\n","# y1 = y_data1.values\n","# # y2 = y_data2.values\n","# # y3 = y_data3.values\n","# print(y1)\n","# print(len(y1))\n","# # print(y2)\n","# # print(len(y2))\n","# # print(y3)\n","# # print(len(y3))"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"eqcS8s2W-ppD","executionInfo":{"status":"ok","timestamp":1744611370489,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":["# # y1.#\n","# unique_values, counts = np.unique(y1, return_counts=True)\n","# print(unique_values)\n","# print(counts)\n","# print(counts[0]/counts[1])\n"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"gXAL76qW-fgB","executionInfo":{"status":"ok","timestamp":1744611370504,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"outputs":[],"source":["d1 = dn.copy()"]},{"cell_type":"code","source":["# # Create multi-label column\n","# d1['labels'] = d1[['label_1', 'label_3']].values.tolist()\n","# d1\n"],"metadata":{"id":"CYFj8m-EdhK-","executionInfo":{"status":"ok","timestamp":1744611373609,"user_tz":-330,"elapsed":2,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"elapsed":871,"status":"ok","timestamp":1744611376329,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"hJNxaadV_ik2","outputId":"7294cccb-1a55-4818-aa7f-b7f8b639cd73"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Average Text Length: 112.52273771244832\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Calculate the lengths of each text element\n","text_lengths = d1['text'].str.len()\n","\n","# Create a histogram with bins of size 10\n","plt.hist(text_lengths, bins=range(0, text_lengths.max() + 10, 10))\n","\n","plt.xlabel('Text Length')\n","plt.ylabel('Frequency')\n","plt.title('Distribution of Text Lengths')\n","plt.show()\n","\n","# Calculate and print the average text length\n","average_length = text_lengths.mean()\n","print(f\"Average Text Length: {average_length}\")\n","\n","# Get counts for each bucket of 10\n","bins = range(0, text_lengths.max() + 10, 10)\n","counts, _ = np.histogram(text_lengths, bins=bins)\n","\n","sum=0\n","# Print the counts for each bucket\n","# for i in range(len(bins) - 1):\n","#     sum+=counts[i]\n","#     print(f\"Length {bins[i]}-{bins[i+1]}: {counts[i]} {sum}\")"]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1744611379622,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"},"user_tz":-330},"id":"tsxFCYDbMugS"},"outputs":[],"source":["# import numpy as np\n","\n","# # Total number of samples\n","# total_samples = np.array([4034, 1125, 124, 1248]).sum()\n","\n","# # Class frequencies\n","# class_freq = np.array([4034, 1125, 124, 1248])\n","\n","# # Calculate the class weights\n","# class_weights = total_samples / (len(class_freq) * class_freq)\n","# class_weights"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset, DataLoader, random_split\n","from transformers import XLMRobertaTokenizer, XLMRobertaModel\n","from torch.optim import AdamW\n","\n","from sklearn.metrics import f1_score, confusion_matrix, accuracy_score\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from tqdm import tqdm\n","\n","# Load your dataframes\n","# d1 and dn_test should already be loaded with columns: \"text\", \"label_1\", \"label_3\"\n","\n","# Step 1: Dataset class\n","class TextDataset(Dataset):\n","    def __init__(self, df, tokenizer, max_len=128):\n","        self.texts = df['text'].tolist()\n","        self.labels = df[['label_1', 'label_3']].values\n","        self.tokenizer = tokenizer\n","        self.max_len = max_len\n","\n","    def __len__(self):\n","        return len(self.texts)\n","\n","    def __getitem__(self, idx):\n","        encoding = self.tokenizer(\n","            self.texts[idx],\n","            padding='max_length',\n","            truncation=True,\n","            max_length=self.max_len,\n","            return_tensors=\"pt\"\n","        )\n","        return {\n","            'input_ids': encoding['input_ids'].squeeze(0),\n","            'attention_mask': encoding['attention_mask'].squeeze(0),\n","            'labels': torch.tensor(self.labels[idx], dtype=torch.float)\n","        }\n","\n","# Step 2: Model\n","class XLMWithGRU(nn.Module):\n","    def __init__(self, hidden_dim=128, rnn_type='GRU'):\n","        super(XLMWithGRU, self).__init__()\n","        self.xlm = XLMRobertaModel.from_pretrained('xlm-roberta-large')\n","        self.rnn_type = rnn_type\n","        self.hidden_dim = hidden_dim\n","\n","        self.rnn = nn.GRU(\n","            input_size=self.xlm.config.hidden_size,\n","            hidden_size=hidden_dim,\n","            batch_first=True,\n","            bidirectional=True\n","        ) if rnn_type == 'GRU' else nn.LSTM(\n","            input_size=self.xlm.config.hidden_size,\n","            hidden_size=hidden_dim,\n","            batch_first=True,\n","            bidirectional=True\n","        )\n","\n","        self.classifier = nn.Linear(hidden_dim * 2, 2)\n","\n","    def forward(self, input_ids, attention_mask):\n","        with torch.no_grad():  # freeze transformer\n","            outputs = self.xlm(input_ids=input_ids, attention_mask=attention_mask)\n","        sequence_output = outputs.last_hidden_state  # shape: (batch, seq_len, hidden)\n","\n","        rnn_output, _ = self.rnn(sequence_output)  # (batch, seq_len, 2*hidden_dim)\n","        pooled = rnn_output[:, 0]  # take first token's output\n","\n","        logits = self.classifier(pooled)\n","        return logits\n","\n","import builtins  # to access built-in sum safely\n","\n","def count_trainable_parameters(model):\n","    total = builtins.sum(p.numel() for p in model.parameters() if p.requires_grad)\n","    print(f\"\\n✅ Total Trainable Parameters: {total:,}\")\n","    return total\n","\n","\n","# device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","\n","# from sklearn.utils.class_weight import compute_class_weight\n","\n","# # Compute class weights for label_1 and label_3\n","# class_weights_1 = compute_class_weight('balanced', classes=np.array([0, 1]), y=d1['label_1'].values)\n","# class_weights_3 = compute_class_weight('balanced', classes=np.array([0, 1]), y=d1['label_3'].values)\n","\n","# # Convert class weights to tensors\n","# class_weights_tensor_1_0 = torch.tensor(class_weights_1[0], dtype=torch.float).to(device) # Weight for label_1 = 0\n","# class_weights_tensor_1_1 = torch.tensor(class_weights_1[1], dtype=torch.float).to(device)  # Weight for label_1 = 1\n","# class_weights_tensor_3_0 = torch.tensor(class_weights_3[0], dtype=torch.float).to(device)  # Weight for label_3 = 0\n","# class_weights_tensor_3_1 = torch.tensor(class_weights_3[1], dtype=torch.float).to(device)  # Weight for label_3 = 1\n","\n","# # Combine all the weights for the 4 possible classes (label_1_0, label_1_1, label_3_0, label_3_1)\n","# pos_weight = torch.stack([class_weights_tensor_1_1, class_weights_tensor_3_1])\n","# pos_weight = torch.stack([class_weights_tensor_1_0, class_weights_tensor_1_1,\n","#                           class_weights_tensor_3_0, class_weights_tensor_3_1])\n","\n","# Convert class weights to tensors\n","# class_weights_tensor_1 = torch.tensor(class_weights_1, dtype=torch.float)\n","# class_weights_tensor_3 = torch.tensor(class_weights_3, dtype=torch.float)\n","\n","# print(class_weights_1)\n","# print(class_weights_3)\n","\n","# print(pos_weight)\n","\n","# Step 3: Training Function\n","def train_model(model, train_loader, val_loader, epochs=5, lr=2e-5):\n","    optimizer = AdamW(model.parameters(), lr=lr)\n","    loss_fn = nn.BCEWithLogitsLoss()\n","    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","    model.to(device)\n","\n","    train_losses, val_losses = [], []\n","    train_accs, val_accs = [], []\n","    f1_scores = []\n","\n","    for epoch in range(epochs):\n","        model.train()\n","        running_loss, correct, total = 0.0, 0, 0\n","        y_true, y_pred = [], []\n","\n","        for batch in tqdm(train_loader, desc=f'Epoch {epoch+1} - Train'):\n","            input_ids = batch['input_ids'].to(device)\n","            attention_mask = batch['attention_mask'].to(device)\n","            labels = batch['labels'].to(device)\n","\n","            optimizer.zero_grad()\n","            outputs = model(input_ids, attention_mask)\n","            loss = loss_fn(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","\n","            running_loss += loss.item()\n","            preds = torch.sigmoid(outputs).detach().cpu().numpy() > 0.5\n","            y_true.extend(labels.cpu().numpy())\n","            y_pred.extend(preds)\n","\n","        train_loss = running_loss / len(train_loader)\n","        train_acc = accuracy_score(np.array(y_true).flatten(), np.array(y_pred).flatten())\n","        train_f1 = f1_score(np.array(y_true), np.array(y_pred), average='macro')\n","        train_losses.append(train_loss)\n","        train_accs.append(train_acc)\n","\n","        # Validation\n","        model.eval()\n","        val_loss, val_true, val_pred = 0.0, [], []\n","        cnt = 0\n","        with torch.no_grad():\n","            for batch in tqdm(val_loader, desc=f'Epoch {epoch+1} - Val'):\n","                input_ids = batch['input_ids'].to(device)\n","                attention_mask = batch['attention_mask'].to(device)\n","                labels = batch['labels'].to(device)\n","\n","                outputs = model(input_ids, attention_mask)\n","                loss = loss_fn(outputs, labels)\n","                val_loss += loss.item()\n","                preds = torch.sigmoid(outputs)\n","\n","                if cnt <= 3:\n","                  print(preds[:8])\n","                  cnt+=1\n","\n","                preds = preds.cpu().numpy() > 0.5\n","                val_true.extend(labels.cpu().numpy())\n","                val_pred.extend(preds)\n","\n","        val_loss /= len(val_loader)\n","        val_acc = accuracy_score(np.array(val_true).flatten(), np.array(val_pred).flatten())\n","        val_f1 = f1_score(np.array(val_true), np.array(val_pred), average='macro')\n","        val_losses.append(val_loss)\n","        val_accs.append(val_acc)\n","        f1_scores.append(val_f1)\n","\n","        print(f\"\\nEpoch {epoch+1}: Train Loss={train_loss:.4f}, Val Loss={val_loss:.4f}\")\n","        print(f\"Train Acc={train_acc:.4f}, Val Acc={val_acc:.4f}\")\n","        print(f\"Macro F1 Score: {val_f1:.4f}\")\n","\n","    # Plotting\n","    plt.figure(figsize=(10, 4))\n","    plt.subplot(1, 2, 1)\n","    plt.plot(train_losses, label='Train Loss')\n","    plt.plot(val_losses, label='Val Loss')\n","    plt.legend()\n","    plt.title(\"Loss per Epoch\")\n","\n","    plt.subplot(1, 2, 2)\n","    plt.plot(train_accs, label='Train Acc')\n","    plt.plot(val_accs, label='Val Acc')\n","    plt.legend()\n","    plt.title(\"Accuracy per Epoch\")\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","    return model\n","\n"],"metadata":{"id":"RsIAjubD7CzS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744615686580,"user_tz":-330,"elapsed":37,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}},"outputId":"23816ba7-1cfd-4dba-f95e-04ad5e413c8e"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.63297151 2.38010204]\n","[0.7851647  1.37668634]\n","tensor([2.3801, 1.3767], device='cuda:0')\n"]}]},{"cell_type":"code","source":["\n","# Step 4: Prepare Data and Train\n","tokenizer = XLMRobertaTokenizer.from_pretrained('xlm-roberta-large')\n","\n","train_df, val_df = train_test_split(d1, test_size=0.2, random_state=42)\n","\n","train_dataset = TextDataset(train_df, tokenizer)\n","# print(train_dataset.labels)\n","val_dataset = TextDataset(val_df, tokenizer)\n","\n","train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n","val_loader = DataLoader(val_dataset, batch_size=16)\n","\n","model = XLMWithGRU(hidden_dim=128, rnn_type='GRU')  # or rnn_type='LSTM'\n","\n","count_trainable_parameters(model)\n","\n","model = train_model(model, train_loader, val_loader, epochs=3, lr= 2e-6)\n","\n"],"metadata":{"id":"Ce8blGHM7N4H","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1744616120299,"user_tz":-330,"elapsed":427010,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}},"outputId":"637d9c37-2daa-48a3-ce93-c6aa7371adf8"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","✅ Total Trainable Parameters: 560,777,218\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 1 - Train: 100%|██████████| 327/327 [01:50<00:00,  2.95it/s]\n","Epoch 1 - Val:   1%|          | 1/82 [00:00<00:25,  3.19it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.6110, 0.4858],\n","        [0.6133, 0.4703],\n","        [0.6158, 0.4701],\n","        [0.6161, 0.4929],\n","        [0.6183, 0.4820],\n","        [0.6128, 0.4889],\n","        [0.6111, 0.4912],\n","        [0.6162, 0.4810]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 1 - Val:   2%|▏         | 2/82 [00:00<00:25,  3.16it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.6223, 0.4797],\n","        [0.6102, 0.4875],\n","        [0.6196, 0.4802],\n","        [0.6177, 0.4810],\n","        [0.6100, 0.4844],\n","        [0.6194, 0.4950],\n","        [0.6111, 0.4786],\n","        [0.6177, 0.4818]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 1 - Val:   4%|▎         | 3/82 [00:00<00:25,  3.12it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.6114, 0.4732],\n","        [0.5995, 0.4966],\n","        [0.6079, 0.4991],\n","        [0.6155, 0.4905],\n","        [0.6228, 0.4894],\n","        [0.6108, 0.4992],\n","        [0.6228, 0.4746],\n","        [0.6258, 0.4788]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 1 - Val:   5%|▍         | 4/82 [00:01<00:25,  3.12it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.6123, 0.5001],\n","        [0.6286, 0.4721],\n","        [0.6163, 0.4817],\n","        [0.6168, 0.4819],\n","        [0.6186, 0.4844],\n","        [0.6114, 0.4950],\n","        [0.6172, 0.4751],\n","        [0.6309, 0.4733]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 1 - Val: 100%|██████████| 82/82 [00:26<00:00,  3.11it/s]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Epoch 1: Train Loss=0.9056, Val Loss=0.8868\n","Train Acc=0.4202, Val Acc=0.4116\n","Macro F1 Score: 0.1772\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 2 - Train: 100%|██████████| 327/327 [01:55<00:00,  2.84it/s]\n","Epoch 2 - Val:   1%|          | 1/82 [00:00<00:25,  3.16it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.5631, 0.4853],\n","        [0.5619, 0.4686],\n","        [0.5679, 0.4686],\n","        [0.5672, 0.4908],\n","        [0.5715, 0.4808],\n","        [0.5661, 0.4873],\n","        [0.5637, 0.4899],\n","        [0.5718, 0.4798]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 2 - Val:   2%|▏         | 2/82 [00:00<00:25,  3.11it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.5752, 0.4788],\n","        [0.5620, 0.4862],\n","        [0.5731, 0.4791],\n","        [0.5707, 0.4794],\n","        [0.5641, 0.4830],\n","        [0.5748, 0.4940],\n","        [0.5639, 0.4775],\n","        [0.5703, 0.4808]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 2 - Val:   4%|▎         | 3/82 [00:00<00:25,  3.08it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.5647, 0.4719],\n","        [0.5509, 0.4954],\n","        [0.5616, 0.4967],\n","        [0.5701, 0.4891],\n","        [0.5775, 0.4884],\n","        [0.5647, 0.4969],\n","        [0.5742, 0.4732],\n","        [0.5796, 0.4777]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 2 - Val:   5%|▍         | 4/82 [00:01<00:25,  3.06it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.5663, 0.4986],\n","        [0.5780, 0.4714],\n","        [0.5713, 0.4809],\n","        [0.5683, 0.4803],\n","        [0.5725, 0.4831],\n","        [0.5644, 0.4931],\n","        [0.5683, 0.4741],\n","        [0.5826, 0.4728]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 2 - Val: 100%|██████████| 82/82 [00:26<00:00,  3.07it/s]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Epoch 2: Train Loss=0.8727, Val Loss=0.8576\n","Train Acc=0.4235, Val Acc=0.4155\n","Macro F1 Score: 0.1715\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 3 - Train: 100%|██████████| 327/327 [01:55<00:00,  2.83it/s]\n","Epoch 3 - Val:   1%|          | 1/82 [00:00<00:26,  3.11it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.5233, 0.4834],\n","        [0.5193, 0.4655],\n","        [0.5282, 0.4663],\n","        [0.5267, 0.4876],\n","        [0.5324, 0.4787],\n","        [0.5273, 0.4848],\n","        [0.5243, 0.4874],\n","        [0.5346, 0.4776]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 3 - Val:   2%|▏         | 2/82 [00:00<00:26,  3.06it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.5358, 0.4769],\n","        [0.5221, 0.4838],\n","        [0.5344, 0.4770],\n","        [0.5316, 0.4769],\n","        [0.5260, 0.4807],\n","        [0.5376, 0.4920],\n","        [0.5248, 0.4754],\n","        [0.5308, 0.4788]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 3 - Val:   4%|▎         | 3/82 [00:00<00:26,  3.03it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.5260, 0.4698],\n","        [0.5107, 0.4930],\n","        [0.5230, 0.4935],\n","        [0.5323, 0.4868],\n","        [0.5396, 0.4865],\n","        [0.5264, 0.4937],\n","        [0.5337, 0.4707],\n","        [0.5409, 0.4757]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 3 - Val:   5%|▍         | 4/82 [00:01<00:25,  3.03it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.5280, 0.4960],\n","        [0.5359, 0.4693],\n","        [0.5337, 0.4791],\n","        [0.5281, 0.4778],\n","        [0.5339, 0.4808],\n","        [0.5252, 0.4902],\n","        [0.5276, 0.4720],\n","        [0.5422, 0.4712]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 3 - Val: 100%|██████████| 82/82 [00:26<00:00,  3.07it/s]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Epoch 3: Train Loss=0.8526, Val Loss=0.8382\n","Train Acc=0.4494, Val Acc=0.4174\n","Macro F1 Score: 0.1611\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Step 5: Evaluate on Test Set and Confusion Matrix\n","def evaluate_and_confusion(model, df, tokenizer):\n","    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","    model.eval()\n","    model.to(device)\n","    test_dataset = TextDataset(df, tokenizer)\n","    test_loader = DataLoader(test_dataset, batch_size=16)\n","\n","    y_true, y_pred = [], []\n","\n","    with torch.no_grad():\n","        for batch in tqdm(test_loader, desc=\"Test Evaluation\"):\n","            input_ids = batch['input_ids'].to(device)\n","            attention_mask = batch['attention_mask'].to(device)\n","            labels = batch['labels'].cpu().numpy()\n","            outputs = model(input_ids, attention_mask)\n","            preds = (torch.sigmoid(outputs).cpu().numpy() > 0.5).astype(int)\n","\n","            y_true.extend(labels)\n","            y_pred.extend(preds)\n","\n","    y_true = np.array(y_true)\n","    y_pred = np.array(y_pred)\n","\n","    for i, label in enumerate(['label_1', 'label_3']):\n","        cm = confusion_matrix(y_true[:, i], y_pred[:, i])\n","        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n","        plt.title(f'Confusion Matrix for {label}')\n","        plt.xlabel('Predicted')\n","        plt.ylabel('True')\n","        plt.show()\n","\n","    f1 = f1_score(y_true, y_pred, average='macro')\n","    print(f\"Macro F1 Score on Test Set: {f1:.4f}\")\n"],"metadata":{"id":"nPHnFTp47RcV","executionInfo":{"status":"ok","timestamp":1744616120309,"user_tz":-330,"elapsed":5,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["evaluate_and_confusion(model, dn_test, tokenizer)"],"metadata":{"id":"83kAIVpZ7TXH","colab":{"base_uri":"https://localhost:8080/","height":962},"executionInfo":{"status":"ok","timestamp":1744616143138,"user_tz":-330,"elapsed":22826,"user":{"displayName":"Sujal Soni","userId":"02404862410508418080"}},"outputId":"f6eb5fbb-bcb5-48b1-ee3f-955902997a5a"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stderr","text":["Test Evaluation: 100%|██████████| 70/70 [00:22<00:00,  3.10it/s]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Macro F1 Score on Test Set: 0.1722\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"KNXiH3O-9caE"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}